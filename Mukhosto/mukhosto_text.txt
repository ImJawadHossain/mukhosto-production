└── Mukhosto
    ├── admin
        └── index.html
    ├── icons
        └── logo.png
    ├── index.html
    ├── login.html
    ├── manifest.json
    ├── mukhosto.txt
    ├── payment.html
    ├── profile.html
    ├── sw.js
    ├── verifyAccess.js
    └── vocabulary
        ├── data.xlsx
        ├── flashcard.html
        ├── flashcard.js
        ├── index.html
        ├── index.js
        ├── known-words.html
        ├── review.html
        ├── review.js
        ├── settings.html
        ├── settings.js
        ├── srs-integrations.js
        ├── srs.js
        └── style.css


/Mukhosto/admin/index.html:
--------------------------------------------------------------------------------
  1 | <!DOCTYPE html>
  2 | <html lang="en">
  3 | <head>
  4 |   <meta charset="UTF-8" />
  5 |   <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  6 |   <title>Admin Dashboard</title>
  7 |   <script src="https://www.gstatic.com/firebasejs/9.22.2/firebase-app.js"></script>
  8 |   <script src="https://www.gstatic.com/firebasejs/9.22.2/firebase-auth.js"></script>
  9 |   <script src="https://www.gstatic.com/firebasejs/9.22.2/firebase-firestore.js"></script>
 10 |   <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
 11 | </head>
 12 | <body class="bg-gray-100 min-h-screen p-6">
 13 |   <div id="dashboard" class="hidden max-w-4xl mx-auto bg-white p-6 shadow-lg rounded-xl">
 14 |     <div class="flex items-center justify-between mb-6">
 15 |       <h1 class="text-2xl font-bold">Admin Dashboard</h1>
 16 |       <button onclick="logout()" class="bg-red-500 text-white px-3 py-1 rounded text-sm">Logout</button>
 17 |     </div>
 18 |     <p class="text-sm text-gray-600 mb-4">Only visible to <strong>Admins</strong>. Below is the full user list:</p>
 19 |     <div id="user-list" class="space-y-4">
 20 |       <p class="text-gray-400">Loading users...</p>
 21 |     </div>
 22 |   </div>
 23 | 
 24 |   <div id="error" class="hidden text-center mt-20 text-gray-600">
 25 |     <h2 class="text-3xl font-bold text-red-600 mb-4">404 - Page Not Found</h2>
 26 |     <p>You do not have permission to view this page.</p>
 27 |   </div>
 28 | 
 29 |   <script type="module">
 30 |     import { initializeApp } from "https://www.gstatic.com/firebasejs/9.22.2/firebase-app.js";
 31 |     import {
 32 |       getAuth,
 33 |       onAuthStateChanged,
 34 |       signOut
 35 |     } from "https://www.gstatic.com/firebasejs/9.22.2/firebase-auth.js";
 36 |     import {
 37 |       getFirestore,
 38 |       collection,
 39 |       getDocs,
 40 |       doc,
 41 |       getDoc,
 42 |       updateDoc
 43 |     } from "https://www.gstatic.com/firebasejs/9.22.2/firebase-firestore.js";
 44 | 
 45 |     const firebaseConfig = {
 46 |       apiKey: "AIzaSyBqzg9fA14lD_ygNx8CSRiRsnrz1bBNfUw",
 47 |       authDomain: "memory-auth-9515c.firebaseapp.com",
 48 |       projectId: "memory-auth-9515c",
 49 |       storageBucket: "memory-auth-9515c.appspot.com",
 50 |       messagingSenderId: "862743577103",
 51 |       appId: "1:862743577103:web:11fe02f4c24ef2c9c8197a"
 52 |     };
 53 | 
 54 |     const app = initializeApp(firebaseConfig);
 55 |     const auth = getAuth(app);
 56 |     const db = getFirestore(app);
 57 | 
 58 |     const dashboard = document.getElementById("dashboard");
 59 |     const userList = document.getElementById("user-list");
 60 |     const errorDiv = document.getElementById("error");
 61 | 
 62 |     onAuthStateChanged(auth, async (user) => {
 63 |       if (!user) {
 64 |         window.location.href = "../login.html";
 65 |         return;
 66 |       }
 67 | 
 68 |       const userDocRef = doc(db, "users", user.uid);
 69 |       const userDocSnap = await getDoc(userDocRef);
 70 | 
 71 |       if (!userDocSnap.exists() || userDocSnap.data().admin !== true) {
 72 |         // Not admin — show error
 73 |         errorDiv.classList.remove("hidden");
 74 |         return;
 75 |       }
 76 | 
 77 |       // Is admin — show dashboard
 78 |       dashboard.classList.remove("hidden");
 79 | 
 80 |       const snapshot = await getDocs(collection(db, "users"));
 81 |       userList.innerHTML = "";
 82 | 
 83 |       if (snapshot.empty) {
 84 |         userList.innerHTML = "<p class='text-gray-500'>No users found.</p>";
 85 |         return;
 86 |       }
 87 | 
 88 |       const pendingUsers = [];
 89 |       const otherUsers = [];
 90 | 
 91 |       snapshot.forEach(docSnap => {
 92 |         const userData = docSnap.data();
 93 |         const uid = docSnap.id;
 94 |         const name = userData.name || "N/A";
 95 |         const email = userData.email || "Unknown";
 96 |         const trxid = userData.trxid || null;
 97 |         const mobile = userData.mobile || null;
 98 |         const paid = userData.paid === true;
 99 |         const paymentStatus = userData.paymentStatus || "not paid";
100 | 
101 |         const userObj = { uid, name, email, trxid, mobile, paid, paymentStatus };
102 |         if (paymentStatus === "pending") {
103 |           pendingUsers.push(userObj);
104 |         } else {
105 |           otherUsers.push(userObj);
106 |         }
107 |       });
108 | 
109 |       const sortedUsers = [...pendingUsers, ...otherUsers];
110 | 
111 |       sortedUsers.forEach(({ uid, name, email, trxid, mobile, paid, paymentStatus }) => {
112 |         const statusColor = paymentStatus === "pending"
113 |           ? "text-yellow-600"
114 |           : paid ? "text-green-600"
115 |           : "text-gray-500";
116 | 
117 |         const cardBg = paymentStatus === "pending" ? "bg-red-100" : "bg-gray-100";
118 |         const showVerifyBtn = paymentStatus === "pending";
119 | 
120 |         const div = document.createElement("div");
121 |         div.className = `flex flex-col sm:flex-row justify-between items-start sm:items-center ${cardBg} p-4 rounded`;
122 | 
123 |         div.innerHTML = `
124 |           <div>
125 |             <p class="font-semibold">${name}</p>
126 |             <p class="text-sm text-gray-700">${email}</p>
127 |             ${trxid ? `<p class="text-sm text-yellow-700">TRX: ${trxid}</p>` : ""}
128 |             ${mobile ? `<p class="text-sm text-blue-700">Mobile: ${mobile}</p>` : ""}
129 |             <p class="text-sm ${statusColor} mt-1">Payment Status: ${paymentStatus}</p>
130 |             <span class="inline-block mt-2 px-2 py-1 text-xs rounded font-medium ${paid ? 'bg-green-200 text-green-800' : 'bg-red-200 text-red-800'}">
131 |               ${paid ? '✅ Has Access' : '❌ No Access'}
132 |             </span>
133 |           </div>
134 |           <div class="mt-3 sm:mt-0 flex items-center space-x-2">
135 |             <button
136 |               onclick="updateAccess('${uid}', ${!paid})"
137 |               class="px-3 py-1 text-sm rounded text-white bg-${paid ? 'red' : 'green'}-600"
138 |             >
139 |               ${paid ? 'Revoke Access' : 'Give Access'}
140 |             </button>
141 |             ${showVerifyBtn ? `
142 |               <button
143 |                 onclick="verifyPayment('${uid}')"
144 |                 class="p-2 text-sm rounded-full bg-blue-600 text-white hover:bg-blue-700"
145 |                 title="Verify Payment"
146 |               >
147 |                 🗸
148 |               </button>` : ""}
149 |           </div>
150 |         `;
151 | 
152 |         userList.appendChild(div);
153 |       });
154 |     });
155 | 
156 |     window.updateAccess = async (uid, giveAccess) => {
157 |       const confirmed = confirm(`Are you sure you want to ${giveAccess ? "grant" : "revoke"} access?`);
158 |       if (!confirmed) return;
159 | 
160 |       await updateDoc(doc(db, "users", uid), {
161 |         paid: giveAccess,
162 |         paymentStatus: giveAccess ? "verified" : "rejected"
163 |       });
164 | 
165 |       alert(`User access has been ${giveAccess ? "granted" : "revoked"}.`);
166 |       location.reload();
167 |     };
168 | 
169 |     window.verifyPayment = async (uid) => {
170 |       const confirmed = confirm("Mark this payment as verified?");
171 |       if (!confirmed) return;
172 | 
173 |       await updateDoc(doc(db, "users", uid), {
174 |         paid: true,
175 |         paymentStatus: "verified"
176 |       });
177 | 
178 |       alert("Payment marked as verified.");
179 |       location.reload();
180 |     };
181 | 
182 |     window.logout = () => {
183 |       signOut(auth).then(() => {
184 |         window.location.href = "/login.html";
185 |       });
186 |     };
187 |   </script>
188 | </body>
189 | </html>
190 | 


--------------------------------------------------------------------------------
/Mukhosto/icons/logo.png:
--------------------------------------------------------------------------------
https://raw.githubusercontent.com/ImJawadHossain/mukhosto-production/ea340e36ba4233f4dfb20f086b3e3c8b45fd8051/Mukhosto/icons/logo.png


--------------------------------------------------------------------------------
/Mukhosto/index.html:
--------------------------------------------------------------------------------
  1 | <!DOCTYPE html>
  2 | <html lang="en">
  3 | <head>
  4 |   <meta charset="UTF-8" />
  5 |   <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  6 |   <title>English Practice Hub</title>
  7 |   <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
  8 |   <script src="https://unpkg.com/lucide@latest"></script>
  9 |   <script src="https://www.gstatic.com/firebasejs/9.22.2/firebase-app.js"></script>
 10 |   <script src="https://www.gstatic.com/firebasejs/9.22.2/firebase-auth.js"></script>
 11 |   <script src="https://www.gstatic.com/firebasejs/9.22.2/firebase-firestore.js"></script>
 12 |   <link rel="manifest" href="/manifest.json" />
 13 |   <meta name="theme-color" content="#1e40af">
 14 | 
 15 | </head>
 16 | <body class="bg-gray-50 min-h-screen py-10 px-4">
 17 | 
 18 |   <!-- 🔝 Profile Dropdown -->
 19 |   <div class="absolute top-4 right-6">
 20 |     <div class="relative inline-block text-left">
 21 |       <button id="profile-button" class="flex items-center space-x-2 px-3 py-2 bg-white border border-gray-200 rounded-full shadow-sm hover:bg-gray-100 transition">
 22 |         <img id="profile-avatar" src="" alt="Avatar" class="w-8 h-8 rounded-full" />
 23 |         <span id="user-name" class="text-sm font-medium text-gray-700">Loading...</span>
 24 |         <span id="access-badge" class="ml-2 text-xs font-semibold px-2 py-0.5 rounded hidden"></span>
 25 |         <svg class="w-4 h-4 text-gray-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
 26 |           <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7" />
 27 |         </svg>
 28 |       </button>
 29 | 
 30 |       <div id="dropdown-menu" class="hidden absolute right-0 mt-2 w-48 bg-white border border-gray-200 rounded-lg shadow-lg z-50">
 31 |         <a href="/profile.html" class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100">View Profile</a>
 32 |         <a id="access-status-link" href="#" class="block px-4 py-2 text-sm font-medium rounded"></a>
 33 |         <a href="/payment.html" class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100">Buy Now</a>
 34 |         <button id="logout-btn" class="w-full text-left px-4 py-2 text-sm text-red-600 hover:bg-gray-100">Logout</button>
 35 | 
 36 |       </div>
 37 |     </div>
 38 |   </div>
 39 | 
 40 |   <!-- 💡 Main Content -->
 41 |   <div class="max-w-5xl mx-auto text-center">
 42 |     <h1 class="text-4xl font-bold mb-4"><br>Mukhosto.com | Memorization Tools</h1>
 43 |     <p class="text-lg text-gray-600 mb-10">Sharpen your English skills — one click at a time!</p>
 44 | 
 45 |   <div id="install-container" class="fixed bottom-6 right-6 hidden">
 46 |   <button id="install-button" class="bg-blue-600 text-white px-4 py-2 rounded-lg shadow-md hover:bg-blue-700 transition">
 47 |     📲 Install App
 48 |   </button>
 49 | </div>
 50 | 
 51 | 
 52 |     <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-6">
 53 |       <div class="rounded-2xl shadow-md hover:shadow-lg transition bg-white p-6 flex flex-col items-center text-center">
 54 |         <i data-lucide="book-open" class="w-8 h-8 text-blue-600"></i>
 55 |         <h2 class="text-xl font-semibold mt-4 mb-2">Student Vocabulary</h2>
 56 |         <p class="text-sm text-gray-500 mb-4">500 very important vocabulary for Admission, Job Exam</p>
 57 |         <a href="/vocabulary" class="bg-blue-600 text-white px-4 py-2 rounded-xl">Start Practicing</a>
 58 |       </div>
 59 | 
 60 |       <div class="rounded-2xl shadow-md hover:shadow-lg transition bg-white p-6 flex flex-col items-center text-center">
 61 |         <i data-lucide="repeat" class="w-8 h-8 text-green-600"></i>
 62 |         <h2 class="text-xl font-semibold mt-4 mb-2">IELTS Vocabulary</h2>
 63 |         <p class="text-sm text-gray-500 mb-4">These 800 Vocabulary is enough for getting IELST band: 8 or higher</p>
 64 |         <a href="/IELTS" class="bg-green-600 text-white px-4 py-2 rounded-xl">Start Practicing</a>
 65 |       </div>
 66 | 
 67 |       <div class="rounded-2xl shadow-md hover:shadow-lg transition bg-white p-6 flex flex-col items-center text-center">
 68 |         <i data-lucide="message-circle" class="w-8 h-8 text-purple-600"></i>
 69 |         <h2 class="text-xl font-semibold mt-4 mb-2">Vocabulary for Speaking</h2>
 70 |         <p class="text-sm text-gray-500 mb-4">Learn these 600 vocabulary for everyday speaking</p>
 71 |         <a href="/Speaking" class="bg-purple-600 text-white px-4 py-2 rounded-xl">Start Practicing</a>
 72 |       </div>
 73 | 
 74 |       <div class="rounded-2xl shadow-md hover:shadow-lg transition bg-white p-6 flex flex-col items-center text-center">
 75 |         <i data-lucide="scroll-text" class="w-8 h-8 text-yellow-600"></i>
 76 |         <h2 class="text-xl font-semibold mt-4 mb-2">Basic Vocabulary</h2>
 77 |         <p class="text-sm text-gray-500 mb-4">Basic 600 vocabulary like "Eat: খাওয়া”</p>
 78 |         <a href="/basic" class="bg-yellow-600 text-white px-4 py-2 rounded-xl">Start Practicing</a>
 79 |       </div>
 80 |       
 81 |       
 82 |       
 83 | 
 84 | 
 85 |   <!-- 📎 Footer -->
 86 |   <footer class="text-center text-sm text-gray-500 mt-12 mb-6">
 87 |     <p class="mt-1">&copy; 2025 Jawad. All rights reserved.</p>
 88 |   </footer>
 89 | 
 90 |   <!-- 📜 Scripts -->
 91 |   <script type="module">
 92 |     import { initializeApp } from "https://www.gstatic.com/firebasejs/9.22.2/firebase-app.js";
 93 |     import { getAuth, onAuthStateChanged, signOut } from "https://www.gstatic.com/firebasejs/9.22.2/firebase-auth.js";
 94 |     import { getFirestore, doc, getDoc } from "https://www.gstatic.com/firebasejs/9.22.2/firebase-firestore.js";
 95 | 
 96 |     const firebaseConfig = {
 97 |       apiKey: "AIzaSyBqzg9fA14lD_ygNx8CSRiRsnrz1bBNfUw",
 98 |       authDomain: "memory-auth-9515c.firebaseapp.com",
 99 |       projectId: "memory-auth-9515c",
100 |       storageBucket: "memory-auth-9515c.appspot.com",
101 |       messagingSenderId: "862743577103",
102 |       appId: "1:862743577103:web:11fe02f4c24ef2c9c8197a"
103 |     };
104 | 
105 |     const app = initializeApp(firebaseConfig);
106 |     const auth = getAuth(app);
107 |     const db = getFirestore(app);
108 | 
109 |     const profileButton = document.getElementById('profile-button');
110 |     const dropdown = document.getElementById('dropdown-menu');
111 |     const userNameSpan = document.getElementById('user-name');
112 |     const logoutBtn = document.getElementById('logout-btn');
113 |     const avatarImg = document.getElementById('profile-avatar');
114 |     const badge = document.getElementById('access-badge');
115 |     const accessLink = document.getElementById('access-status-link');
116 | 
117 |     profileButton.addEventListener('click', () => dropdown.classList.toggle('hidden'));
118 |     logoutBtn.addEventListener('click', () => signOut(auth).then(() => window.location.href = '/login.html'));
119 | onAuthStateChanged(auth, async (user) => {
120 |   const dropdownMenu = document.getElementById("dropdown-menu");
121 | 
122 |   // Clean up extra links if previously rendered
123 |   ['signup-link', 'admin-dashboard-link'].forEach(id => {
124 |     const el = document.getElementById(id);
125 |     if (el) el.remove();
126 |   });
127 | 
128 |   // Guest
129 |   if (!user) {
130 |     userNameSpan.textContent = "Guest";
131 |     avatarImg.src = `https://ui-avatars.com/api/?name=Guest&background=ccc&size=32`;
132 | 
133 |     badge.textContent = "Login/Signup";
134 |     badge.className = "ml-2 text-xs font-semibold px-2 py-0.5 rounded bg-gray-100 text-gray-600";
135 |     badge.classList.remove("hidden");
136 | 
137 |     accessLink.textContent = "🔐 Login";
138 |     accessLink.href = "/login.html";
139 |     accessLink.className = "block px-4 py-2 text-sm font-medium bg-blue-100 text-blue-700 hover:bg-blue-200";
140 |     logoutBtn.classList.add("hidden");
141 | 
142 |     // Add Signup
143 |     const signupLink = document.createElement("a");
144 |     signupLink.id = "signup-link";
145 |     signupLink.href = "/signup.html";
146 |     signupLink.textContent = "📝 Signup";
147 |     signupLink.className = "block px-4 py-2 text-sm font-medium bg-blue-100 text-green-700 hover:bg-green-200";
148 |     dropdownMenu.appendChild(signupLink);
149 | 
150 | 
151 | 
152 | 
153 |     return;
154 |   }
155 | 
156 |   // Logged-in user
157 |   logoutBtn.classList.remove("hidden");
158 | 
159 |   const snap = await getDoc(doc(db, 'users', user.uid));
160 |   const name = snap.exists() ? snap.data().name : user.email;
161 |   const isAdmin = snap.exists() && snap.data().admin === true;
162 |   const paymentStatus = snap.exists() ? snap.data().paymentStatus : "not paid";
163 | 
164 |   userNameSpan.textContent = name;
165 |   const initials = name.split(" ").map(n => n[0]).join("").toUpperCase();
166 |   avatarImg.src = `https://ui-avatars.com/api/?name=${initials}&background=random&size=32`;
167 | 
168 |   if (isAdmin) {
169 |     // Admin UI
170 |     badge.textContent = "Admin";
171 |     badge.className = "ml-2 text-xs font-semibold px-2 py-0.5 rounded bg-black text-white";
172 |     badge.classList.remove("hidden");
173 | 
174 |     accessLink.textContent = "🛠 Admin Dashboard";
175 |     accessLink.href = "/admin";
176 |     accessLink.className = "block px-4 py-2 text-sm font-medium bg-black text-white hover:bg-gray-800";
177 | 
178 |     return;
179 |   }
180 | 
181 |   // General User Access Logic
182 |   badge.classList.remove("hidden");
183 | 
184 |   if (paymentStatus === "verified") {
185 |     badge.textContent = "Full Access";
186 |     badge.className = "ml-2 text-xs font-semibold px-2 py-0.5 rounded bg-green-100 text-green-700";
187 | 
188 |     accessLink.textContent = "✅ Full Access";
189 |     accessLink.href = "/dashboard.html";
190 |     accessLink.className = "block px-4 py-2 text-sm font-medium bg-green-100 text-green-700";
191 |     accessLink.style.cursor = "default";
192 | 
193 |   } else if (paymentStatus === "pending") {
194 |     badge.textContent = "Reviewing";
195 |     badge.className = "ml-2 text-xs font-semibold px-2 py-0.5 rounded bg-yellow-100 text-yellow-700";
196 | 
197 |     accessLink.textContent = "⏳ Reviewing...";
198 |     accessLink.href = "/dashboard.html";
199 |     accessLink.className = "block px-4 py-2 text-sm font-medium bg-yellow-100 text-yellow-700";
200 |     accessLink.style.cursor = "default";
201 | 
202 |   } else {
203 |     badge.textContent = "No Access";
204 |     badge.className = "ml-2 text-xs font-semibold px-2 py-0.5 rounded bg-red-100 text-red-700";
205 | 
206 |     accessLink.textContent = "🔓 Get Full Access";
207 |     accessLink.href = "/payment.html";
208 |     accessLink.className = "block px-4 py-2 text-sm font-medium bg-red-100 text-red-700 hover:bg-red-200";
209 |   }
210 | });
211 | 
212 | 
213 | 
214 | 
215 |   </script>
216 | 
217 |   <script>
218 |     lucide.createIcons();
219 |   </script>
220 |   <script>
221 |   if ('serviceWorker' in navigator) {
222 |     window.addEventListener('load', function () {
223 |       navigator.serviceWorker.register('/sw.js')
224 |         .then(reg => console.log('Service worker registered:', reg))
225 |         .catch(err => console.error('SW registration failed:', err));
226 |     });
227 |   }
228 | </script>
229 | 
230 | <script>
231 |   let deferredPrompt;
232 |   const installContainer = document.getElementById("install-container");
233 |   const installButton = document.getElementById("install-button");
234 | 
235 |   window.addEventListener("beforeinstallprompt", (e) => {
236 |     // Stop the mini-infobar from appearing
237 |     e.preventDefault();
238 |     deferredPrompt = e;
239 |     installContainer.classList.remove("hidden"); // Show the custom install button
240 |   });
241 | 
242 |   installButton.addEventListener("click", async () => {
243 |     if (deferredPrompt) {
244 |       deferredPrompt.prompt();
245 |       const { outcome } = await deferredPrompt.userChoice;
246 |       console.log(`User response to the install prompt: ${outcome}`);
247 |       if (outcome === 'accepted') {
248 |         installContainer.classList.add("hidden");
249 |       }
250 |       deferredPrompt = null;
251 |     }
252 |   });
253 | </script>
254 | 
255 | 
256 | 
257 | 
258 | </body>
259 | </html>
260 | 


--------------------------------------------------------------------------------
/Mukhosto/login.html:
--------------------------------------------------------------------------------
  1 | <!DOCTYPE html>
  2 | <html lang="en">
  3 | <head>
  4 |   <meta charset="UTF-8" />
  5 |   <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  6 |   <title>Mukhosto | Login / Signup</title>
  7 |   <script src="https://www.gstatic.com/firebasejs/9.22.2/firebase-app.js"></script>
  8 |   <script src="https://www.gstatic.com/firebasejs/9.22.2/firebase-auth.js"></script>
  9 |   <script src="https://www.gstatic.com/firebasejs/9.22.2/firebase-firestore.js"></script>
 10 |   <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
 11 | </head>
 12 | <body class="bg-gray-50 min-h-screen flex items-center justify-center">
 13 |   <div class="bg-white shadow-md p-6 rounded-xl max-w-sm w-full">
 14 |     <!-- Tabs -->
 15 |     <div class="flex mb-6 border-b">
 16 |       <button id="login-tab" class="w-1/2 py-2 font-semibold text-blue-600 border-b-2 border-blue-600">Login</button>
 17 |       <button id="signup-tab" class="w-1/2 py-2 font-semibold text-gray-600">Signup</button>
 18 |     </div>
 19 | 
 20 |     <!-- Login Form -->
 21 |     <div id="login-form">
 22 |       <input id="login-email" type="email" placeholder="Email" class="w-full mb-3 px-4 py-2 border rounded" />
 23 |       <input id="login-password" type="password" placeholder="Password" class="w-full mb-4 px-4 py-2 border rounded" />
 24 | 
 25 |       <button id="login-btn" onclick="login()" class="w-full bg-blue-600 text-white py-2 rounded mb-3 flex items-center justify-center">
 26 |         <svg id="login-spinner" class="w-5 h-5 mr-2 animate-spin hidden" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
 27 |           <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
 28 |           <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8v4a4 4 0 00-4 4H4z"></path>
 29 |         </svg>
 30 |         <span id="login-text">Login</span>
 31 |       </button>
 32 | 
 33 |       <button onclick="continueWithGoogle()" class="w-full py-2 rounded border flex items-center justify-center hover:bg-gray-100">
 34 |         <img src="https://www.svgrepo.com/show/475656/google-color.svg" class="w-5 h-5 mr-2" alt="Google logo" />
 35 |         <span>Continue with Google</span>
 36 |       </button>
 37 |     </div>
 38 | 
 39 |     <!-- Signup Form -->
 40 |     <div id="signup-form" class="hidden">
 41 |       <input id="signup-name" type="text" placeholder="Full Name" class="w-full mb-3 px-4 py-2 border rounded" />
 42 |       <input id="signup-email" type="email" placeholder="Email" class="w-full mb-3 px-4 py-2 border rounded" />
 43 |       <input id="signup-password" type="password" placeholder="Password" class="w-full mb-4 px-4 py-2 border rounded" />
 44 | 
 45 |       <button id="signup-btn" onclick="signup()" class="w-full bg-blue-600 text-white py-2 rounded mb-3 flex items-center justify-center">
 46 |         <svg id="signup-spinner" class="w-5 h-5 mr-2 animate-spin hidden" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
 47 |           <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
 48 |           <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8v4a4 4 0 00-4 4H4z"></path>
 49 |         </svg>
 50 |         <span id="signup-text">Sign Up</span>
 51 |       </button>
 52 | 
 53 |       <button onclick="continueWithGoogle()" class="w-full py-2 rounded border flex items-center justify-center hover:bg-gray-100">
 54 |         <img src="https://www.svgrepo.com/show/475656/google-color.svg" class="w-5 h-5 mr-2" alt="Google logo" />
 55 |         <span>Continue with Google</span>
 56 |       </button>
 57 |     </div>
 58 | 
 59 |     <!-- Error Display -->
 60 |     <p id="error" class="text-red-500 text-sm mt-3 text-center"></p>
 61 |   </div>
 62 | 
 63 |   <script type="module">
 64 |     // --- Firebase Config ---
 65 |     const firebaseConfig = {
 66 |       apiKey: "AIzaSyBqzg9fA14lD_ygNx8CSRiRsnrz1bBNfUw",
 67 |       authDomain: "memory-auth-9515c.firebaseapp.com",
 68 |       projectId: "memory-auth-9515c",
 69 |       storageBucket: "memory-auth-9515c.appspot.com",
 70 |       messagingSenderId: "862743577103",
 71 |       appId: "1:862743577103:web:11fe02f4c24ef2c9c8197a",
 72 |       measurementId: "G-XNT36FMPK6"
 73 |     };
 74 | 
 75 |     import { initializeApp } from "https://www.gstatic.com/firebasejs/9.22.2/firebase-app.js";
 76 |     import {
 77 |       getAuth,
 78 |       signInWithEmailAndPassword,
 79 |       createUserWithEmailAndPassword,
 80 |       signInWithPopup,
 81 |       GoogleAuthProvider
 82 |     } from "https://www.gstatic.com/firebasejs/9.22.2/firebase-auth.js";
 83 |     import {
 84 |       getFirestore,
 85 |       doc,
 86 |       setDoc,
 87 |       getDoc
 88 |     } from "https://www.gstatic.com/firebasejs/9.22.2/firebase-firestore.js";
 89 | 
 90 |     const app = initializeApp(firebaseConfig);
 91 |     const auth = getAuth(app);
 92 |     const db = getFirestore(app);
 93 |     const provider = new GoogleAuthProvider();
 94 | 
 95 |     const errorDisplay = document.getElementById("error");
 96 | 
 97 |     // ---- Tabs Switch ----
 98 |     const loginTab = document.getElementById("login-tab");
 99 |     const signupTab = document.getElementById("signup-tab");
100 |     const loginForm = document.getElementById("login-form");
101 |     const signupForm = document.getElementById("signup-form");
102 | 
103 |     loginTab.onclick = () => {
104 |       loginForm.classList.remove("hidden");
105 |       signupForm.classList.add("hidden");
106 |       loginTab.classList.add("text-blue-600", "border-b-2", "border-blue-600");
107 |       signupTab.classList.remove("text-blue-600", "border-b-2", "border-blue-600");
108 |       signupTab.classList.add("text-gray-600");
109 |     };
110 | 
111 |     signupTab.onclick = () => {
112 |       signupForm.classList.remove("hidden");
113 |       loginForm.classList.add("hidden");
114 |       signupTab.classList.add("text-blue-600", "border-b-2", "border-blue-600");
115 |       loginTab.classList.remove("text-blue-600", "border-b-2", "border-blue-600");
116 |       loginTab.classList.add("text-gray-600");
117 |     };
118 | 
119 |     // ---- Signup (Email/Password) ----
120 |     window.signup = () => {
121 |       const name = document.getElementById("signup-name").value.trim();
122 |       const email = document.getElementById("signup-email").value.trim();
123 |       const password = document.getElementById("signup-password").value.trim();
124 |       const signupSpinner = document.getElementById("signup-spinner");
125 |       const signupBtn = document.getElementById("signup-btn");
126 |       const signupText = document.getElementById("signup-text");
127 | 
128 |       errorDisplay.textContent = "";
129 |       if (!name || !email || !password) {
130 |         errorDisplay.textContent = "Please fill all fields!";
131 |         return;
132 |       }
133 | 
134 |       signupSpinner.classList.remove("hidden");
135 |       signupBtn.disabled = true;
136 |       signupText.textContent = "Signing up…";
137 | 
138 |       createUserWithEmailAndPassword(auth, email, password)
139 |         .then(async (cred) => {
140 |           const userRef = doc(db, "users", cred.user.uid);
141 |           await setDoc(userRef, {
142 |             paid: false,
143 |             email: email,
144 |             name: name
145 |           });
146 |           window.location.href = "/";
147 |         })
148 |         .catch(err => errorDisplay.textContent = err.message)
149 |         .finally(() => {
150 |           signupSpinner.classList.add("hidden");
151 |           signupBtn.disabled = false;
152 |           signupText.textContent = "Sign Up";
153 |         });
154 |     };
155 | 
156 |     // ---- Login (Email/Password) ----
157 |     window.login = () => {
158 |       const email = document.getElementById("login-email").value.trim();
159 |       const password = document.getElementById("login-password").value.trim();
160 |       const loginSpinner = document.getElementById("login-spinner");
161 |       const loginBtn = document.getElementById("login-btn");
162 |       const loginText = document.getElementById("login-text");
163 | 
164 |       errorDisplay.textContent = "";
165 |       loginSpinner.classList.remove("hidden");
166 |       loginBtn.disabled = true;
167 |       loginText.textContent = "Logging in…";
168 | 
169 |       signInWithEmailAndPassword(auth, email, password)
170 |         .then(() => window.location.href = "/")
171 |         .catch(err => errorDisplay.textContent = err.message)
172 |         .finally(() => {
173 |           loginSpinner.classList.add("hidden");
174 |           loginBtn.disabled = false;
175 |           loginText.textContent = "Login";
176 |         });
177 |     };
178 | 
179 |     // ---- Google Login/Signup (Create Once) ----
180 |     window.continueWithGoogle = () => {
181 |       errorDisplay.textContent = "";
182 |       signInWithPopup(auth, provider)
183 |         .then(async (result) => {
184 |           const user = result.user;
185 |           const userRef = doc(db, "users", user.uid);
186 |           const snap = await getDoc(userRef);
187 |           if (!snap.exists()) {
188 |             await setDoc(userRef, {
189 |               paid: false,
190 |               email: user.email,
191 |               name: user.displayName || "Anonymous"
192 |             });
193 |           }
194 |           window.location.href = "/";
195 |         })
196 |         .catch(err => errorDisplay.textContent = err.message);
197 |     };
198 |   </script>
199 | </body>
200 | </html>
201 | 


--------------------------------------------------------------------------------
/Mukhosto/manifest.json:
--------------------------------------------------------------------------------
 1 | {
 2 |   "name": "Mukhosto",
 3 |   "short_name": "Mukhosto",
 4 |   "start_url": "/index.html",
 5 |   "display": "standalone",
 6 |   "background_color": "#ffffff",
 7 |   "theme_color": "#1e40af",
 8 |   "orientation": "portrait",
 9 |   "icons": [
10 |     {
11 |       "src": "/icons/logo.png",
12 |       "sizes": "192x192",
13 |       "type": "image/png"
14 |     },
15 |     {
16 |       "src": "/icons/logo.png",
17 |       "sizes": "512x512",
18 |       "type": "image/png"
19 |     }
20 |   ]
21 | }
22 | 


--------------------------------------------------------------------------------
/Mukhosto/payment.html:
--------------------------------------------------------------------------------
  1 | <!DOCTYPE html>
  2 | <html lang="en">
  3 | <head>
  4 |   <meta charset="UTF-8" />
  5 |   <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  6 |   <title>Limited Time Offer | Jawad Hossain</title>
  7 |   <script src="https://www.gstatic.com/firebasejs/9.22.2/firebase-app.js"></script>
  8 |   <script src="https://www.gstatic.com/firebasejs/9.22.2/firebase-auth.js"></script>
  9 |   <script src="https://www.gstatic.com/firebasejs/9.22.2/firebase-firestore.js"></script>
 10 |   <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
 11 | </head>
 12 | <body class="bg-gray-100 min-h-screen flex items-center justify-center px-4">
 13 |   <div class="bg-white shadow-xl rounded-2xl max-w-2xl w-full p-8">
 14 |     <div class="text-center">
 15 |       <h1 class="text-3xl font-bold text-gray-800 mb-4">🚀 Special Limited-Time Offer!</h1>
 16 |       <p class="text-lg text-gray-600 mb-2">Get access to our premium content and tools at a massive discount.</p>
 17 |       <p class="text-gray-700 text-md mb-4">Previously <span class="line-through text-red-500">৳1000</span>, now only <span class="text-green-600 font-semibold text-xl">৳499</span>!</p>
 18 |     </div>
 19 | 
 20 |     <div class="bg-gray-50 border border-dashed border-gray-300 p-4 rounded-lg mb-6 text-center">
 21 |       <p class="text-sm text-gray-700 mb-2">Send ৳499 to the following bKash (personal) number:</p>
 22 |       <p class="text-pink-600 font-bold text-2xl tracking-wide">01402633318</p>
 23 |       <p class="text-xs mt-2 text-gray-500">After payment, enter your transaction details below to confirm.</p>
 24 |     </div>
 25 | 
 26 |     <div class="mb-4">
 27 |       <input id="trxid" type="text" placeholder="bKash Transaction ID" class="w-full px-4 py-3 border rounded-lg mb-3 focus:outline-none focus:ring-2 focus:ring-blue-500" />
 28 |       <input id="mobile" type="text" placeholder="Your Mobile Number" class="w-full px-4 py-3 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500" />
 29 |     </div>
 30 | 
 31 |     <button id="submit-btn" onclick="submitTrx()" class="w-full bg-blue-600 hover:bg-blue-700 text-white py-3 rounded-lg font-semibold transition duration-200 flex items-center justify-center">
 32 |       <svg id="submit-spinner" class="w-5 h-5 mr-2 animate-spin hidden" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
 33 |         <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
 34 |         <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8v4a4 4 0 00-4 4H4z" />
 35 |       </svg>
 36 |       <span id="submit-text">Confirm Payment</span>
 37 |     </button>
 38 | 
 39 |     <p id="message" class="text-green-600 text-center mt-4 hidden">🎉 Payment submitted! We’ll verify and activate your access soon.</p>
 40 |     <p id="error" class="text-red-500 text-sm mt-2 text-center"></p>
 41 | 
 42 |     <div class="mt-6 text-center text-sm text-gray-500">
 43 |       1000+ satisfied users have already joined. Don’t miss out on this offer!
 44 |     </div>
 45 |   </div>
 46 | 
 47 |   <script type="module">
 48 |     const submitBtn = document.getElementById("submit-btn");
 49 |     const submitSpinner = document.getElementById("submit-spinner");
 50 |     const submitText = document.getElementById("submit-text");
 51 | 
 52 |     const firebaseConfig = {
 53 |       apiKey: "AIzaSyBqzg9fA14lD_ygNx8CSRiRsnrz1bBNfUw",
 54 |       authDomain: "memory-auth-9515c.firebaseapp.com",
 55 |       projectId: "memory-auth-9515c",
 56 |       storageBucket: "memory-auth-9515c.appspot.com",
 57 |       messagingSenderId: "862743577103",
 58 |       appId: "1:862743577103:web:11fe02f4c24ef2c9c8197a",
 59 |       measurementId: "G-XNT36FMPK6"
 60 |     };
 61 | 
 62 |     import { initializeApp } from "https://www.gstatic.com/firebasejs/9.22.2/firebase-app.js";
 63 |     import { getAuth, onAuthStateChanged } from "https://www.gstatic.com/firebasejs/9.22.2/firebase-auth.js";
 64 |     import { getFirestore, doc, updateDoc } from "https://www.gstatic.com/firebasejs/9.22.2/firebase-firestore.js";
 65 | 
 66 |     const app = initializeApp(firebaseConfig);
 67 |     const auth = getAuth(app);
 68 |     const db = getFirestore(app);
 69 | 
 70 |     const trxInput = document.getElementById("trxid");
 71 |     const mobileInput = document.getElementById("mobile");
 72 |     const msg = document.getElementById("message");
 73 |     const error = document.getElementById("error");
 74 | 
 75 |     let currentUID = null;
 76 | 
 77 |     onAuthStateChanged(auth, user => {
 78 |       if (!user) {
 79 |         window.location.href = "login.html";
 80 |         return;
 81 |       }
 82 |       currentUID = user.uid;
 83 |     });
 84 | 
 85 |     window.submitTrx = async () => {
 86 |       error.textContent = "";
 87 |       const trx = trxInput.value.trim();
 88 |       const mobile = mobileInput.value.trim();
 89 | 
 90 |       if (!trx || !mobile) {
 91 |         error.textContent = "Please fill in both the Transaction ID and Mobile Number.";
 92 |         return;
 93 |       }
 94 | 
 95 |       // Show loading
 96 |       submitSpinner.classList.remove("hidden");
 97 |       submitText.textContent = "Submitting...";
 98 |       submitBtn.disabled = true;
 99 | 
100 |       try {
101 |         const ref = doc(db, "users", currentUID);
102 |         await updateDoc(ref, {
103 |           trxid: trx,
104 |           mobile: mobile,
105 |           paymentStatus: "pending",
106 |           paid: true
107 |         });
108 | 
109 |         msg.classList.remove("hidden");
110 |         setTimeout(() => {
111 |           window.location.href = "index.html";
112 |         }, 2000);
113 |       } catch (err) {
114 |         error.textContent = "Failed to save. Try again.";
115 |         submitSpinner.classList.add("hidden");
116 |         submitText.textContent = "Confirm Payment";
117 |         submitBtn.disabled = false;
118 |       }
119 |     };
120 |   </script>
121 | </body>
122 | </html>
123 | 


--------------------------------------------------------------------------------
/Mukhosto/profile.html:
--------------------------------------------------------------------------------
  1 | <!DOCTYPE html>
  2 | <html lang="en">
  3 | <head>
  4 |   <meta charset="UTF-8" />
  5 |   <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  6 |   <title>Your Profile</title>
  7 |   <script src="https://www.gstatic.com/firebasejs/9.22.2/firebase-app.js"></script>
  8 |   <script src="https://www.gstatic.com/firebasejs/9.22.2/firebase-auth.js"></script>
  9 |   <script src="https://www.gstatic.com/firebasejs/9.22.2/firebase-firestore.js"></script>
 10 |   <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
 11 | </head>
 12 | <body class="bg-gradient-to-br from-gray-100 to-gray-300 min-h-screen flex items-center justify-center p-4">
 13 |   <div class="bg-white shadow-xl p-8 rounded-2xl max-w-md w-full space-y-6">
 14 |     <div class="text-center">
 15 |       <h1 class="text-3xl font-bold text-gray-800 mb-2">👤 Your Profile</h1>
 16 |       <p class="text-sm text-gray-500">Welcome back!</p>
 17 |     </div>
 18 | 
 19 |     <div class="space-y-4 text-gray-700">
 20 |       <div>
 21 |         <p class="text-xs font-medium text-gray-500 uppercase">Name</p>
 22 |         <p id="user-name" class="text-lg font-semibold text-gray-800">Loading...</p>
 23 |       </div>
 24 | 
 25 |       <div>
 26 |         <p class="text-xs font-medium text-gray-500 uppercase">Email</p>
 27 |         <p id="user-email" class="text-base text-blue-600 break-words">Loading...</p>
 28 |       </div>
 29 | 
 30 |       <div>
 31 |         <p class="text-xs font-medium text-gray-500 uppercase">Account Status</p>
 32 |         <p id="user-status" class="inline-block px-3 py-1 text-sm rounded-full bg-yellow-100 text-yellow-700 font-medium">Checking...</p>
 33 |       </div>
 34 | 
 35 |       <div>
 36 |         <p class="text-xs font-medium text-gray-500 uppercase">Signed in with</p>
 37 |         <p id="provider" class="text-green-600 font-medium">Loading...</p>
 38 |       </div>
 39 |     </div>
 40 | 
 41 |     <div class="mt-6 flex flex-wrap gap-2 justify-between items-center">
 42 |       <a href="/" class="text-sm text-blue-600 hover:underline">← Back to Home</a>
 43 |       <div class="flex gap-2">
 44 |         <button onclick="resetPassword()" class="bg-blue-500 text-white px-4 py-2 rounded text-sm hover:bg-blue-600">Reset Password</button>
 45 |         <button onclick="logout()" class="bg-red-500 text-white px-4 py-2 rounded text-sm hover:bg-red-600">Logout</button>
 46 |       </div>
 47 |     </div>
 48 |   </div>
 49 | 
 50 |   <script type="module">
 51 |     import { initializeApp } from "https://www.gstatic.com/firebasejs/9.22.2/firebase-app.js";
 52 |     import {
 53 |       getAuth,
 54 |       onAuthStateChanged,
 55 |       signOut,
 56 |       sendPasswordResetEmail
 57 |     } from "https://www.gstatic.com/firebasejs/9.22.2/firebase-auth.js";
 58 |     import {
 59 |       getFirestore,
 60 |       doc,
 61 |       getDoc
 62 |     } from "https://www.gstatic.com/firebasejs/9.22.2/firebase-firestore.js";
 63 | 
 64 |     const firebaseConfig = {
 65 |       apiKey: "AIzaSyBqzg9fA14lD_ygNx8CSRiRsnrz1bBNfUw",
 66 |       authDomain: "memory-auth-9515c.firebaseapp.com",
 67 |       projectId: "memory-auth-9515c",
 68 |       storageBucket: "memory-auth-9515c.appspot.com",
 69 |       messagingSenderId: "862743577103",
 70 |       appId: "1:862743577103:web:11fe02f4c24ef2c9c8197a"
 71 |     };
 72 | 
 73 |     const app = initializeApp(firebaseConfig);
 74 |     const auth = getAuth(app);
 75 |     const db = getFirestore(app);
 76 | 
 77 |     onAuthStateChanged(auth, async user => {
 78 |       if (!user) {
 79 |         window.location.href = "login.html";
 80 |         return;
 81 |       }
 82 | 
 83 |       document.getElementById("user-email").textContent = user.email;
 84 | 
 85 |       const provider = user.providerData[0]?.providerId || "unknown";
 86 |       document.getElementById("provider").textContent =
 87 |         provider === "password" ? "Email & Password" :
 88 |         provider === "google.com" ? "Google" : provider;
 89 | 
 90 |       try {
 91 |         const docRef = doc(db, "users", user.uid);
 92 |         const docSnap = await getDoc(docRef);
 93 |         if (docSnap.exists()) {
 94 |           const userData = docSnap.data();
 95 |           document.getElementById("user-name").textContent = userData.name || "N/A";
 96 | 
 97 |           const statusEl = document.getElementById("user-status");
 98 |           if (userData.paid === true && userData.paymentStatus === "verified") {
 99 |             statusEl.textContent = "Verified";
100 |             statusEl.className = "inline-block px-3 py-1 text-sm rounded-full bg-green-100 text-green-700 font-medium";
101 |           } else if (userData.paymentStatus === "pending") {
102 |             statusEl.textContent = "Pending";
103 |             statusEl.className = "inline-block px-3 py-1 text-sm rounded-full bg-yellow-100 text-yellow-700 font-medium";
104 |           } else {
105 |             statusEl.textContent = "Not Verified";
106 |             statusEl.className = "inline-block px-3 py-1 text-sm rounded-full bg-red-100 text-red-700 font-medium";
107 |           }
108 |         } else {
109 |           document.getElementById("user-name").textContent = "Unknown User";
110 |         }
111 |       } catch (error) {
112 |         console.error("Error fetching user profile:", error);
113 |       }
114 |     });
115 | 
116 |     window.logout = () => {
117 |       signOut(auth).then(() => {
118 |         window.location.href = "login.html";
119 |       });
120 |     };
121 | 
122 |     window.resetPassword = () => {
123 |       const user = auth.currentUser;
124 |       if (user && user.email) {
125 |         sendPasswordResetEmail(auth, user.email)
126 |           .then(() => {
127 |             alert('Password reset email sent! Please check your inbox.');
128 |           })
129 |           .catch((error) => {
130 |             console.error('Error sending password reset email:', error);
131 |             alert('Error sending reset email. Try again later.');
132 |           });
133 |       } else {
134 |         alert('No user is signed in.');
135 |       }
136 |     };
137 |   </script>
138 | </body>
139 | </html>
140 | 


--------------------------------------------------------------------------------
/Mukhosto/sw.js:
--------------------------------------------------------------------------------
1 | self.addEventListener('install', event => {
2 |   console.log('Service Worker installed');
3 | });
4 | 
5 | self.addEventListener('fetch', function (event) {
6 |   // Add offline cache logic here if needed
7 | });
8 | 


--------------------------------------------------------------------------------
/Mukhosto/verifyAccess.js:
--------------------------------------------------------------------------------
 1 | import { initializeApp } from "https://www.gstatic.com/firebasejs/9.22.2/firebase-app.js";
 2 | import {
 3 |   getAuth,
 4 |   onAuthStateChanged,
 5 | } from "https://www.gstatic.com/firebasejs/9.22.2/firebase-auth.js";
 6 | import {
 7 |   getFirestore,
 8 |   doc,
 9 |   getDoc,
10 | } from "https://www.gstatic.com/firebasejs/9.22.2/firebase-firestore.js";
11 | 
12 | // ✅ Your Firebase config
13 | const firebaseConfig = {
14 |   apiKey: "AIzaSyBqzg9fA14lD_ygNx8CSRiRsnrz1bBNfUw",
15 |   authDomain: "memory-auth-9515c.firebaseapp.com",
16 |   projectId: "memory-auth-9515c",
17 |   storageBucket: "memory-auth-9515c.appspot.com",
18 |   messagingSenderId: "862743577103",
19 |   appId: "1:862743577103:web:11fe02f4c24ef2c9c8197a",
20 |   measurementId: "G-XNT36FMPK6"
21 | };
22 | 
23 | const app = initializeApp(firebaseConfig);
24 | const auth = getAuth(app);
25 | const db = getFirestore(app);
26 | 
27 | onAuthStateChanged(auth, async (user) => {
28 |   if (!user) {
29 |     window.location.href = "/login.html";
30 |     return;
31 |   }
32 | 
33 |   const userRef = doc(db, "users", user.uid);
34 |   const userSnap = await getDoc(userRef);
35 | 
36 |   if (!userSnap.exists()) {
37 |     console.error("User document does not exist.");
38 |     window.location.href = "/login.html";
39 |     return;
40 |   }
41 | 
42 |   const userData = userSnap.data();
43 | 
44 |   // ✅ MAIN LOGIC
45 |   if (userData.paymentStatus === "verified") {
46 |     // Payment fully verified, allow access
47 |     console.log("Access granted: Payment verified");
48 |     return;
49 |   } else {
50 |     if (userData.paid === true && user.emailVerified) {
51 |       // Paid is true AND email is verified, allow access
52 |       console.log("Access granted: Paid and email verified");
53 |       return;
54 |     }
55 | 
56 |     if (userData.paid !== true) {
57 |       // Paid is not true, go to payment page
58 |       window.location.href = "/payment.html";
59 |       return;
60 |     }
61 | 
62 | 
63 |   }
64 | });
65 | 


--------------------------------------------------------------------------------
/Mukhosto/vocabulary/data.xlsx:
--------------------------------------------------------------------------------
https://raw.githubusercontent.com/ImJawadHossain/mukhosto-production/ea340e36ba4233f4dfb20f086b3e3c8b45fd8051/Mukhosto/vocabulary/data.xlsx


--------------------------------------------------------------------------------
/Mukhosto/vocabulary/flashcard.html:
--------------------------------------------------------------------------------
 1 | <!DOCTYPE html>
 2 | <html lang="en">
 3 | <head>
 4 |   <meta charset="UTF-8" />
 5 |   <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
 6 |   <title>Vocabulary Flashcards</title>
 7 |   <link rel="stylesheet" href="style.css">
 8 |   <script src="https://cdn.jsdelivr.net/npm/xlsx@0.18.5/dist/xlsx.full.min.js"></script>
 9 |   <script src="https://www.gstatic.com/firebasejs/9.22.2/firebase-app.js"></script>
10 |   <script src="https://www.gstatic.com/firebasejs/9.22.2/firebase-auth.js"></script>
11 | </head>
12 | <body>
13 | 
14 | <h1>
15 |   <a href="/vocabulary" style="color: inherit; text-decoration: none;">
16 |     Vocabulary Flashcards
17 |   </a>
18 | </h1>
19 | 
20 | <div class="flex justify-center mb-4">
21 |   <label class="flex items-center space-x-2 text-sm text-gray-700">
22 |     <input type="checkbox" id="reverse-toggle" class="accent-blue-600">
23 |     <span>Reverse Practice</span>
24 |   </label>
25 | </div>
26 | 
27 | <label>
28 |   <input type="checkbox" id="toggle-extra" onchange="toggleExtras()" />
29 |   Show Extra Data
30 | </label>
31 | 
32 | <div class="top-controls">
33 |   <button class="shuffle-button" onclick="shuffleCards()">Shuffle Cards</button>
34 | </div>
35 | 
36 | 
37 | <div id="flashcard-container" class="flashcard-container"></div>
38 | 
39 | <div class="button-container">
40 |   <button class="nav-buttons" onclick="showPrevious()">Previous</button>
41 |   <button class="nav-buttons" id="next-btn" onclick="showNext()">Next</button>
42 | </div>
43 | 
44 | <div class="counter" id="card-counter">1/0</div>
45 | 
46 | <script src="flashcard.js"></script>
47 | 
48 | <br><br><br><br>
49 | 
50 | <footer class="text-center text-sm text-gray-500 mt-12 mb-6">
51 |   <a href="/" class="text-blue-600 hover:underline">← Back to Home</a>
52 |   <p class="mt-1">&copy; 2025 Jawad. All rights reserved.</p>
53 | </footer>
54 | 
55 | <script type="module" src="../verifyAccess.js"></script>
56 | <script src="./srs.js"></script>
57 | <script src="./srs-integrations.js"></script>
58 | <script>
59 |   // Apply user's default for "Show Extra Data" on the flashcard page
60 |   document.addEventListener('DOMContentLoaded', function () {
61 |     try {
62 |       const def = localStorage.getItem('showExtraDefault') === '1';
63 |       const chk = document.getElementById('toggle-extra');
64 |       if (!chk) return; // page doesn't have the toggle; nothing to do
65 | 
66 |       // Remember previous state to avoid double work
67 |       const prev = !!chk.checked;
68 |       chk.checked = def;
69 | 
70 |       // If the desired state differs from current UI, sync the page logic.
71 |       if (def !== prev) {
72 |         if (typeof toggleExtras === 'function') {
73 |           // Your page’s official handler – preferred
74 |           toggleExtras();
75 |         } else {
76 |           // Fallbacks if there is no toggleExtras() on this page
77 |           if (typeof window.showExtraData !== 'undefined') {
78 |             window.showExtraData = def;
79 |           }
80 |           if (typeof createFlashcard === 'function') {
81 |             // Re-render to reflect the new flag
82 |             try { createFlashcard(); } catch {}
83 |           }
84 |         }
85 |       }
86 |     } catch (e) {
87 |       console.warn('Could not apply showExtraDefault on flashcard page:', e);
88 |     }
89 |   });
90 | </script>
91 | 
92 | 
93 | </body>
94 | 
95 | </html>
96 | 


--------------------------------------------------------------------------------
/Mukhosto/vocabulary/flashcard.js:
--------------------------------------------------------------------------------
  1 | let flashcards = [];
  2 | let currentCardIndex = 0;
  3 | let showExtraData = false;
  4 | 
  5 | function getKnownWords() {
  6 |   return JSON.parse(localStorage.getItem("knownWords") || "[]");
  7 | }
  8 | 
  9 | function isReverseMode() {
 10 |   return localStorage.getItem("reversePractice") === "1";
 11 | }
 12 | 
 13 | document.addEventListener("DOMContentLoaded", () => {
 14 |   const toggle = document.getElementById("reverse-toggle");
 15 |   if (!toggle) return;
 16 | 
 17 |   toggle.checked = isReverseMode();
 18 | 
 19 |   toggle.addEventListener("change", () => {
 20 |     localStorage.setItem("reversePractice", toggle.checked ? "1" : "0");
 21 | 
 22 |     const params = new URLSearchParams(window.location.search);
 23 |     params.set("reverse", toggle.checked ? "1" : "0");
 24 |     window.location.search = params.toString();
 25 |   });
 26 | });
 27 | 
 28 | function saveKnownWord(word) {
 29 |   const knownWords = getKnownWords();
 30 |   if (!knownWords.includes(word)) {
 31 |     knownWords.push(word);
 32 |     localStorage.setItem("knownWords", JSON.stringify(knownWords));
 33 |   }
 34 | }
 35 | 
 36 | function getRangeFromURL() {
 37 |   const params = new URLSearchParams(window.location.search);
 38 |   const start = parseInt(params.get("start")) || 1;
 39 |   const end = parseInt(params.get("end")) || Number.MAX_SAFE_INTEGER;
 40 |   return { start, end };
 41 | }
 42 | 
 43 | document.addEventListener('keydown', (e) => {
 44 |   if (e.key === "ArrowRight") {
 45 |     showNext();
 46 |   } else if (e.key === "ArrowLeft") {
 47 |     showPrevious();
 48 |   } else if (e.key === " " || e.key === "Enter") {
 49 |     e.preventDefault(); // stop page from scrolling
 50 |     const card = document.querySelector(".flashcard");
 51 |     if (card) flipCard(card);
 52 |   }
 53 | });
 54 | 
 55 | window.addEventListener("DOMContentLoaded", () => {
 56 |   fetch("data.xlsx")
 57 |     .then(res => res.arrayBuffer())
 58 |     .then(buffer => {
 59 |       const reverse = isReverseMode();
 60 | 
 61 |       const workbook = XLSX.read(buffer, { type: "array" });
 62 |       const sheet = workbook.Sheets[workbook.SheetNames[0]];
 63 |       const json = XLSX.utils.sheet_to_json(sheet);
 64 | 
 65 |       const { start, end } = getRangeFromURL();
 66 |       const knownWords = getKnownWords();
 67 | 
 68 |       let selectedRows = json.slice(start - 1, end)
 69 |         .filter(row => !knownWords.includes(row["FrontData"] || ""));
 70 | 
 71 |       flashcards = selectedRows.map(row => ({
 72 |         front: reverse ? (row["BackData"] || "") : (row["FrontData"] || ""),
 73 |         back: reverse ? (row["FrontData"] || "") : (row["BackData"] || ""),
 74 |         subBack: row["SubBack"] || "",
 75 |         extras: Object.keys(row).filter(k => k.startsWith("ExtraData")).map(k => row[k]),
 76 |         reverseOriginal: row["FrontData"] || ""
 77 |       }));
 78 | 
 79 |       createFlashcard();
 80 |     })
 81 |     .catch(err => {
 82 |       document.getElementById("flashcard-container").innerHTML = `<p>Error loading file: ${err.message}</p>`;
 83 |     });
 84 | });
 85 | 
 86 | function createFlashcard() {
 87 |   const container = document.getElementById("flashcard-container");
 88 |   container.innerHTML = "";
 89 | 
 90 |   if (flashcards.length === 0) {
 91 |     container.innerHTML = "<p>No cards to review!</p>";
 92 |     return;
 93 |   }
 94 | 
 95 |   const card = flashcards[currentCardIndex];
 96 |   const cardDiv = document.createElement("div");
 97 |   cardDiv.classList.add("flashcard");
 98 | 
 99 |   cardDiv.innerHTML = `
100 |     <div class="card-inner">
101 |       <div class="card-front">
102 |         <span class="word">${card.front}</span>
103 |         <button class="pronunciation-btn" onclick="event.stopPropagation(); pronounce('${card.front}')">🔊</button>
104 |         <button class="known-icon" onclick="event.stopPropagation(); markAsKnown('${card.reverseOriginal || card.front}')">✅</button>
105 |       </div>
106 |       <div class="card-back">
107 |         <div class="meaning">${card.back}</div>
108 |         <button class="pronunciation-btn" onclick="event.stopPropagation(); pronounce('${card.back}')">🔊</button>
109 |         <button class="known-icon" onclick="event.stopPropagation(); markAsKnown('${card.reverseOriginal || card.front}')">✅</button>
110 |         ${card.subBack ? `<em class="sub-definition">${card.subBack}</em>` : ""}
111 |         ${showExtraData && card.extras.length > 0
112 |           ? `<div class="extras">${card.extras.map((e, i) => `<p>${i + 1}. ${e}</p>`).join("")}</div>`
113 |           : ""}
114 |       </div>
115 |     </div>
116 |   `;
117 | 
118 |   cardDiv.onclick = () => flipCard(cardDiv);
119 |   container.appendChild(cardDiv);
120 | 
121 |   updateCardCounter();
122 | }
123 | 
124 | function flipCard(cardElement) {
125 |   const inner = cardElement.querySelector(".card-inner");
126 |   inner.classList.toggle("is-flipped");
127 | }
128 | 
129 | function showNext() {
130 |   if (currentCardIndex < flashcards.length - 1) {
131 |     currentCardIndex++;
132 |     createFlashcard();
133 |   } else {
134 |     window.location.href = '/vocabulary'; // redirect to /vocabulary
135 |   }
136 | }
137 | 
138 | function showPrevious() {
139 |   if (currentCardIndex > 0) {
140 |     currentCardIndex--;
141 |     createFlashcard();
142 |   }
143 | }
144 | 
145 | function updateCardCounter() {
146 |   document.getElementById("card-counter").textContent = `${currentCardIndex + 1}/${flashcards.length}`;
147 | 
148 |   const nextBtn = document.getElementById("next-btn");
149 |   if (currentCardIndex === flashcards.length - 1) {
150 |     nextBtn.textContent = "Exit";
151 |   } else {
152 |     nextBtn.textContent = "Next";
153 |   }
154 | }
155 | 
156 | function toggleExtras() {
157 |   showExtraData = document.getElementById("toggle-extra").checked;
158 |   createFlashcard();
159 | }
160 | 
161 | function pronounce(word) {
162 |   const utterance = new SpeechSynthesisUtterance(word);
163 |   window.speechSynthesis.speak(utterance);
164 | }
165 | 
166 | function markAsKnown(word) {
167 |   saveKnownWord(word);
168 |   flashcards.splice(currentCardIndex, 1);
169 |   if (currentCardIndex >= flashcards.length) currentCardIndex = flashcards.length - 1;
170 |   createFlashcard();
171 | }
172 | 
173 | function shuffleCards() {
174 |   const container = document.getElementById("flashcard-container");
175 | 
176 |   // Add shuffle animation class
177 |   container.classList.add("shuffle-animation");
178 | 
179 |   setTimeout(() => {
180 |     flashcards.sort(() => Math.random() - 0.5);
181 |     currentCardIndex = 0;
182 |     createFlashcard();
183 | 
184 |     // Remove animation class after shuffle
185 |     container.classList.remove("shuffle-animation");
186 |   }, 500);
187 | }
188 | 


--------------------------------------------------------------------------------
/Mukhosto/vocabulary/index.html:
--------------------------------------------------------------------------------
  1 | <!DOCTYPE html>
  2 | <html lang="en">
  3 | <head>
  4 |   <meta charset="UTF-8" />
  5 |   <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  6 |   <title>Vocabulary Sets</title>
  7 | 
  8 |   <!-- Styles -->
  9 |   <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
 10 |   <link rel="stylesheet" href="style.css">
 11 | 
 12 |   <!-- Firebase (already used elsewhere) -->
 13 |   <script src="https://www.gstatic.com/firebasejs/9.22.2/firebase-app.js"></script>
 14 |   <script src="https://www.gstatic.com/firebasejs/9.22.2/firebase-auth.js"></script>
 15 | </head>
 16 | 
 17 | <body class="bg-gradient-to-b from-blue-50 to-white min-h-screen py-10 px-4">
 18 |   <!-- Toast (hidden by default) -->
 19 |   <div id="session-toast"
 20 |        class="fixed top-4 left-1/2 transform -translate-x-1/2 z-50 hidden">
 21 |     <div class="bg-green-600 text-white px-4 py-2 rounded-xl shadow">
 22 |       <span id="toast-msg">Session complete!</span>
 23 |     </div>
 24 |   </div>
 25 | 
 26 |   <div class="max-w-4xl mx-auto text-center">
 27 |     <h1 class="text-4xl font-bold text-blue-800 mb-4">Vocabulary Sets</h1>
 28 |     <p class="text-gray-600 mb-6 text-lg">
 29 |       Practice vocabulary in small, manageable sets for better retention.
 30 |     </p>
 31 | 
 32 |     <!-- Controls row -->
 33 |     <div class="flex flex-wrap justify-center items-center gap-4 mb-8">
 34 |       <!-- Known words -->
 35 |       <a href="known-words.html"
 36 |          class="bg-indigo-600 text-white px-4 py-2 rounded-xl shadow hover:bg-indigo-700 transition">
 37 |         📚 Review Known Words
 38 |       </a>
 39 | 
 40 |       <!-- SRS Review button (shows count due) -->
 41 |       <a id="review-link"
 42 |          href="review.html"
 43 |          class="bg-yellow-500 text-gray-900 px-4 py-2 rounded-xl shadow hover:bg-yellow-600 transition flex items-center gap-2">
 44 |         🔔 Review due
 45 |         <span id="review-count"
 46 |               class="inline-flex items-center justify-center min-w-[1.75rem] h-7 px-2 text-sm font-semibold rounded-full bg-white">
 47 |           0
 48 |         </span>
 49 |       </a>
 50 | 
 51 |       <!-- Settings -->
 52 |       <a href="settings.html"
 53 |          class="bg-gray-800 text-white px-4 py-2 rounded-xl shadow hover:bg-black transition">
 54 |         ⚙️ Settings
 55 |       </a>
 56 |     </div>
 57 | 
 58 |     <!-- Sets grid -->
 59 |     <div id="sets-container" class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 gap-6">
 60 |       <!-- Sets injected here -->
 61 |     </div>
 62 |   </div>
 63 | 
 64 |   <!-- Libs & app scripts -->
 65 |   <script src="https://cdn.jsdelivr.net/npm/xlsx@0.18.5/dist/xlsx.full.min.js"></script>
 66 | 
 67 |   <!-- SRS helpers must load before index.js -->
 68 |   <script src="srs.js"></script>
 69 | 
 70 |   <!-- existing page logic -->
 71 |   <script src="index.js"></script>
 72 | 
 73 |   <footer class="text-center text-sm text-gray-500 mt-12 mb-6">
 74 |     <a href="/" class="text-blue-600 hover:underline">← Back to Home</a>
 75 |     <p class="mt-1">&copy; 2025 Jawad. All rights reserved.</p>
 76 |   </footer>
 77 | 
 78 |   <script type="module" src="/verifyAccess.js"></script>
 79 | 
 80 |   <!-- Wire up the due counter + session toast -->
 81 |   <script>
 82 |     document.addEventListener('DOMContentLoaded', function () {
 83 |       try {
 84 |         // Update due count
 85 |         const dueNow = (window.SRS && SRS.countDue) ? SRS.countDue() : 0;
 86 |         const countEl = document.getElementById('review-count');
 87 |         const linkEl  = document.getElementById('review-link');
 88 |         countEl.textContent = dueNow;
 89 |         if (!dueNow || dueNow <= 0) linkEl.classList.add('opacity-60');
 90 | 
 91 |         // Show toast if a review session just finished
 92 |         const raw = localStorage.getItem('srs_session_complete');
 93 |         if (raw) {
 94 |           localStorage.removeItem('srs_session_complete');
 95 |           try {
 96 |             const info = JSON.parse(raw) || {};
 97 |             const reviewed = info.reviewed || 0;
 98 |             const toast = document.getElementById('session-toast');
 99 |             const msg = document.getElementById('toast-msg');
100 |             msg.textContent = reviewed > 0
101 |               ? `Great job! You reviewed ${reviewed} card${reviewed === 1 ? '' : 's'}.`
102 |               : 'Session complete!';
103 |             toast.classList.remove('hidden');
104 |             setTimeout(() => toast.classList.add('hidden'), 2200);
105 |           } catch {}
106 |         }
107 |       } catch (e) {
108 |         console.error('Homepage init failed:', e);
109 |       }
110 |     });
111 |   </script>
112 | </body>
113 | </html>
114 | 


--------------------------------------------------------------------------------
/Mukhosto/vocabulary/index.js:
--------------------------------------------------------------------------------
 1 | function getKnownWords() {
 2 |   return JSON.parse(localStorage.getItem("knownWords") || "[]");
 3 | }
 4 | 
 5 | 
 6 | 
 7 | const chunkSize = 20;
 8 | const setsContainer = document.getElementById("sets-container");
 9 | const colorClasses = ['blue', 'green', 'purple', 'pink', 'yellow', 'red', 'indigo'];
10 | 
11 | document.addEventListener("DOMContentLoaded", () => {
12 |   const resetBtn = document.getElementById("reset-progress");
13 |   if (resetBtn) {
14 |     resetBtn.addEventListener("click", () => {
15 |       if (confirm("Are you sure you want to reset your progress? This will unmark all known words.")) {
16 |         localStorage.removeItem("knownWords");
17 |         window.location.reload();
18 |       }
19 |     });
20 |   }
21 | 
22 |   fetch('data.xlsx')
23 |     .then(res => res.arrayBuffer())
24 |     .then(buffer => {
25 |       const workbook = XLSX.read(buffer, { type: 'array' });
26 |       const sheet = workbook.Sheets[workbook.SheetNames[0]];
27 |       const data = XLSX.utils.sheet_to_json(sheet);
28 | 
29 |       const knownWords = getKnownWords();
30 |       const totalWords = data.filter(row => row["FrontData"]).length;
31 | 
32 |       for (let i = 0; i < Math.ceil(totalWords / chunkSize); i++) {
33 |         const start = i * chunkSize;
34 |         const end = Math.min((i + 1) * chunkSize, totalWords);
35 | 
36 |         const selectedRows = data.slice(start, end)
37 |           .filter(row => row["FrontData"] && !knownWords.includes(row["FrontData"]));
38 | 
39 |         const color = colorClasses[i % colorClasses.length];
40 | 
41 | 
42 | 
43 | 
44 | 
45 | const sliceRows = data.slice(start, end).filter(r => r["FrontData"]);
46 | const totalInSet = sliceRows.length;
47 | const knownInSet = sliceRows.filter(r => knownWords.includes(r["FrontData"])).length;
48 | const pct = totalInSet ? Math.round((knownInSet / totalInSet) * 100) : 0;
49 | 
50 | const card = document.createElement('div');
51 | card.className = `bg-white p-6 rounded-2xl shadow-md hover:shadow-xl transition`;
52 | 
53 | card.innerHTML = `
54 |   <h2 class="text-2xl font-semibold text-${color}-600 mb-2">Set ${i + 1}</h2>
55 |   <p class="text-gray-500 mb-2">Words ${start + 1} – ${end}</p>
56 | 
57 |   <div class="w-full bg-gray-200 rounded-full h-2 mb-2">
58 |     <div class="bg-${color}-600 h-2 rounded-full" style="width: ${pct}%;"></div>
59 |   </div>
60 |   <p class="text-sm text-gray-600 mb-4">${knownInSet}/${totalInSet} known (${pct}%)</p>
61 | 
62 |   ${
63 |     knownInSet < totalInSet
64 |       ? `<a href="flashcard.html?start=${start + 1}&end=${end}&reverse=${document.getElementById('reverse-toggle')?.checked ? '1' : '0'}" class="inline-block bg-${color}-600 text-white px-4 py-2 rounded-xl">Start</a>`
65 |       : `<div class="text-green-600 font-semibold">✅ Completed</div>`
66 |   }
67 | `;
68 | 
69 | setsContainer.appendChild(card);
70 | 
71 | 
72 | 
73 | 
74 | 
75 | 
76 |       }
77 | 
78 |       if (totalWords === 0) {
79 |         setsContainer.innerHTML = `<p class="text-green-600">🎉 You've learned all the words! Reset to start over.</p>`;
80 |       }
81 |     })
82 |     .catch(err => {
83 |       setsContainer.innerHTML = `<p class="text-red-500">Error loading vocabulary file: ${err.message}</p>`;
84 |     });
85 | });
86 | 


--------------------------------------------------------------------------------
/Mukhosto/vocabulary/known-words.html:
--------------------------------------------------------------------------------
  1 | <!DOCTYPE html>
  2 | <html lang="en">
  3 | <head>
  4 |   <meta charset="UTF-8"/>
  5 |   <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  6 |   <title>Known Words</title>
  7 | 
  8 |   <link rel="stylesheet" href="style.css">
  9 |   <script src="https://cdn.jsdelivr.net/npm/xlsx@0.18.5/dist/xlsx.full.min.js"></script>
 10 |   <script src="https://www.gstatic.com/firebasejs/9.22.2/firebase-app.js"></script>
 11 |   <script src="https://www.gstatic.com/firebasejs/9.22.2/firebase-auth.js"></script>
 12 | </head>
 13 | <body>
 14 |   <h1>
 15 |     <a href="/vocabulary" style="color: inherit; text-decoration: none;">
 16 |       Known Words
 17 |     </a>
 18 |   </h1>
 19 | 
 20 |   <!-- Top toolbar -->
 21 |   <div class="button-container" style="margin-top:10px; gap:8px; flex-wrap:wrap; justify-content:center;">
 22 |     <label class="flex items-center space-x-2 text-sm" style="margin-right:8px;">
 23 |       <input type="checkbox" id="reverse-toggle" class="accent-blue-600">
 24 |       <span>Reverse Practice</span>
 25 |     </label>
 26 | 
 27 |     <label class="flex items-center space-x-2 text-sm" style="margin-right:8px;">
 28 |       <input type="checkbox" id="toggle-extra" onchange="toggleExtras()">
 29 |       <span>Show Extra Data</span>
 30 |     </label>
 31 | 
 32 |     <button onclick="shuffleFlashcards()" class="nav-buttons">🔀 Shuffle</button>
 33 |   </div>
 34 | 
 35 |   <!-- Card -->
 36 |   <div id="flashcard-container" class="flashcard-container" style="margin-top:12px;"></div>
 37 | 
 38 |   <!-- Bottom nav -->
 39 |   <div class="button-container">
 40 |     <button class="nav-buttons" id="previous-button" onclick="showPrevious()">Previous</button>
 41 |     <button class="nav-buttons" id="next-button" onclick="showNext()">Next</button>
 42 |   </div>
 43 | 
 44 |   <div class="counter" id="card-counter">1/0</div>
 45 | 
 46 |   <!-- Core SRS (for cleanup + reverse defaults) -->
 47 |   <script src="./srs.js"></script>
 48 | 
 49 |   <script>
 50 |     // ------- State -------
 51 |     let flashcards = [];
 52 |     let currentCardIndex = 0;
 53 |     let showExtraData = false;
 54 | 
 55 |     function normalize(s){ return String(s||"").trim().toLowerCase(); }
 56 |     function isReverseMode(){ return localStorage.getItem("reversePractice") === "1"; }
 57 | 
 58 |     // ------- Apply defaults (reverse & extra) -------
 59 |     document.addEventListener("DOMContentLoaded", () => {
 60 |       const revToggle = document.getElementById("reverse-toggle");
 61 |       if (revToggle) {
 62 |         revToggle.checked = isReverseMode();
 63 |         revToggle.addEventListener("change", () => {
 64 |           localStorage.setItem("reversePractice", revToggle.checked ? "1" : "0");
 65 |           const params = new URLSearchParams(window.location.search);
 66 |           params.set("reverse", revToggle.checked ? "1" : "0");
 67 |           window.location.search = params.toString();
 68 |         });
 69 |       }
 70 |       const showExtraDefault = localStorage.getItem("showExtraDefault") === "1";
 71 |       showExtraData = showExtraDefault;
 72 |       const extraChk = document.getElementById("toggle-extra");
 73 |       if (extraChk) extraChk.checked = showExtraDefault;
 74 |     });
 75 | 
 76 |     // ------- Keyboard shortcuts -------
 77 |     document.addEventListener('keydown', (e) => {
 78 |       if (e.key === "ArrowRight") {
 79 |         showNext();
 80 |       } else if (e.key === "ArrowLeft") {
 81 |         showPrevious();
 82 |       } else if (e.key === " " || e.key === "Enter") {
 83 |         e.preventDefault();
 84 |         const card = document.querySelector(".flashcard");
 85 |         if (card) flipCard(card);
 86 |       }
 87 |     });
 88 | 
 89 |     // ------- Load known words + data.xlsx -------
 90 |     window.addEventListener("DOMContentLoaded", () => {
 91 |       // read known words
 92 |       const known = JSON.parse(localStorage.getItem("knownWords") || "[]");
 93 |       if (!Array.isArray(known) || known.length === 0) {
 94 |         document.getElementById("flashcard-container").innerHTML = "<p>No known words yet.</p>";
 95 |         document.getElementById("card-counter").textContent = "0/0";
 96 |         return;
 97 |       }
 98 | 
 99 |       fetch("data.xlsx")
100 |         .then(res => res.arrayBuffer())
101 |         .then(buffer => {
102 |           const workbook = XLSX.read(buffer, { type: "array" });
103 |           const sheet = workbook.Sheets[workbook.SheetNames[0]];
104 |           const rows = XLSX.utils.sheet_to_json(sheet);
105 | 
106 |           const byFront = {};
107 |           for (const row of rows) {
108 |             const k = normalize(row["FrontData"]);
109 |             if (k) byFront[k] = row;
110 |           }
111 | 
112 |           const reverse = isReverseMode();
113 |           flashcards = known.map(word => {
114 |             const row = byFront[normalize(word)];
115 |             if (row) {
116 |               return {
117 |                 word: row["FrontData"],
118 |                 front: reverse ? (row["BackData"] || "") : (row["FrontData"] || ""),
119 |                 back:  reverse ? (row["FrontData"] || "") : (row["BackData"] || ""),
120 |                 subBack: row["SubBack"] || "",
121 |                 extras: Object.keys(row).filter(k => k.startsWith("ExtraData")).map(k => row[k])
122 |               };
123 |             } else {
124 |               return {
125 |                 word: String(word),
126 |                 front: reverse ? "" : String(word),
127 |                 back:  reverse ? String(word) : "",
128 |                 subBack: "",
129 |                 extras: []
130 |               };
131 |             }
132 |           });
133 | 
134 |           createFlashcard();
135 |         })
136 |         .catch(err => {
137 |           document.getElementById("flashcard-container").innerHTML =
138 |            `<p>Error loading file: ${err.message}</p>`;
139 |         });
140 |     });
141 | 
142 |     // ------- UI -------
143 |     function createFlashcard() {
144 |       const container = document.getElementById("flashcard-container");
145 |       container.innerHTML = "";
146 | 
147 |       if (flashcards.length === 0) {
148 |         container.innerHTML = "<p>No known words.</p>";
149 |         document.getElementById("card-counter").textContent = "0/0";
150 |         return;
151 |       }
152 | 
153 |       const card = flashcards[currentCardIndex];
154 |       const cardDiv = document.createElement("div");
155 |       cardDiv.classList.add("flashcard");
156 | 
157 |       cardDiv.innerHTML = `
158 |         <div class="card-inner">
159 |           <div class="card-front">
160 |             <button class="remove-btn" onclick="event.stopPropagation(); removeCurrentCard()">✖️</button>
161 |             <span class="word">${card.front}</span>
162 |             <button class="pronunciation-btn" onclick="event.stopPropagation(); pronounce('${card.front}')">🔊</button>
163 |           </div>
164 |           <div class="card-back">
165 |             <div class="meaning">${card.back}</div>
166 |             <button class="pronunciation-btn" onclick="event.stopPropagation(); pronounce('${card.back}')">🔊</button>
167 |             ${card.subBack ? `<em class="sub-definition">${card.subBack}</em>` : ""}
168 |             ${showExtraData && card.extras && card.extras.length > 0
169 |               ? `<div class="extras">${card.extras.map((e, i) => `${i + 1}. ${e}`).join("<br>")}</div>`
170 |               : ""}
171 |           </div>
172 |         </div>
173 |       `;
174 | 
175 |       cardDiv.onclick = () => flipCard(cardDiv);
176 |       container.appendChild(cardDiv);
177 | 
178 |       updateCardCounter();
179 |       updateNextButton();
180 |     }
181 | 
182 |     function flipCard(cardElement) {
183 |       const inner = cardElement.querySelector(".card-inner");
184 |       inner.classList.toggle("is-flipped");
185 |     }
186 | 
187 |     function showNext() {
188 |       if (currentCardIndex < flashcards.length - 1) {
189 |         currentCardIndex++;
190 |         createFlashcard();
191 |       } else {
192 |         window.location.href = "/vocabulary";
193 |       }
194 |     }
195 | 
196 |     function showPrevious() {
197 |       if (currentCardIndex > 0) {
198 |         currentCardIndex--;
199 |         createFlashcard();
200 |       }
201 |     }
202 | 
203 |     function updateCardCounter() {
204 |       document.getElementById("card-counter").textContent =
205 |         `${currentCardIndex + 1}/${flashcards.length}`;
206 |     }
207 | 
208 |     function updateNextButton() {
209 |       const nextBtn = document.getElementById("next-button");
210 |       nextBtn.textContent = (currentCardIndex === flashcards.length - 1) ? "Exit" : "Next";
211 |     }
212 | 
213 |     function toggleExtras() {
214 |       showExtraData = document.getElementById("toggle-extra").checked;
215 |       createFlashcard();
216 |     }
217 | 
218 |     function pronounce(text) {
219 |       const utterance = new SpeechSynthesisUtterance(text);
220 |       window.speechSynthesis.speak(utterance);
221 |     }
222 | 
223 |     function shuffleFlashcards() {
224 |       flashcards.sort(() => Math.random() - 0.5);
225 |       currentCardIndex = 0;
226 |       createFlashcard();
227 |     }
228 | 
229 |     // ------- NEW: remove from Known + purge SRS for this word -------
230 |     function removeCurrentCard() {
231 |       const card = flashcards[currentCardIndex];
232 |       if (!card) return;
233 |       const reverse = isReverseMode();
234 |       // The canonical word for knownWords is the original FrontData
235 |       const wordToRemove = reverse ? (card.back || card.word) : (card.word || card.front);
236 | 
237 |       // 1) Remove from knownWords list
238 |       let known = JSON.parse(localStorage.getItem("knownWords") || "[]");
239 |       known = known.filter(w => w !== wordToRemove);
240 |       localStorage.setItem("knownWords", JSON.stringify(known));
241 | 
242 |       // 2) Purge SRS entries for this word (match by key or display, normalized)
243 |       try {
244 |         const raw = localStorage.getItem("muk_srs_v1");
245 |         if (raw) {
246 |           const map = JSON.parse(raw) || {};
247 |           const target = normalize(wordToRemove);
248 |           for (const key of Object.keys(map)) {
249 |             const ak = normalize(key);
250 |             const ad = normalize(map[key]?.display);
251 |             if (ak === target || ad === target) delete map[key];
252 |           }
253 |           localStorage.setItem("muk_srs_v1", JSON.stringify(map));
254 |         }
255 |       } catch (e) {
256 |         console.warn("Failed clearing SRS entry:", e);
257 |       }
258 | 
259 |       // 3) Update on-screen list
260 |       flashcards.splice(currentCardIndex, 1);
261 |       if (currentCardIndex >= flashcards.length) currentCardIndex = flashcards.length - 1;
262 | 
263 |       if (flashcards.length === 0) {
264 |         document.getElementById("flashcard-container").innerHTML = "<p>No known words.</p>";
265 |         document.getElementById("card-counter").textContent = "0/0";
266 |       } else {
267 |         createFlashcard();
268 |       }
269 |     }
270 |   </script>
271 | 
272 |   <footer class="text-center text-sm text-gray-500 mt-12 mb-6">
273 |     <a href="/" class="text-blue-600 hover:underline">← Back to Home</a>
274 |     <p class="mt-1">&copy; 2025 Jawad. All rights reserved.</p>
275 |   </footer>
276 | 
277 |   <script type="module" src="/verifyAccess.js"></script>
278 | </body>
279 | </html>
280 | 


--------------------------------------------------------------------------------
/Mukhosto/vocabulary/review.html:
--------------------------------------------------------------------------------
 1 | <!DOCTYPE html>
 2 | <html lang="en">
 3 | <head>
 4 |   <meta charset="UTF-8" />
 5 |   <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
 6 |   <title>SRS Review Flashcards</title>
 7 | 
 8 |   <!-- Match known-words.html includes -->
 9 |   <link rel="stylesheet" href="style.css">
10 |   <script src="https://cdn.jsdelivr.net/npm/xlsx@0.18.5/dist/xlsx.full.min.js"></script>
11 |   <script src="https://www.gstatic.com/firebasejs/9.22.2/firebase-app.js"></script>
12 |   <script src="https://www.gstatic.com/firebasejs/9.22.2/firebase-auth.js"></script>
13 | </head>
14 | <body>
15 | 
16 |   <h1>
17 |     <a href="/vocabulary" style="color: inherit; text-decoration: none;">
18 |       Review (Spaced Repetition)
19 |     </a>
20 |   </h1>
21 | 
22 |   <!-- TOP TOOLBAR -->
23 |   <div class="button-container" style="margin-top:10px; gap:8px; flex-wrap:wrap; justify-content:center;">
24 |     <!-- Reverse toggle (same as known-words) -->
25 |     <label class="flex items-center space-x-2 text-sm" style="margin-right:8px;">
26 |       <input type="checkbox" id="reverse-toggle" class="accent-blue-600">
27 |       <span>Reverse Practice</span>
28 |     </label>
29 | 
30 |     <!-- Show extra (same behavior) -->
31 |     <label class="flex items-center space-x-2 text-sm" style="margin-right:8px;">
32 |       <input type="checkbox" id="toggle-extra" onchange="toggleExtras()">
33 |       <span>Show Extra Data</span>
34 |     </label>
35 | 
36 |     <!-- Shuffle (kept) -->
37 |     <button onclick="shuffleFlashcards()" class="nav-buttons">🔀 Shuffle</button>
38 | 
39 |     <!-- Moved here: SRS outcome buttons -->
40 |     <button class="nav-buttons" id="again-button" onclick="markAgain()">Again</button>
41 |     <button class="nav-buttons" id="good-button" onclick="markGood()">Good</button>
42 |   </div>
43 | 
44 |   <!-- Card area -->
45 |   <div id="flashcard-container" class="flashcard-container" style="margin-top:12px;"></div>
46 | 
47 |   <!-- BOTTOM NAV: keep just Previous / Next for clean layout -->
48 |   <div class="button-container">
49 |     <button class="nav-buttons" id="previous-button" onclick="showPrevious()">Previous</button>
50 |     <button class="nav-buttons" id="next-button" onclick="showNext()">Next</button>
51 |   </div>
52 | 
53 |   <div class="counter" id="card-counter">1/0</div>
54 | 
55 |   <!-- Scripts (order mirrors known-words, plus SRS + this page’s logic) -->
56 |   <script src="./srs.js"></script>
57 |   <script src="./review.js"></script>
58 | 
59 |   <br><br><br><br>
60 | 
61 |   <footer class="text-center text-sm text-gray-500 mt-12 mb-6">
62 |     <a href="/" class="text-blue-600 hover:underline">← Back to Home</a>
63 |     <p class="mt-1">&copy; 2025 Jawad. All rights reserved.</p>
64 |   </footer>
65 | 
66 |   <script type="module" src="/verifyAccess.js"></script>
67 | </body>
68 | </html>
69 | 


--------------------------------------------------------------------------------
/Mukhosto/vocabulary/review.js:
--------------------------------------------------------------------------------
  1 | /**
  2 |  * Review page (uses EXACT same card structure/styles as known-words.html)
  3 |  * - pulls only words that are DUE from SRS
  4 |  * - Again/Good buttons are at the TOP toolbar
  5 |  * - Respects defaults for Reverse & Show Extra Data
  6 |  * - Records a session summary for homepage toast
  7 |  * - UPDATED: "Done" button on the card replaces the old ❌ and acts like Good
  8 |  */
  9 | 
 10 | let flashcards = [];
 11 | let currentCardIndex = 0;
 12 | let showExtraData = false;
 13 | let reviewedThisSession = 0; // for the small homepage toast
 14 | 
 15 | function normalize(s) { return String(s || "").trim().toLowerCase(); }
 16 | function isReverseMode() { return localStorage.getItem("reversePractice") === "1"; }
 17 | 
 18 | document.addEventListener("DOMContentLoaded", () => {
 19 |   // DEFAULT: Show Extra Data based on settings
 20 |   const showExtraDefault = localStorage.getItem("showExtraDefault") === "1";
 21 |   showExtraData = showExtraDefault;
 22 |   const extraChk = document.getElementById("toggle-extra");
 23 |   if (extraChk) extraChk.checked = showExtraDefault;
 24 | 
 25 |   // Reverse toggle behavior
 26 |   const toggle = document.getElementById("reverse-toggle");
 27 |   if (toggle) {
 28 |     toggle.checked = isReverseMode();
 29 |     toggle.addEventListener("change", () => {
 30 |       localStorage.setItem("reversePractice", toggle.checked ? "1" : "0");
 31 |       const params = new URLSearchParams(window.location.search);
 32 |       params.set("reverse", toggle.checked ? "1" : "0");
 33 |       window.location.search = params.toString();
 34 |     });
 35 |   }
 36 | });
 37 | 
 38 | // Keyboard shortcuts
 39 | document.addEventListener('keydown', (e) => {
 40 |   if (e.key === "ArrowRight") {
 41 |     showNext();
 42 |   } else if (e.key === "ArrowLeft") {
 43 |     showPrevious();
 44 |   } else if (e.key === " " || e.key === "Enter") {
 45 |     e.preventDefault();
 46 |     const card = document.querySelector(".flashcard");
 47 |     if (card) flipCard(card);
 48 |   }
 49 | });
 50 | 
 51 | // Boot: load XLSX, filter by SRS due, then render
 52 | window.addEventListener("DOMContentLoaded", () => {
 53 |   if (!window.SRS || typeof SRS.dueKeys !== "function") {
 54 |     document.getElementById("flashcard-container").innerHTML =
 55 |       `<p>SRS not available. Did you include <code>srs.js</code>?</p>`;
 56 |     return;
 57 |   }
 58 | 
 59 |   const dueWords = SRS.dueKeys();
 60 |   if (!Array.isArray(dueWords) || dueWords.length === 0) {
 61 |     document.getElementById("flashcard-container").innerHTML =
 62 |       `<p>No cards are due right now — nice! 🎉</p>`;
 63 |     document.getElementById("card-counter").textContent = "0/0";
 64 |     return;
 65 |   }
 66 | 
 67 |   fetch("data.xlsx")
 68 |     .then(res => res.arrayBuffer())
 69 |     .then(buffer => {
 70 |       const workbook = XLSX.read(buffer, { type: "array" });
 71 |       const sheet = workbook.Sheets[workbook.SheetNames[0]];
 72 |       const json = XLSX.utils.sheet_to_json(sheet);
 73 | 
 74 |       // Lookup by FrontData (normalized)
 75 |       const byFront = {};
 76 |       for (const row of json) {
 77 |         const k = normalize(row["FrontData"]);
 78 |         if (k) byFront[k] = row;
 79 |       }
 80 | 
 81 |       const reverse = isReverseMode();
 82 | 
 83 |       flashcards = dueWords.map(w => {
 84 |         const row = byFront[normalize(w)];
 85 |         if (row) {
 86 |           return {
 87 |             word: row["FrontData"],
 88 |             front: reverse ? (row["BackData"] || "") : (row["FrontData"] || ""),
 89 |             back:  reverse ? (row["FrontData"] || "") : (row["BackData"] || ""),
 90 |             subBack: row["SubBack"] || "",
 91 |             extras: Object.keys(row).filter(k => k.startsWith("ExtraData")).map(k => row[k])
 92 |           };
 93 |         } else {
 94 |           return {
 95 |             word: String(w),
 96 |             front: reverse ? "" : String(w),
 97 |             back: reverse ? String(w) : "",
 98 |             subBack: "",
 99 |             extras: []
100 |           };
101 |         }
102 |       });
103 | 
104 |       createFlashcard();
105 |     })
106 |     .catch(err => {
107 |       document.getElementById("flashcard-container").innerHTML =
108 |         `<p>Error loading file: ${err.message}</p>`;
109 |     });
110 | });
111 | 
112 | // ---- UI functions (mirroring known-words style) ----
113 | 
114 | function createFlashcard() {
115 |   const container = document.getElementById("flashcard-container");
116 |   container.innerHTML = "";
117 | 
118 |   if (flashcards.length === 0) {
119 |     finishSession();
120 |     return;
121 |   }
122 | 
123 |   const card = flashcards[currentCardIndex];
124 |   const cardDiv = document.createElement("div");
125 |   cardDiv.classList.add("flashcard");
126 | 
127 |   // IMPORTANT CHANGE: the top-left button is now "Done" and triggers markGood()
128 |   // We keep the same 'remove-btn' class so it inherits your styling/position.
129 |   cardDiv.innerHTML = `
130 |     <div class="card-inner">
131 |       <div class="card-front">
132 |         <button class="remove-btn" onclick="event.stopPropagation(); markGood()">✅</button>
133 |         <span class="word">${card.front}</span>
134 |         <button class="pronunciation-btn" onclick="event.stopPropagation(); pronounce('${card.front}')">🔊</button>
135 |       </div>
136 |       <div class="card-back">
137 |         <div class="meaning">${card.back}</div>
138 |         <button class="pronunciation-btn" onclick="event.stopPropagation(); pronounce('${card.back}')">🔊</button>
139 |         ${card.subBack ? `<em class="sub-definition">${card.subBack}</em>` : ""}
140 |         ${showExtraData && card.extras && card.extras.length > 0
141 |           ? `<div class="extras">${card.extras.map((e, i) => `${i + 1}. ${e}`).join("<br>")}</div>`
142 |           : ""}
143 |       </div>
144 |     </div>
145 |   `;
146 | 
147 |   cardDiv.onclick = () => flipCard(cardDiv);
148 |   container.appendChild(cardDiv);
149 | 
150 |   updateCardCounter();
151 |   updateNextButton();
152 | }
153 | 
154 | function flipCard(cardElement) {
155 |   const inner = cardElement.querySelector(".card-inner");
156 |   inner.classList.toggle("is-flipped");
157 | }
158 | 
159 | function showNext() {
160 |   if (currentCardIndex < flashcards.length - 1) {
161 |     currentCardIndex++;
162 |     createFlashcard();
163 |   } else {
164 |     finishSession();
165 |   }
166 | }
167 | 
168 | function showPrevious() {
169 |   if (currentCardIndex > 0) {
170 |     currentCardIndex--;
171 |     createFlashcard();
172 |   }
173 | }
174 | 
175 | function updateCardCounter() {
176 |   document.getElementById("card-counter").textContent =
177 |     `${currentCardIndex + 1}/${flashcards.length}`;
178 | }
179 | 
180 | function updateNextButton() {
181 |   const nextBtn = document.getElementById("next-button");
182 |   nextBtn.textContent = (currentCardIndex === flashcards.length - 1) ? "Exit" : "Next";
183 | }
184 | 
185 | function toggleExtras() {
186 |   const chk = document.getElementById("toggle-extra");
187 |   showExtraData = chk ? !!chk.checked : showExtraData;
188 |   createFlashcard();
189 | }
190 | 
191 | function pronounce(text) {
192 |   const utterance = new SpeechSynthesisUtterance(text);
193 |   window.speechSynthesis.speak(utterance);
194 | }
195 | 
196 | function shuffleFlashcards() {
197 |   flashcards.sort(() => Math.random() - 0.5);
198 |   currentCardIndex = 0;
199 |   createFlashcard();
200 | }
201 | 
202 | // Keep function defined (not used now), in case CSS/HTML still references it somewhere.
203 | function removeCurrentCard() {
204 |   // no-op in Review: we no longer remove cards permanently from here
205 | }
206 | 
207 | // ---- SRS actions ----
208 | function markGood() {
209 |   const card = flashcards[currentCardIndex];
210 |   if (!card) return;
211 | 
212 |   try { SRS.markReviewed(card.word || card.front, "good"); } catch {}
213 |   reviewedThisSession++;
214 | 
215 |   flashcards.splice(currentCardIndex, 1);
216 |   if (currentCardIndex >= flashcards.length) currentCardIndex = flashcards.length - 1;
217 |   if (flashcards.length === 0) finishSession(); else createFlashcard();
218 | }
219 | 
220 | function markAgain() {
221 |   const card = flashcards[currentCardIndex];
222 |   if (!card) return;
223 | 
224 |   try { SRS.markReviewed(card.word || card.front, "again"); } catch {}
225 |   reviewedThisSession++;
226 | 
227 |   flashcards.splice(currentCardIndex, 1);
228 |   if (currentCardIndex >= flashcards.length) currentCardIndex = flashcards.length - 1;
229 |   if (flashcards.length === 0) finishSession(); else createFlashcard();
230 | }
231 | 
232 | // ---- finish & hand off a small summary for the homepage toast ----
233 | function finishSession() {
234 |   try {
235 |     localStorage.setItem(
236 |       "srs_session_complete",
237 |       JSON.stringify({ ts: Date.now(), reviewed: reviewedThisSession })
238 |     );
239 |   } catch {}
240 |   window.location.href = "/vocabulary";
241 | }
242 | 


--------------------------------------------------------------------------------
/Mukhosto/vocabulary/settings.html:
--------------------------------------------------------------------------------
  1 | <!DOCTYPE html>
  2 | <html lang="en">
  3 | <head>
  4 |   <meta charset="UTF-8"/>
  5 |   <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  6 |   <title>Settings — Vocabulary</title>
  7 | 
  8 |   <link rel="stylesheet" href="style.css">
  9 |   <script src="https://cdn.jsdelivr.net/npm/xlsx@0.18.5/dist/xlsx.full.min.js"></script>
 10 |   <script src="https://www.gstatic.com/firebasejs/9.22.2/firebase-app.js"></script>
 11 |   <script src="https://www.gstatic.com/firebasejs/9.22.2/firebase-auth.js"></script>
 12 | </head>
 13 | <body>
 14 |   <h1><a href="/vocabulary" style="color: inherit; text-decoration: none;">Settings</a></h1>
 15 | 
 16 |   <div class="settings-wrap" style="max-width: 720px; margin: 0 auto;">
 17 |     <!-- Spaced Repetition Schedule -->
 18 |     <section class="settings-card" style="background:#fff;border:1px solid #eee;border-radius:14px;padding:16px;margin-bottom:16px;">
 19 |       <h2 style="margin:0 0 8px 0;">Spaced Repetition Schedule</h2>
 20 |       <p class="text-sm" style="color:#555;margin-top:0;">
 21 |         Enter intervals with units (comma-separated). Examples:
 22 |         <code>1m</code>, <code>3m</code>, <code>5m</code>, <code>12h</code>, <code>3d</code>.
 23 |       </p>
 24 | 
 25 |       <label for="schedule-input" style="display:block;margin-top:8px;">Intervals</label>
 26 |       <input id="schedule-input" type="text" placeholder="1m, 3m, 5m, 12h, 3d"
 27 |              style="width:100%;padding:10px;border:1px solid #ccc;border-radius:8px;"/>
 28 | 
 29 |       <div style="display:flex;gap:12px;flex-wrap:wrap;margin-top:12px;">
 30 |         <div style="flex:1;min-width:260px;">
 31 |           <label for="rolling-value" style="display:block;">After final stage, review every</label>
 32 |           <div style="display:flex;align-items:center;gap:8px;">
 33 |             <input id="rolling-value" type="number" min="1" step="1" style="width:120px;padding:10px;border:1px solid #ccc;border-radius:8px;"/>
 34 |             <select id="rolling-unit" style="padding:10px;border:1px solid #ccc;border-radius:8px;">
 35 |               <option value="m">minutes</option>
 36 |               <option value="h">hours</option>
 37 |               <option value="d" selected>days</option>
 38 |             </select>
 39 |           </div>
 40 |         </div>
 41 | 
 42 |         <div style="flex:1;min-width:220px;">
 43 |           <label for="preview" style="display:block;">Preview (stages)</label>
 44 |           <div id="preview" style="padding:10px;border:1px dashed #ccc;border-radius:8px;color:#555;">—</div>
 45 |         </div>
 46 |       </div>
 47 | 
 48 |       <div style="display:flex;gap:10px;margin-top:12px;flex-wrap:wrap;">
 49 |         <button id="save-schedule" class="nav-buttons">Save Schedule</button>
 50 |         <button id="reset-schedule" class="nav-buttons">Reset to Default</button>
 51 |         <button id="apply-to-stage0" class="nav-buttons">Apply to current stage-0 cards</button>
 52 |       </div>
 53 | 
 54 |       <div id="schedule-msg" style="margin-top:8px;color:#0a7c0a;font-weight:600;"></div>
 55 |       <div id="schedule-err" style="margin-top:8px;color:#b00020;font-weight:600;"></div>
 56 |     </section>
 57 | 
 58 |     <!-- Practice Defaults -->
 59 |     <section class="settings-card" style="background:#fff;border:1px solid #eee;border-radius:14px;padding:16px;margin-bottom:16px;">
 60 |       <h2 style="margin:0 0 8px 0;">Practice Defaults</h2>
 61 |       <p class="text-sm" style="color:#555;margin-top:0;">These defaults are used when you open Review/Known pages.</p>
 62 | 
 63 |       <label style="display:flex;align-items:center;gap:10px;margin-top:8px;">
 64 |         <input id="default-reverse" type="checkbox"/>
 65 |         <span>Reverse Practice (default)</span>
 66 |       </label>
 67 | 
 68 |       <label style="display:flex;align-items:center;gap:10px;margin-top:8px;">
 69 |         <input id="default-show-extra" type="checkbox"/>
 70 |         <span>Show Extra Data (default)</span>
 71 |       </label>
 72 | 
 73 |       <div style="display:flex;gap:10px;margin-top:12px;flex-wrap:wrap;">
 74 |         <button id="save-defaults" class="nav-buttons">Save Defaults</button>
 75 |         <button id="clear-defaults" class="nav-buttons">Clear Defaults</button>
 76 |       </div>
 77 |       <div id="defaults-msg" style="margin-top:8px;color:#0a7c0a;font-weight:600;"></div>
 78 |     </section>
 79 | 
 80 |     <!-- Danger zone -->
 81 |     <section class="settings-card" style="background:#fff;border:1px solid #fee2e2;border-radius:14px;padding:16px;margin-bottom:16px;">
 82 |       <h2 style="margin:0 0 8px 0; color:#b91c1c;">Danger zone</h2>
 83 |       <p class="text-sm" style="color:#7f1d1d;margin-top:0;">
 84 |         This will remove <strong>all Known Words</strong> and <strong>all scheduled reviews</strong> from this browser.
 85 |         Your schedule/settings will stay unchanged.
 86 |       </p>
 87 |       <button id="reset-all" class="nav-buttons" style="background:#ef4444;color:#fff;">
 88 |         🔁 Reset Progress
 89 |       </button>
 90 |       <div id="reset-msg" style="margin-top:8px;color:#0a7c0a;font-weight:600;"></div>
 91 |       <div id="reset-err" style="margin-top:8px;color:#b00020;font-weight:600;"></div>
 92 |     </section>
 93 | 
 94 |     <div style="text-align:center;margin-top:18px;">
 95 |       <a class="nav-buttons" href="/vocabulary">← Back to Vocabulary</a>
 96 |     </div>
 97 |   </div>
 98 | 
 99 |   <script src="./srs.js"></script>
100 |   <script src="./settings.js"></script>
101 | 
102 |   <footer class="text-center text-sm text-gray-500 mt-12 mb-6">
103 |     <a href="/" class="text-blue-600 hover:underline">← Back to Home</a>
104 |     <p class="mt-1">&copy; 2025 Jawad. All rights reserved.</p>
105 |   </footer>
106 | 
107 |   <script type="module" src="/verifyAccess.js"></script>
108 | </body>
109 | </html>
110 | 


--------------------------------------------------------------------------------
/Mukhosto/vocabulary/settings.js:
--------------------------------------------------------------------------------
  1 | /**
  2 |  * Settings page logic (minutes/hours/days) + Apply-to-stage0 + Reset Progress
  3 |  */
  4 | (function () {
  5 |   "use strict";
  6 | 
  7 |   const MIN_PER_HOUR = 60;
  8 |   const MIN_PER_DAY  = 1440;
  9 | 
 10 |   function $(sel) { return document.querySelector(sel); }
 11 | 
 12 |   // ---- parse helpers ----
 13 |   function parseIntervalToken(token) {
 14 |     const s = String(token || "").trim().toLowerCase();
 15 |     if (!s) return null;
 16 |     const m = s.match(/^(\d+)\s*([mhd])?$/);
 17 |     if (!m) return null;
 18 |     const val = parseInt(m[1], 10);
 19 |     const unit = m[2] || "d";
 20 |     if (!(val > 0)) return null;
 21 |     if (unit === "m") return val;
 22 |     if (unit === "h") return val * MIN_PER_HOUR;
 23 |     return val * MIN_PER_DAY; // "d"
 24 |   }
 25 | 
 26 |   function parseScheduleString(str) {
 27 |     if (!str) return [];
 28 |     const mins = str.split(",").map(x => x.trim()).filter(Boolean).map(parseIntervalToken).filter(Boolean);
 29 |     mins.sort((a,b)=>a-b);
 30 |     const out=[]; for (const n of mins) if (!out.includes(n)) out.push(n);
 31 |     return out;
 32 |   }
 33 | 
 34 |   function minsToBestString(mins) {
 35 |     try { return (window.SRS && SRS.formatDuration) ? SRS.formatDuration(mins) : `${Math.round(mins/MIN_PER_DAY)}d`; }
 36 |     catch { return `${Math.round(mins/MIN_PER_DAY)}d`; }
 37 |   }
 38 | 
 39 |   function stageListToDisplay(minsArray, rollingMinutes) {
 40 |     if (!minsArray || !minsArray.length) return "—";
 41 |     const stages = minsArray.map(minsToBestString).join(" → ");
 42 |     const tail = rollingMinutes ? ` → every ${minsToBestString(rollingMinutes)}` : "";
 43 |     return stages + tail;
 44 |   }
 45 | 
 46 |   // ---- UI elements ----
 47 |   const scheduleInput = $("#schedule-input");
 48 |   const rollingValue  = $("#rolling-value");
 49 |   const rollingUnit   = $("#rolling-unit");
 50 |   const previewEl     = $("#preview");
 51 |   const saveBtn       = $("#save-schedule");
 52 |   const resetBtn      = $("#reset-schedule");
 53 |   const applyBtn      = $("#apply-to-stage0");
 54 |   const msgOk         = $("#schedule-msg");
 55 |   const msgErr        = $("#schedule-err");
 56 | 
 57 |   const chkReverse    = $("#default-reverse");
 58 |   const chkShowExtra  = $("#default-show-extra");
 59 |   const btnSaveDef    = $("#save-defaults");
 60 |   const btnClearDef   = $("#clear-defaults");
 61 |   const defaultsMsg   = $("#defaults-msg");
 62 | 
 63 |   const resetAllBtn   = $("#reset-all");
 64 |   const resetMsg      = $("#reset-msg");
 65 |   const resetErr      = $("#reset-err");
 66 | 
 67 |   // ---- load initial values ----
 68 |   function loadScheduleUI() {
 69 |     const stageMinutes   = (window.SRS && SRS.getScheduleMinutes) ? SRS.getScheduleMinutes() : [3*MIN_PER_DAY,7*MIN_PER_DAY,14*MIN_PER_DAY,21*MIN_PER_DAY,30*MIN_PER_DAY];
 70 |     const rollingMinutes = (window.SRS && SRS.getRollingMinutes) ? SRS.getRollingMinutes() : 30*MIN_PER_DAY;
 71 | 
 72 |     scheduleInput.value = stageMinutes.map(minsToBestString).join(", ");
 73 | 
 74 |     if (rollingMinutes % MIN_PER_DAY === 0) { rollingUnit.value = "d"; rollingValue.value = rollingMinutes / MIN_PER_DAY; }
 75 |     else if (rollingMinutes % MIN_PER_HOUR === 0) { rollingUnit.value = "h"; rollingValue.value = rollingMinutes / MIN_PER_HOUR; }
 76 |     else { rollingUnit.value = "m"; rollingValue.value = rollingMinutes; }
 77 | 
 78 |     previewEl.textContent = stageListToDisplay(stageMinutes, rollingMinutes);
 79 |   }
 80 | 
 81 |   function loadDefaultsUI() {
 82 |     chkReverse.checked   = localStorage.getItem("reversePractice") === "1";
 83 |     chkShowExtra.checked = localStorage.getItem("showExtraDefault") === "1";
 84 |   }
 85 | 
 86 |   // ---- actions ----
 87 |   function saveSchedule() {
 88 |     msgOk.textContent = ""; msgErr.textContent = "";
 89 |     const stageMinutes = parseScheduleString(scheduleInput.value);
 90 |     if (!stageMinutes.length) { msgErr.textContent = "Please enter at least one interval (e.g., 1m, 3m, 5m)."; return; }
 91 | 
 92 |     const val = parseInt(rollingValue.value, 10); const unit = String(rollingUnit.value || "d");
 93 |     if (!(val > 0)) { msgErr.textContent = "Rolling value must be a positive number."; return; }
 94 |     let rollingMinutes = val; if (unit === "h") rollingMinutes *= MIN_PER_HOUR; else if (unit === "d") rollingMinutes *= MIN_PER_DAY;
 95 | 
 96 |     try {
 97 |       const ok1 = SRS.setScheduleMinutes(stageMinutes);
 98 |       const ok2 = SRS.setRollingMinutes(rollingMinutes);
 99 |       if (ok1 && ok2) { msgOk.textContent = "Saved! New schedule will be used for future reviews."; previewEl.textContent = stageListToDisplay(stageMinutes, rollingMinutes); }
100 |       else { msgErr.textContent = "Could not save config (localStorage disabled?)."; }
101 |     } catch (e) { msgErr.textContent = "Failed to save schedule."; console.warn(e); }
102 |   }
103 | 
104 |   function resetSchedule() {
105 |     try {
106 |       const defStages  = [3*MIN_PER_DAY,7*MIN_PER_DAY,14*MIN_PER_DAY,21*MIN_PER_DAY,30*MIN_PER_DAY];
107 |       const defRolling = 30*MIN_PER_DAY;
108 |       const ok1 = SRS.setScheduleMinutes(defStages);
109 |       const ok2 = SRS.setRollingMinutes(defRolling);
110 |       if (ok1 && ok2) { loadScheduleUI(); msgOk.textContent = "Reset to defaults."; msgErr.textContent = ""; }
111 |     } catch { msgErr.textContent = "Failed to reset."; }
112 |   }
113 | 
114 |   function applyToStage0() {
115 |     try {
116 |       const result = (SRS.rescheduleStage0 && SRS.rescheduleStage0()) || { changed: 0 };
117 |       msgOk.textContent = `Applied schedule to ${result.changed} card(s).`;
118 |       setTimeout(() => msgOk.textContent = "", 1500);
119 |     } catch (e) {
120 |       msgErr.textContent = "Failed to apply to current cards.";
121 |     }
122 |   }
123 | 
124 |   function saveDefaults() {
125 |     localStorage.setItem("reversePractice",   chkReverse.checked ? "1" : "0");
126 |     localStorage.setItem("showExtraDefault",  chkShowExtra.checked ? "1" : "0");
127 |     defaultsMsg.textContent = "Defaults saved.";
128 |     setTimeout(() => defaultsMsg.textContent = "", 1200);
129 |   }
130 | 
131 |   function clearDefaults() {
132 |     localStorage.removeItem("reversePractice");
133 |     localStorage.removeItem("showExtraDefault");
134 |     loadDefaultsUI();
135 |     defaultsMsg.textContent = "Defaults cleared.";
136 |     setTimeout(() => defaultsMsg.textContent = "", 1200);
137 |   }
138 | 
139 |   function refreshPreview() {
140 |     const stages = parseScheduleString(scheduleInput.value);
141 |     const val = parseInt(rollingValue.value, 10);
142 |     let rolling = null;
143 |     if (val > 0) {
144 |       if (rollingUnit.value === "m") rolling = val;
145 |       else if (rollingUnit.value === "h") rolling = val * MIN_PER_HOUR;
146 |       else rolling = val * MIN_PER_DAY;
147 |     }
148 |     previewEl.textContent = stages.length ? stageListToDisplay(stages, rolling || 0) : "—";
149 |   }
150 | 
151 |   // ---- Reset Progress (Danger zone) ----
152 |   function resetAllProgress() {
153 |     resetMsg.textContent = "";
154 |     resetErr.textContent = "";
155 | 
156 |     // Confirm with the user
157 |     const sure = confirm("This will remove all Known Words and all scheduled reviews from this browser. Continue?");
158 |     if (!sure) return;
159 | 
160 |     try {
161 |       // 1) Clear Known Words list
162 |       localStorage.removeItem("knownWords");
163 | 
164 |       // 2) Clear all scheduled SRS records
165 |       localStorage.removeItem("muk_srs_v1");
166 | 
167 |       // 3) Clear any session toast flag (optional)
168 |       localStorage.removeItem("srs_session_complete");
169 | 
170 |       resetMsg.textContent = "All progress has been reset.";
171 |       setTimeout(() => { resetMsg.textContent = ""; }, 1800);
172 |     } catch (e) {
173 |       resetErr.textContent = "Failed to reset progress.";
174 |       console.warn(e);
175 |     }
176 |   }
177 | 
178 |   // ---- wires ----
179 |   document.addEventListener("DOMContentLoaded", () => {
180 |     loadScheduleUI(); loadDefaultsUI();
181 | 
182 |     saveBtn.addEventListener("click", saveSchedule);
183 |     resetBtn.addEventListener("click", resetSchedule);
184 |     applyBtn.addEventListener("click", applyToStage0);
185 |     btnSaveDef.addEventListener("click", saveDefaults);
186 |     btnClearDef.addEventListener("click", clearDefaults);
187 | 
188 |     scheduleInput.addEventListener("input", refreshPreview);
189 |     rollingValue.addEventListener("input", refreshPreview);
190 |     rollingUnit.addEventListener("change", refreshPreview);
191 | 
192 |     if (resetAllBtn) resetAllBtn.addEventListener("click", resetAllProgress);
193 |   });
194 | })();
195 | 


--------------------------------------------------------------------------------
/Mukhosto/vocabulary/srs-integrations.js:
--------------------------------------------------------------------------------
 1 | /**
 2 |  * Mukhosto Vocabulary - SRS Integrations (v2 - robust word detection)
 3 |  * File: /vocabulary/srs-integrations.js
 4 |  *
 5 |  * Purpose:
 6 |  * - Ensure SRS.initForWord(...) runs whenever a card is marked known,
 7 |  *   EVEN IF the app's function doesn't pass the word argument.
 8 |  *
 9 |  * Strategy:
10 |  * - Wrap common functions (saveKnownWord, markAsKnown, markKnown).
11 |  * - If the first arg is falsy, infer the word from the current DOM:
12 |  *     - .flashcard .card-front .word  (your known-words/review template)
13 |  *     - fallback: [data-current-word] or .current-word (optional hooks)
14 |  * - Normalize the text and call SRS.initForWord(text).
15 |  *
16 |  * Scales safely (non-invasive). If functions get renamed, add another wrap.
17 |  */
18 | (function () {
19 |   "use strict";
20 | 
21 |   function getVisibleWordText() {
22 |     try {
23 |       // 1) Preferred: same structure your cards use
24 |       const el = document.querySelector(".flashcard .card-front .word");
25 |       if (el && el.textContent) return el.textContent.trim();
26 | 
27 |       // 2) Optional custom hooks if present
28 |       const el2 = document.querySelector("[data-current-word]");
29 |       if (el2) return (el2.getAttribute("data-current-word") || "").trim();
30 | 
31 |       const el3 = document.querySelector(".current-word");
32 |       if (el3 && el3.textContent) return el3.textContent.trim();
33 | 
34 |       return "";
35 |     } catch {
36 |       return "";
37 |     }
38 |   }
39 | 
40 |   function safeInit(wordMaybe) {
41 |     try {
42 |       const w = (wordMaybe && String(wordMaybe).trim()) || getVisibleWordText();
43 |       if (!w) {
44 |         console.warn("[SRS] Could not detect current word to init.");
45 |         return;
46 |       }
47 |       if (window.SRS && typeof SRS.initForWord === "function") {
48 |         SRS.initForWord(w);
49 |         // Helpful debug log (you can remove later)
50 |         console.log("[SRS] initForWord:", w);
51 |       }
52 |     } catch (e) {
53 |       console.warn("[SRS] initForWord failed:", e);
54 |     }
55 |   }
56 | 
57 |   function wrapFunction(obj, fnName, onCall) {
58 |     if (!obj || typeof obj[fnName] !== "function") return false;
59 |     const original = obj[fnName];
60 |     obj[fnName] = function () {
61 |       try { onCall.apply(this, arguments); } catch (e) { console.warn("[SRS] wrapper error:", e); }
62 |       return original.apply(this, arguments);
63 |     };
64 |     console.log(`[SRS] Wrapped ${fnName}()`);
65 |     return true;
66 |   }
67 | 
68 |   function tryWrapAll() {
69 |     let wrapped = false;
70 | 
71 |     wrapped = wrapFunction(window, "saveKnownWord", function (word) {
72 |       safeInit(word);   // word may be undefined -> DOM fallback
73 |     }) || wrapped;
74 | 
75 |     wrapped = wrapFunction(window, "markAsKnown", function (word) {
76 |       safeInit(word);
77 |     }) || wrapped;
78 | 
79 |     wrapped = wrapFunction(window, "markKnown", function (word) {
80 |       safeInit(word);
81 |     }) || wrapped;
82 | 
83 |     return wrapped;
84 |   }
85 | 
86 |   // Poll briefly so order doesn't matter
87 |   const start = Date.now();
88 |   const limitMs = 5000;
89 |   const timer = setInterval(function () {
90 |     const ok = tryWrapAll();
91 |     if (ok || Date.now() - start > limitMs) {
92 |       clearInterval(timer);
93 |       if (!ok) console.warn("[SRS] No known functions found to wrap (ok if not on flashcard page).");
94 |     }
95 |   }, 200);
96 | })();
97 | 


--------------------------------------------------------------------------------
/Mukhosto/vocabulary/srs.js:
--------------------------------------------------------------------------------
  1 | /**
  2 |  * Mukhosto Vocabulary - Spaced Repetition Core (v3.1)
  3 |  * - Minute/Hour/Day schedule support (stores minutes)
  4 |  * - Backward-compatible helpers for "days"
  5 |  * - NEW: SRS.rescheduleStage0() to apply the current first interval to all stage-0 items
  6 |  *
  7 |  * Storage:
  8 |  *   Records map ............ localStorage["muk_srs_v1"]
  9 |  *   Config (minutes) ....... localStorage["muk_srs_config_v2"] => { stageMinutes:number[], rollingMinutes:number }
 10 |  *
 11 |  * Public API (window.SRS):
 12 |  *   version: 3
 13 |  *   // minutes-first API
 14 |  *   getScheduleMinutes(): number[]
 15 |  *   setScheduleMinutes(mins: number[]): boolean
 16 |  *   getRollingMinutes(): number
 17 |  *   setRollingMinutes(mins: number): boolean
 18 |  *
 19 |  *   // legacy shims (days-based)
 20 |  *   getSchedule(): number[]                // days (rounded)
 21 |  *   setSchedule(days: number[]): boolean   // converts to minutes
 22 |  *   getRollingDays(): number               // days (rounded)
 23 |  *   setRollingDays(days: number): boolean  // converts to minutes
 24 |  *   formatDuration(mins: number): string   // "30m", "12h", "3d"
 25 |  *
 26 |  *   // core
 27 |  *   initForWord(word: string): void
 28 |  *   markReviewed(word: string, outcome: "good" | "again"): void
 29 |  *   dueKeys(atTimeMs?: number): string[]
 30 |  *   countDue(atTimeMs?: number): number
 31 |  *   peek(word: string): Record|null
 32 |  *   clearAll(): void
 33 |  *   migrateFromKnownWords(): { added: number }
 34 |  *
 35 |  *   // utility
 36 |  *   rescheduleStage0(): { changed: number, firstMinutes: number }
 37 |  */
 38 | (function () {
 39 |   "use strict";
 40 | 
 41 |   // ---------- Time constants ----------
 42 |   const MIN_PER_HOUR = 60;
 43 |   const MIN_PER_DAY  = 1440;
 44 |   const MINUTE_MS    = 60 * 1000;
 45 | 
 46 |   // ---------- Defaults (legacy: 3,7,14,21,30 days; rolling 30 days) ----------
 47 |   const DEFAULT_STAGE_DAYS = [3, 7, 14, 21, 30];
 48 |   const DEFAULT_STAGE_MIN  = DEFAULT_STAGE_DAYS.map(d => d * MIN_PER_DAY);
 49 |   const DEFAULT_ROLLING_MIN = 30 * MIN_PER_DAY;
 50 | 
 51 |   // ---------- Storage keys ----------
 52 |   const STORAGE_KEY = "muk_srs_v1";        // word -> record
 53 |   const CONFIG_KEY  = "muk_srs_config_v2"; // { stageMinutes:[], rollingMinutes:number }
 54 | 
 55 |   // ---------- Utils ----------
 56 |   function now() { return Date.now(); }
 57 |   function minutesFromNow(mins) { return now() + mins * MINUTE_MS; }
 58 |   function normalizeKey(word) { return String(word || "").trim().toLowerCase(); }
 59 |   function clamp(n, a, b) { return Math.max(a, Math.min(b, n)); }
 60 |   function isPositiveInt(n) { return Number.isInteger(n) && n > 0 && n < 10000000; }
 61 | 
 62 |   function normalizeMinutesArray(arr) {
 63 |     const cleaned = (arr || [])
 64 |       .map(x => parseInt(x, 10))
 65 |       .filter(isPositiveInt)
 66 |       .sort((a, b) => a - b);
 67 |     const out = [];
 68 |     for (const n of cleaned) if (!out.includes(n)) out.push(n);
 69 |     return out.length ? out : DEFAULT_STAGE_MIN.slice();
 70 |   }
 71 | 
 72 |   // ---------- Config (minutes) ----------
 73 |   function readConfig() {
 74 |     try {
 75 |       const raw = localStorage.getItem(CONFIG_KEY);
 76 |       if (!raw) return { stageMinutes: DEFAULT_STAGE_MIN.slice(), rollingMinutes: DEFAULT_ROLLING_MIN };
 77 |       const cfg = JSON.parse(raw);
 78 |       const stageMinutes = normalizeMinutesArray(cfg?.stageMinutes);
 79 |       const rollingMinutes = isPositiveInt(cfg?.rollingMinutes) ? cfg.rollingMinutes : DEFAULT_ROLLING_MIN;
 80 |       return { stageMinutes, rollingMinutes };
 81 |     } catch {
 82 |       return { stageMinutes: DEFAULT_STAGE_MIN.slice(), rollingMinutes: DEFAULT_ROLLING_MIN };
 83 |     }
 84 |   }
 85 |   function writeConfig(cfg) {
 86 |     try { localStorage.setItem(CONFIG_KEY, JSON.stringify(cfg)); return true; }
 87 |     catch { return false; }
 88 |   }
 89 | 
 90 |   function getScheduleMinutes() { return readConfig().stageMinutes.slice(); }
 91 |   function setScheduleMinutes(minsArr) { const cfg = readConfig(); cfg.stageMinutes = normalizeMinutesArray(minsArr); return writeConfig(cfg); }
 92 |   function getRollingMinutes() { return readConfig().rollingMinutes; }
 93 |   function setRollingMinutes(n) { if (!isPositiveInt(n)) return false; const cfg = readConfig(); cfg.rollingMinutes = n; return writeConfig(cfg); }
 94 | 
 95 |   // ---------- Legacy shims (days) ----------
 96 |   function getSchedule() { return getScheduleMinutes().map(m => Math.round(m / MIN_PER_DAY)); }
 97 |   function setSchedule(daysArr) {
 98 |     const mins = (Array.isArray(daysArr) ? daysArr : []).map(d => parseInt(d, 10) * MIN_PER_DAY);
 99 |     return setScheduleMinutes(mins);
100 |   }
101 |   function getRollingDays() { return Math.round(getRollingMinutes() / MIN_PER_DAY); }
102 |   function setRollingDays(d) { return setRollingMinutes(parseInt(d, 10) * MIN_PER_DAY); }
103 | 
104 |   function formatDuration(mins) {
105 |     const d = Math.floor(mins / MIN_PER_DAY);
106 |     const h = Math.floor((mins % MIN_PER_DAY) / MIN_PER_HOUR);
107 |     const m = Math.floor(mins % MIN_PER_HOUR);
108 |     const parts = [];
109 |     if (d) parts.push(`${d}d`);
110 |     if (h) parts.push(`${h}h`);
111 |     if (m && parts.length === 0) parts.push(`${m}m`); // keep single unit when possible
112 |     return parts.join(" ") || "0m";
113 |   }
114 | 
115 |   // ---------- Storage (records) ----------
116 |   function readMap() {
117 |     try {
118 |       const raw = localStorage.getItem(STORAGE_KEY);
119 |       if (!raw) return {};
120 |       const parsed = JSON.parse(raw);
121 |       return (typeof parsed === "object" && parsed) ? parsed : {};
122 |     } catch {
123 |       return {};
124 |     }
125 |   }
126 |   function writeMap(map) {
127 |     try { localStorage.setItem(STORAGE_KEY, JSON.stringify(map)); }
128 |     catch (e) { console.error("[SRS] persist failed", e); }
129 |   }
130 | 
131 |   // ---------- Core behaviors ----------
132 |   function initForWord(word) {
133 |     const key = normalizeKey(word); if (!key) return;
134 |     const map = readMap(); const existing = map[key]; const t = now(); const schedule = getScheduleMinutes();
135 |     if (existing) {
136 |       if (!Array.isArray(existing.history)) existing.history = [];
137 |       if (typeof existing.stage !== "number") existing.stage = 0;
138 |       if (typeof existing.dueAt !== "number") existing.dueAt = minutesFromNow(schedule[0] || DEFAULT_STAGE_MIN[0]);
139 |       map[key] = existing; writeMap(map); return;
140 |     }
141 |     map[key] = {
142 |       key,
143 |       display: String(word),
144 |       addedAt: t,
145 |       stage: 0,
146 |       dueAt: minutesFromNow(schedule[0] || DEFAULT_STAGE_MIN[0]),
147 |       history: [{ ts: t, action: "init" }]
148 |     };
149 |     writeMap(map);
150 |   }
151 | 
152 |   function markReviewed(word, outcome /* "good" | "again" */) {
153 |     const key = normalizeKey(word); if (!key) return;
154 |     const map = readMap(); let e = map[key]; const t = now();
155 |     const schedule = getScheduleMinutes(); const lastIndex = schedule.length - 1; const rolling = getRollingMinutes();
156 | 
157 |     if (!e) { initForWord(word); e = readMap()[key]; }
158 |     e.display = String(word);
159 | 
160 |     if (outcome === "again") {
161 |       e.stage = 0;
162 |       e.dueAt = minutesFromNow(schedule[0] || DEFAULT_STAGE_MIN[0]);
163 |       (e.history || (e.history = [])).push({ ts: t, action: "again" });
164 |     } else {
165 |       if (e.stage < lastIndex) {
166 |         e.stage = clamp(e.stage + 1, 0, lastIndex);
167 |         e.dueAt = minutesFromNow(
168 |           schedule[e.stage] || DEFAULT_STAGE_MIN[Math.min(e.stage, DEFAULT_STAGE_MIN.length - 1)]
169 |         );
170 |       } else {
171 |         e.stage = lastIndex >= 0 ? lastIndex : 0;
172 |         e.dueAt = t + rolling * MINUTE_MS;
173 |       }
174 |       (e.history || (e.history = [])).push({ ts: t, action: "good" });
175 |     }
176 |     map[key] = e; writeMap(map);
177 |   }
178 | 
179 |   function dueKeys(atTime /* optional number (ms) */) {
180 |     const t = typeof atTime === "number" ? atTime : now();
181 |     return Object.values(readMap())
182 |       .filter(e => typeof e.dueAt === "number" && e.dueAt <= t)
183 |       .map(e => e.display || e.key);
184 |   }
185 |   function countDue(atTime) { return dueKeys(atTime).length; }
186 |   function peek(word) { const key = normalizeKey(word); const e = readMap()[key]; return e ? Object.assign({}, e) : null; }
187 |   function clearAll() { writeMap({}); }
188 | 
189 |   function migrateFromKnownWords() {
190 |     const old = JSON.parse(localStorage.getItem("knownWords") || "[]");
191 |     if (!Array.isArray(old) || !old.length) return { added: 0 };
192 | 
193 |     const map = readMap(); const schedule = getScheduleMinutes();
194 |     let added = 0; const t = now();
195 |     for (const w of old) {
196 |       const k = normalizeKey(w); if (!k || map[k]) continue;
197 |       map[k] = {
198 |         key: k,
199 |         display: String(w),
200 |         addedAt: t,
201 |         stage: 0,
202 |         dueAt: minutesFromNow(schedule[0] || DEFAULT_STAGE_MIN[0]),
203 |         history: [{ ts: t, action: "migrated" }]
204 |       };
205 |       added++;
206 |     }
207 |     writeMap(map); return { added };
208 |   }
209 | 
210 |   // ---------- Utility ----------
211 |   // Apply the CURRENT first interval to all stage-0 items.
212 |   // Use this after you change the schedule (e.g., from days to minutes).
213 |   function rescheduleStage0() {
214 |     try {
215 |       const map = readMap();
216 |       const schedule = getScheduleMinutes();
217 |       const first = schedule[0] || DEFAULT_STAGE_MIN[0];
218 |       const t = now();
219 |       let changed = 0;
220 | 
221 |       for (const k of Object.keys(map)) {
222 |         const e = map[k]; if (!e) continue;
223 |         if (e.stage === 0) {
224 |           e.dueAt = minutesFromNow(first);
225 |           (e.history || (e.history = [])).push({ ts: t, action: "reschedule_stage0" });
226 |           changed++;
227 |         }
228 |       }
229 |       writeMap(map);
230 |       return { changed, firstMinutes: first };
231 |     } catch (e) {
232 |       console.warn("[SRS] rescheduleStage0 failed:", e);
233 |       return { changed: 0, firstMinutes: 0 };
234 |     }
235 |   }
236 | 
237 |   // ---------- Public API ----------
238 |   const api = {
239 |     version: 3,
240 | 
241 |     // minutes-first API
242 |     getScheduleMinutes,
243 |     setScheduleMinutes,
244 |     getRollingMinutes,
245 |     setRollingMinutes,
246 | 
247 |     // helpers / legacy shims
248 |     getSchedule,
249 |     setSchedule,
250 |     getRollingDays,
251 |     setRollingDays,
252 |     formatDuration,
253 | 
254 |     // core
255 |     initForWord,
256 |     markReviewed,
257 |     peek,
258 |     dueKeys,
259 |     countDue,
260 |     clearAll,
261 |     migrateFromKnownWords,
262 | 
263 |     // utility
264 |     rescheduleStage0,
265 |   };
266 | 
267 |   window.SRS = api;
268 | })();
269 | 


--------------------------------------------------------------------------------
/Mukhosto/vocabulary/style.css:
--------------------------------------------------------------------------------
  1 | body {
  2 |   font-family: Arial, sans-serif;
  3 |   background-color: #f4f4f4;
  4 |   text-align: center;
  5 |   margin: 0;
  6 |   padding: 0;
  7 | }
  8 | 
  9 | .flashcard-container {
 10 |   display: flex;
 11 |   justify-content: center;
 12 |   align-items: center;
 13 |   margin-top: 40px;
 14 |   min-height: 300px;
 15 | }
 16 | 
 17 | .flashcard {
 18 |   width: 320px;
 19 |   height: 220px;
 20 |   perspective: 1000px;
 21 | }
 22 | 
 23 | .card-inner {
 24 |   width: 100%;
 25 |   height: 100%;
 26 |   position: relative;
 27 |   transform-style: preserve-3d;
 28 |   transition: transform 0.6s ease;
 29 | }
 30 | 
 31 | .card-inner.is-flipped {
 32 |   transform: rotateY(180deg);
 33 | }
 34 | 
 35 | .card-front, .card-back {
 36 |   position: absolute;
 37 |   top: 0;
 38 |   left: 0;
 39 |   width: 100%;
 40 |   height: 100%;
 41 |   backface-visibility: hidden;
 42 |   background-color: #fff;
 43 |   border: 2px solid #ddd;
 44 |   border-radius: 12px;
 45 |   box-sizing: border-box;
 46 |   padding: 20px;
 47 |   display: flex;
 48 |   justify-content: center;
 49 |   align-items: center;
 50 |   flex-direction: column;
 51 |   box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
 52 | }
 53 | 
 54 | .card-front {
 55 |   font-size: 28px;
 56 |   z-index: 2;
 57 | }
 58 | 
 59 | .card-back {
 60 |   transform: rotateY(180deg);
 61 |   font-size: 18px;
 62 |   z-index: 1;
 63 | }
 64 | 
 65 | .button-container {
 66 |   margin-top: 20px;
 67 | }
 68 | 
 69 | .nav-buttons, .known-btn {
 70 |   background-color: #4CAF50;
 71 |   color: white;
 72 |   padding: 10px 20px;
 73 |   border: none;
 74 |   font-size: 16px;
 75 |   margin: 5px;
 76 |   border-radius: 8px;
 77 |   cursor: pointer;
 78 | }
 79 | 
 80 | .known-btn {
 81 |   background-color: #ff9800;
 82 |   margin-top: 12px;
 83 | }
 84 | 
 85 | .counter {
 86 |   font-size: 16px;
 87 |   margin-top: 10px;
 88 |   color: #555;
 89 | }
 90 | 
 91 | .pronunciation-btn {
 92 |   background: none;
 93 |   border: none;
 94 |   font-size: 20px;
 95 |   position: absolute;
 96 |   top: 10px;
 97 |   right: 10px;
 98 |   cursor: pointer;
 99 | }
100 | 
101 | .extras {
102 |   margin-top: 10px;
103 |   padding: 8px;
104 |   background-color: #f9f9f9;
105 |   border-radius: 6px;
106 |   font-size: 12px;
107 |   color: #444;
108 | }
109 | 
110 | .known-icon {
111 |   position: absolute;
112 |   top: 10px;
113 |   left: 10px;
114 |   background-color: rgba(255, 255, 255, 0.1);
115 |   border: 2px solid #4CAF50;
116 |   border-radius: 50%;
117 |   padding: 6px;
118 |   font-size: 16px;
119 |   cursor: pointer;
120 |   z-index: 3;
121 |   transition: background-color 0.2s, transform 0.2s;
122 | }
123 | 
124 | .known-icon:hover {
125 |   background-color: rgba(76, 175, 80, 0.2);
126 |   transform: scale(1.1);
127 | }
128 | 
129 | 
130 | .word {
131 |   font-size: 28px;        /* was 36px */
132 |   font-weight: bold;
133 |   color: #333;
134 |   padding: 16px 8px;
135 | }
136 | 
137 | .card-back .meaning {
138 |   font-size: 18px;        /* was 20px */
139 |   font-weight: bold;
140 |   color: #1e3a8a;
141 |   margin-bottom: 10px;
142 | }
143 | 
144 | .sub-definition {
145 |   font-size: 14px;        /* was 16px */
146 |   color: #777;
147 |   display: block;
148 |   margin-bottom: 8px;
149 | }
150 | 
151 | .card-back .extras {
152 |   font-size: 12px;        /* was 13px */
153 |   color: #444;
154 |   background-color: #f3f3f3;
155 |   padding: 8px;
156 |   border-radius: 8px;
157 |   text-align: left;
158 | }
159 | 
160 | .flashcard-container {
161 |   transition: opacity 0.3s ease;
162 | }
163 | 
164 | 
165 | @keyframes shuffleEffect {
166 |   0% { transform: rotate(0deg); }
167 |   25% { transform: rotate(2deg); }
168 |   50% { transform: rotate(-2deg); }
169 |   75% { transform: rotate(1deg); }
170 |   100% { transform: rotate(0deg); }
171 | }
172 | 
173 | .shuffle-animation {
174 |   animation: shuffleEffect 0.5s ease;
175 | }
176 | 
177 | .top-controls {
178 |   margin: 20px 0;
179 | }
180 | 
181 | .shuffle-button {
182 |   background-color: #3498db;
183 |   color: white;
184 |   padding: 10px 20px;
185 |   font-size: 16px;
186 |   border: none;
187 |   border-radius: 8px;
188 |   cursor: pointer;
189 | }
190 | 
191 | .shuffle-button:hover {
192 |   background-color: #2980b9;
193 | }
194 | 
195 | .extras p {
196 |   margin: 4px 0;
197 |   padding: 0;
198 |   font-size: 12px;
199 |   color: #444;
200 | }
201 | 
202 | .flashcard {
203 |   position: relative; /* make sure the card is positioned */
204 | }
205 | 
206 | .remove-btn {
207 |   position: absolute;
208 |   top: 10px;
209 |   left: 10px;
210 |   background: none;
211 |   border: none;
212 |   font-size: 24px;
213 |   cursor: pointer;
214 |   color: #f44336;
215 |   z-index: 10;
216 | }
217 | .remove-btn:hover {
218 |   color: #c62828;
219 | }
220 | 


--------------------------------------------------------------------------------
