└── Mukhosto
    ├── admin
        └── index.html
    ├── icons
        └── logo.png
    ├── index.html
    ├── login.html
    ├── manifest.json
    ├── mukhosto.txt
    ├── payment.html
    ├── profile.html
    ├── sw.js
    ├── verifyAccess.js
    └── vocabulary
        ├── data.xlsx
        ├── flashcard.html
        ├── flashcard.js
        ├── index.html
        ├── index.js
        ├── known-words.html
        └── style.css


/Mukhosto/admin/index.html:
--------------------------------------------------------------------------------
  1 | <!DOCTYPE html>
  2 | <html lang="en">
  3 | <head>
  4 |   <meta charset="UTF-8" />
  5 |   <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  6 |   <title>Admin Dashboard</title>
  7 |   <script src="https://www.gstatic.com/firebasejs/9.22.2/firebase-app.js"></script>
  8 |   <script src="https://www.gstatic.com/firebasejs/9.22.2/firebase-auth.js"></script>
  9 |   <script src="https://www.gstatic.com/firebasejs/9.22.2/firebase-firestore.js"></script>
 10 |   <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
 11 | </head>
 12 | <body class="bg-gray-100 min-h-screen p-6">
 13 |   <div id="dashboard" class="hidden max-w-4xl mx-auto bg-white p-6 shadow-lg rounded-xl">
 14 |     <div class="flex items-center justify-between mb-6">
 15 |       <h1 class="text-2xl font-bold">Admin Dashboard</h1>
 16 |       <button onclick="logout()" class="bg-red-500 text-white px-3 py-1 rounded text-sm">Logout</button>
 17 |     </div>
 18 |     <p class="text-sm text-gray-600 mb-4">Only visible to <strong>Admins</strong>. Below is the full user list:</p>
 19 |     <div id="user-list" class="space-y-4">
 20 |       <p class="text-gray-400">Loading users...</p>
 21 |     </div>
 22 |   </div>
 23 | 
 24 |   <div id="error" class="hidden text-center mt-20 text-gray-600">
 25 |     <h2 class="text-3xl font-bold text-red-600 mb-4">404 - Page Not Found</h2>
 26 |     <p>You do not have permission to view this page.</p>
 27 |   </div>
 28 | 
 29 |   <script type="module">
 30 |     import { initializeApp } from "https://www.gstatic.com/firebasejs/9.22.2/firebase-app.js";
 31 |     import {
 32 |       getAuth,
 33 |       onAuthStateChanged,
 34 |       signOut
 35 |     } from "https://www.gstatic.com/firebasejs/9.22.2/firebase-auth.js";
 36 |     import {
 37 |       getFirestore,
 38 |       collection,
 39 |       getDocs,
 40 |       doc,
 41 |       getDoc,
 42 |       updateDoc
 43 |     } from "https://www.gstatic.com/firebasejs/9.22.2/firebase-firestore.js";
 44 | 
 45 |     const firebaseConfig = {
 46 |       apiKey: "AIzaSyBqzg9fA14lD_ygNx8CSRiRsnrz1bBNfUw",
 47 |       authDomain: "memory-auth-9515c.firebaseapp.com",
 48 |       projectId: "memory-auth-9515c",
 49 |       storageBucket: "memory-auth-9515c.appspot.com",
 50 |       messagingSenderId: "862743577103",
 51 |       appId: "1:862743577103:web:11fe02f4c24ef2c9c8197a"
 52 |     };
 53 | 
 54 |     const app = initializeApp(firebaseConfig);
 55 |     const auth = getAuth(app);
 56 |     const db = getFirestore(app);
 57 | 
 58 |     const dashboard = document.getElementById("dashboard");
 59 |     const userList = document.getElementById("user-list");
 60 |     const errorDiv = document.getElementById("error");
 61 | 
 62 |     onAuthStateChanged(auth, async (user) => {
 63 |       if (!user) {
 64 |         window.location.href = "../login.html";
 65 |         return;
 66 |       }
 67 | 
 68 |       const userDocRef = doc(db, "users", user.uid);
 69 |       const userDocSnap = await getDoc(userDocRef);
 70 | 
 71 |       if (!userDocSnap.exists() || userDocSnap.data().admin !== true) {
 72 |         // Not admin — show error
 73 |         errorDiv.classList.remove("hidden");
 74 |         return;
 75 |       }
 76 | 
 77 |       // Is admin — show dashboard
 78 |       dashboard.classList.remove("hidden");
 79 | 
 80 |       const snapshot = await getDocs(collection(db, "users"));
 81 |       userList.innerHTML = "";
 82 | 
 83 |       if (snapshot.empty) {
 84 |         userList.innerHTML = "<p class='text-gray-500'>No users found.</p>";
 85 |         return;
 86 |       }
 87 | 
 88 |       const pendingUsers = [];
 89 |       const otherUsers = [];
 90 | 
 91 |       snapshot.forEach(docSnap => {
 92 |         const userData = docSnap.data();
 93 |         const uid = docSnap.id;
 94 |         const name = userData.name || "N/A";
 95 |         const email = userData.email || "Unknown";
 96 |         const trxid = userData.trxid || null;
 97 |         const mobile = userData.mobile || null;
 98 |         const paid = userData.paid === true;
 99 |         const paymentStatus = userData.paymentStatus || "not paid";
100 | 
101 |         const userObj = { uid, name, email, trxid, mobile, paid, paymentStatus };
102 |         if (paymentStatus === "pending") {
103 |           pendingUsers.push(userObj);
104 |         } else {
105 |           otherUsers.push(userObj);
106 |         }
107 |       });
108 | 
109 |       const sortedUsers = [...pendingUsers, ...otherUsers];
110 | 
111 |       sortedUsers.forEach(({ uid, name, email, trxid, mobile, paid, paymentStatus }) => {
112 |         const statusColor = paymentStatus === "pending"
113 |           ? "text-yellow-600"
114 |           : paid ? "text-green-600"
115 |           : "text-gray-500";
116 | 
117 |         const cardBg = paymentStatus === "pending" ? "bg-red-100" : "bg-gray-100";
118 |         const showVerifyBtn = paymentStatus === "pending";
119 | 
120 |         const div = document.createElement("div");
121 |         div.className = `flex flex-col sm:flex-row justify-between items-start sm:items-center ${cardBg} p-4 rounded`;
122 | 
123 |         div.innerHTML = `
124 |           <div>
125 |             <p class="font-semibold">${name}</p>
126 |             <p class="text-sm text-gray-700">${email}</p>
127 |             ${trxid ? `<p class="text-sm text-yellow-700">TRX: ${trxid}</p>` : ""}
128 |             ${mobile ? `<p class="text-sm text-blue-700">Mobile: ${mobile}</p>` : ""}
129 |             <p class="text-sm ${statusColor} mt-1">Payment Status: ${paymentStatus}</p>
130 |             <span class="inline-block mt-2 px-2 py-1 text-xs rounded font-medium ${paid ? 'bg-green-200 text-green-800' : 'bg-red-200 text-red-800'}">
131 |               ${paid ? '✅ Has Access' : '❌ No Access'}
132 |             </span>
133 |           </div>
134 |           <div class="mt-3 sm:mt-0 flex items-center space-x-2">
135 |             <button
136 |               onclick="updateAccess('${uid}', ${!paid})"
137 |               class="px-3 py-1 text-sm rounded text-white bg-${paid ? 'red' : 'green'}-600"
138 |             >
139 |               ${paid ? 'Revoke Access' : 'Give Access'}
140 |             </button>
141 |             ${showVerifyBtn ? `
142 |               <button
143 |                 onclick="verifyPayment('${uid}')"
144 |                 class="p-2 text-sm rounded-full bg-blue-600 text-white hover:bg-blue-700"
145 |                 title="Verify Payment"
146 |               >
147 |                 🗸
148 |               </button>` : ""}
149 |           </div>
150 |         `;
151 | 
152 |         userList.appendChild(div);
153 |       });
154 |     });
155 | 
156 |     window.updateAccess = async (uid, giveAccess) => {
157 |       const confirmed = confirm(`Are you sure you want to ${giveAccess ? "grant" : "revoke"} access?`);
158 |       if (!confirmed) return;
159 | 
160 |       await updateDoc(doc(db, "users", uid), {
161 |         paid: giveAccess,
162 |         paymentStatus: giveAccess ? "verified" : "rejected"
163 |       });
164 | 
165 |       alert(`User access has been ${giveAccess ? "granted" : "revoked"}.`);
166 |       location.reload();
167 |     };
168 | 
169 |     window.verifyPayment = async (uid) => {
170 |       const confirmed = confirm("Mark this payment as verified?");
171 |       if (!confirmed) return;
172 | 
173 |       await updateDoc(doc(db, "users", uid), {
174 |         paid: true,
175 |         paymentStatus: "verified"
176 |       });
177 | 
178 |       alert("Payment marked as verified.");
179 |       location.reload();
180 |     };
181 | 
182 |     window.logout = () => {
183 |       signOut(auth).then(() => {
184 |         window.location.href = "/login.html";
185 |       });
186 |     };
187 |   </script>
188 | </body>
189 | </html>
190 | 


--------------------------------------------------------------------------------
/Mukhosto/icons/logo.png:
--------------------------------------------------------------------------------
https://raw.githubusercontent.com/ImJawadHossain/mukhosto-production/16a8428562f7e3480a813c98443722a9167b00eb/Mukhosto/icons/logo.png


--------------------------------------------------------------------------------
/Mukhosto/index.html:
--------------------------------------------------------------------------------
  1 | <!DOCTYPE html>
  2 | <html lang="en">
  3 | <head>
  4 |   <meta charset="UTF-8" />
  5 |   <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  6 |   <title>English Practice Hub</title>
  7 |   <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
  8 |   <script src="https://unpkg.com/lucide@latest"></script>
  9 |   <script src="https://www.gstatic.com/firebasejs/9.22.2/firebase-app.js"></script>
 10 |   <script src="https://www.gstatic.com/firebasejs/9.22.2/firebase-auth.js"></script>
 11 |   <script src="https://www.gstatic.com/firebasejs/9.22.2/firebase-firestore.js"></script>
 12 |   <link rel="manifest" href="/manifest.json" />
 13 |   <meta name="theme-color" content="#1e40af">
 14 | 
 15 | </head>
 16 | <body class="bg-gray-50 min-h-screen py-10 px-4">
 17 | 
 18 |   <!-- 🔝 Profile Dropdown -->
 19 |   <div class="absolute top-4 right-6">
 20 |     <div class="relative inline-block text-left">
 21 |       <button id="profile-button" class="flex items-center space-x-2 px-3 py-2 bg-white border border-gray-200 rounded-full shadow-sm hover:bg-gray-100 transition">
 22 |         <img id="profile-avatar" src="" alt="Avatar" class="w-8 h-8 rounded-full" />
 23 |         <span id="user-name" class="text-sm font-medium text-gray-700">Loading...</span>
 24 |         <span id="access-badge" class="ml-2 text-xs font-semibold px-2 py-0.5 rounded hidden"></span>
 25 |         <svg class="w-4 h-4 text-gray-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
 26 |           <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7" />
 27 |         </svg>
 28 |       </button>
 29 | 
 30 |       <div id="dropdown-menu" class="hidden absolute right-0 mt-2 w-48 bg-white border border-gray-200 rounded-lg shadow-lg z-50">
 31 |         <a href="/profile.html" class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100">View Profile</a>
 32 |         <a id="access-status-link" href="#" class="block px-4 py-2 text-sm font-medium rounded"></a>
 33 |         <a href="/payment.html" class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100">Buy Now</a>
 34 |         <button id="logout-btn" class="w-full text-left px-4 py-2 text-sm text-red-600 hover:bg-gray-100">Logout</button>
 35 | 
 36 |       </div>
 37 |     </div>
 38 |   </div>
 39 | 
 40 |   <!-- 💡 Main Content -->
 41 |   <div class="max-w-5xl mx-auto text-center">
 42 |     <h1 class="text-4xl font-bold mb-4"><br>Mukhosto.com | Memorization Tools</h1>
 43 |     <p class="text-lg text-gray-600 mb-10">Sharpen your English skills — one click at a time!</p>
 44 | 
 45 |   <div id="install-container" class="fixed bottom-6 right-6 hidden">
 46 |   <button id="install-button" class="bg-blue-600 text-white px-4 py-2 rounded-lg shadow-md hover:bg-blue-700 transition">
 47 |     📲 Install App
 48 |   </button>
 49 | </div>
 50 | 
 51 | 
 52 |     <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-6">
 53 |       <div class="rounded-2xl shadow-md hover:shadow-lg transition bg-white p-6 flex flex-col items-center text-center">
 54 |         <i data-lucide="book-open" class="w-8 h-8 text-blue-600"></i>
 55 |         <h2 class="text-xl font-semibold mt-4 mb-2">Student Vocabulary</h2>
 56 |         <p class="text-sm text-gray-500 mb-4">500 very important vocabulary for Admission, Job Exam</p>
 57 |         <a href="/vocabulary" class="bg-blue-600 text-white px-4 py-2 rounded-xl">Start Practicing</a>
 58 |       </div>
 59 | 
 60 |       <div class="rounded-2xl shadow-md hover:shadow-lg transition bg-white p-6 flex flex-col items-center text-center">
 61 |         <i data-lucide="repeat" class="w-8 h-8 text-green-600"></i>
 62 |         <h2 class="text-xl font-semibold mt-4 mb-2">IELTS Vocabulary</h2>
 63 |         <p class="text-sm text-gray-500 mb-4">These 800 Vocabulary is enough for getting IELST band: 8 or higher</p>
 64 |         <a href="/prepositions" class="bg-green-600 text-white px-4 py-2 rounded-xl">Start Practicing</a>
 65 |       </div>
 66 | 
 67 |       <div class="rounded-2xl shadow-md hover:shadow-lg transition bg-white p-6 flex flex-col items-center text-center">
 68 |         <i data-lucide="message-circle" class="w-8 h-8 text-purple-600"></i>
 69 |         <h2 class="text-xl font-semibold mt-4 mb-2">Vocabulary for Speaking</h2>
 70 |         <p class="text-sm text-gray-500 mb-4">Learn these 600 vocabulary for everyday speaking</p>
 71 |         <a href="/idioms" class="bg-purple-600 text-white px-4 py-2 rounded-xl">Start Practicing</a>
 72 |       </div>
 73 | 
 74 |       <div class="rounded-2xl shadow-md hover:shadow-lg transition bg-white p-6 flex flex-col items-center text-center">
 75 |         <i data-lucide="scroll-text" class="w-8 h-8 text-yellow-600"></i>
 76 |         <h2 class="text-xl font-semibold mt-4 mb-2">Basic Vocabulary</h2>
 77 |         <p class="text-sm text-gray-500 mb-4">Basic 600 vocabulary like "Eat: খাওয়া”</p>
 78 |         <a href="/proverbs" class="bg-yellow-600 text-white px-4 py-2 rounded-xl">Start Practicing</a>
 79 |       </div>
 80 |       
 81 |       
 82 |       
 83 | 
 84 | 
 85 |   <!-- 📎 Footer -->
 86 |   <footer class="text-center text-sm text-gray-500 mt-12 mb-6">
 87 |     <p class="mt-1">&copy; 2025 Jawad. All rights reserved.</p>
 88 |   </footer>
 89 | 
 90 |   <!-- 📜 Scripts -->
 91 |   <script type="module">
 92 |     import { initializeApp } from "https://www.gstatic.com/firebasejs/9.22.2/firebase-app.js";
 93 |     import { getAuth, onAuthStateChanged, signOut } from "https://www.gstatic.com/firebasejs/9.22.2/firebase-auth.js";
 94 |     import { getFirestore, doc, getDoc } from "https://www.gstatic.com/firebasejs/9.22.2/firebase-firestore.js";
 95 | 
 96 |     const firebaseConfig = {
 97 |       apiKey: "AIzaSyBqzg9fA14lD_ygNx8CSRiRsnrz1bBNfUw",
 98 |       authDomain: "memory-auth-9515c.firebaseapp.com",
 99 |       projectId: "memory-auth-9515c",
100 |       storageBucket: "memory-auth-9515c.appspot.com",
101 |       messagingSenderId: "862743577103",
102 |       appId: "1:862743577103:web:11fe02f4c24ef2c9c8197a"
103 |     };
104 | 
105 |     const app = initializeApp(firebaseConfig);
106 |     const auth = getAuth(app);
107 |     const db = getFirestore(app);
108 | 
109 |     const profileButton = document.getElementById('profile-button');
110 |     const dropdown = document.getElementById('dropdown-menu');
111 |     const userNameSpan = document.getElementById('user-name');
112 |     const logoutBtn = document.getElementById('logout-btn');
113 |     const avatarImg = document.getElementById('profile-avatar');
114 |     const badge = document.getElementById('access-badge');
115 |     const accessLink = document.getElementById('access-status-link');
116 | 
117 |     profileButton.addEventListener('click', () => dropdown.classList.toggle('hidden'));
118 |     logoutBtn.addEventListener('click', () => signOut(auth).then(() => window.location.href = '/login.html'));
119 | onAuthStateChanged(auth, async (user) => {
120 |   const dropdownMenu = document.getElementById("dropdown-menu");
121 | 
122 |   // Clean up extra links if previously rendered
123 |   ['signup-link', 'admin-dashboard-link'].forEach(id => {
124 |     const el = document.getElementById(id);
125 |     if (el) el.remove();
126 |   });
127 | 
128 |   // Guest
129 |   if (!user) {
130 |     userNameSpan.textContent = "Guest";
131 |     avatarImg.src = `https://ui-avatars.com/api/?name=Guest&background=ccc&size=32`;
132 | 
133 |     badge.textContent = "Login/Signup";
134 |     badge.className = "ml-2 text-xs font-semibold px-2 py-0.5 rounded bg-gray-100 text-gray-600";
135 |     badge.classList.remove("hidden");
136 | 
137 |     accessLink.textContent = "🔐 Login";
138 |     accessLink.href = "/login.html";
139 |     accessLink.className = "block px-4 py-2 text-sm font-medium bg-blue-100 text-blue-700 hover:bg-blue-200";
140 |     logoutBtn.classList.add("hidden");
141 | 
142 |     // Add Signup
143 |     const signupLink = document.createElement("a");
144 |     signupLink.id = "signup-link";
145 |     signupLink.href = "/signup.html";
146 |     signupLink.textContent = "📝 Signup";
147 |     signupLink.className = "block px-4 py-2 text-sm font-medium bg-blue-100 text-green-700 hover:bg-green-200";
148 |     dropdownMenu.appendChild(signupLink);
149 | 
150 | 
151 | 
152 | 
153 |     return;
154 |   }
155 | 
156 |   // Logged-in user
157 |   logoutBtn.classList.remove("hidden");
158 | 
159 |   const snap = await getDoc(doc(db, 'users', user.uid));
160 |   const name = snap.exists() ? snap.data().name : user.email;
161 |   const isAdmin = snap.exists() && snap.data().admin === true;
162 |   const paymentStatus = snap.exists() ? snap.data().paymentStatus : "not paid";
163 | 
164 |   userNameSpan.textContent = name;
165 |   const initials = name.split(" ").map(n => n[0]).join("").toUpperCase();
166 |   avatarImg.src = `https://ui-avatars.com/api/?name=${initials}&background=random&size=32`;
167 | 
168 |   if (isAdmin) {
169 |     // Admin UI
170 |     badge.textContent = "Admin";
171 |     badge.className = "ml-2 text-xs font-semibold px-2 py-0.5 rounded bg-black text-white";
172 |     badge.classList.remove("hidden");
173 | 
174 |     accessLink.textContent = "🛠 Admin Dashboard";
175 |     accessLink.href = "/admin";
176 |     accessLink.className = "block px-4 py-2 text-sm font-medium bg-black text-white hover:bg-gray-800";
177 | 
178 |     return;
179 |   }
180 | 
181 |   // General User Access Logic
182 |   badge.classList.remove("hidden");
183 | 
184 |   if (paymentStatus === "verified") {
185 |     badge.textContent = "Full Access";
186 |     badge.className = "ml-2 text-xs font-semibold px-2 py-0.5 rounded bg-green-100 text-green-700";
187 | 
188 |     accessLink.textContent = "✅ Full Access";
189 |     accessLink.href = "/dashboard.html";
190 |     accessLink.className = "block px-4 py-2 text-sm font-medium bg-green-100 text-green-700";
191 |     accessLink.style.cursor = "default";
192 | 
193 |   } else if (paymentStatus === "pending") {
194 |     badge.textContent = "Reviewing";
195 |     badge.className = "ml-2 text-xs font-semibold px-2 py-0.5 rounded bg-yellow-100 text-yellow-700";
196 | 
197 |     accessLink.textContent = "⏳ Reviewing...";
198 |     accessLink.href = "/dashboard.html";
199 |     accessLink.className = "block px-4 py-2 text-sm font-medium bg-yellow-100 text-yellow-700";
200 |     accessLink.style.cursor = "default";
201 | 
202 |   } else {
203 |     badge.textContent = "No Access";
204 |     badge.className = "ml-2 text-xs font-semibold px-2 py-0.5 rounded bg-red-100 text-red-700";
205 | 
206 |     accessLink.textContent = "🔓 Get Full Access";
207 |     accessLink.href = "/payment.html";
208 |     accessLink.className = "block px-4 py-2 text-sm font-medium bg-red-100 text-red-700 hover:bg-red-200";
209 |   }
210 | });
211 | 
212 | 
213 | 
214 | 
215 |   </script>
216 | 
217 |   <script>
218 |     lucide.createIcons();
219 |   </script>
220 |   <script>
221 |   if ('serviceWorker' in navigator) {
222 |     window.addEventListener('load', function () {
223 |       navigator.serviceWorker.register('/sw.js')
224 |         .then(reg => console.log('Service worker registered:', reg))
225 |         .catch(err => console.error('SW registration failed:', err));
226 |     });
227 |   }
228 | </script>
229 | 
230 | <script>
231 |   let deferredPrompt;
232 |   const installContainer = document.getElementById("install-container");
233 |   const installButton = document.getElementById("install-button");
234 | 
235 |   window.addEventListener("beforeinstallprompt", (e) => {
236 |     // Stop the mini-infobar from appearing
237 |     e.preventDefault();
238 |     deferredPrompt = e;
239 |     installContainer.classList.remove("hidden"); // Show the custom install button
240 |   });
241 | 
242 |   installButton.addEventListener("click", async () => {
243 |     if (deferredPrompt) {
244 |       deferredPrompt.prompt();
245 |       const { outcome } = await deferredPrompt.userChoice;
246 |       console.log(`User response to the install prompt: ${outcome}`);
247 |       if (outcome === 'accepted') {
248 |         installContainer.classList.add("hidden");
249 |       }
250 |       deferredPrompt = null;
251 |     }
252 |   });
253 | </script>
254 | 
255 | 
256 | 
257 | 
258 | </body>
259 | </html>
260 | 


--------------------------------------------------------------------------------
/Mukhosto/login.html:
--------------------------------------------------------------------------------
  1 | <!DOCTYPE html>
  2 | <html lang="en">
  3 | <head>
  4 |   <meta charset="UTF-8" />
  5 |   <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  6 |   <title>Mukhosto | Login / Signup</title>
  7 |   <script src="https://www.gstatic.com/firebasejs/9.22.2/firebase-app.js"></script>
  8 |   <script src="https://www.gstatic.com/firebasejs/9.22.2/firebase-auth.js"></script>
  9 |   <script src="https://www.gstatic.com/firebasejs/9.22.2/firebase-firestore.js"></script>
 10 |   <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
 11 | </head>
 12 | <body class="bg-gray-50 min-h-screen flex items-center justify-center">
 13 |   <div class="bg-white shadow-md p-6 rounded-xl max-w-sm w-full">
 14 |     <!-- Tabs -->
 15 |     <div class="flex mb-6 border-b">
 16 |       <button id="login-tab" class="w-1/2 py-2 font-semibold text-blue-600 border-b-2 border-blue-600">Login</button>
 17 |       <button id="signup-tab" class="w-1/2 py-2 font-semibold text-gray-600">Signup</button>
 18 |     </div>
 19 | 
 20 |     <!-- Login Form -->
 21 |     <div id="login-form">
 22 |       <input id="login-email" type="email" placeholder="Email" class="w-full mb-3 px-4 py-2 border rounded" />
 23 |       <input id="login-password" type="password" placeholder="Password" class="w-full mb-4 px-4 py-2 border rounded" />
 24 | 
 25 |       <button id="login-btn" onclick="login()" class="w-full bg-blue-600 text-white py-2 rounded mb-3 flex items-center justify-center">
 26 |         <svg id="login-spinner" class="w-5 h-5 mr-2 animate-spin hidden" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
 27 |           <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
 28 |           <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8v4a4 4 0 00-4 4H4z"></path>
 29 |         </svg>
 30 |         <span id="login-text">Login</span>
 31 |       </button>
 32 | 
 33 |       <button onclick="continueWithGoogle()" class="w-full py-2 rounded border flex items-center justify-center hover:bg-gray-100">
 34 |         <img src="https://www.svgrepo.com/show/475656/google-color.svg" class="w-5 h-5 mr-2" alt="Google logo" />
 35 |         <span>Continue with Google</span>
 36 |       </button>
 37 |     </div>
 38 | 
 39 |     <!-- Signup Form -->
 40 |     <div id="signup-form" class="hidden">
 41 |       <input id="signup-name" type="text" placeholder="Full Name" class="w-full mb-3 px-4 py-2 border rounded" />
 42 |       <input id="signup-email" type="email" placeholder="Email" class="w-full mb-3 px-4 py-2 border rounded" />
 43 |       <input id="signup-password" type="password" placeholder="Password" class="w-full mb-4 px-4 py-2 border rounded" />
 44 | 
 45 |       <button id="signup-btn" onclick="signup()" class="w-full bg-blue-600 text-white py-2 rounded mb-3 flex items-center justify-center">
 46 |         <svg id="signup-spinner" class="w-5 h-5 mr-2 animate-spin hidden" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
 47 |           <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
 48 |           <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8v4a4 4 0 00-4 4H4z"></path>
 49 |         </svg>
 50 |         <span id="signup-text">Sign Up</span>
 51 |       </button>
 52 | 
 53 |       <button onclick="continueWithGoogle()" class="w-full py-2 rounded border flex items-center justify-center hover:bg-gray-100">
 54 |         <img src="https://www.svgrepo.com/show/475656/google-color.svg" class="w-5 h-5 mr-2" alt="Google logo" />
 55 |         <span>Continue with Google</span>
 56 |       </button>
 57 |     </div>
 58 | 
 59 |     <!-- Error Display -->
 60 |     <p id="error" class="text-red-500 text-sm mt-3 text-center"></p>
 61 |   </div>
 62 | 
 63 |   <script type="module">
 64 |     // --- Firebase Config ---
 65 |     const firebaseConfig = {
 66 |       apiKey: "AIzaSyBqzg9fA14lD_ygNx8CSRiRsnrz1bBNfUw",
 67 |       authDomain: "memory-auth-9515c.firebaseapp.com",
 68 |       projectId: "memory-auth-9515c",
 69 |       storageBucket: "memory-auth-9515c.appspot.com",
 70 |       messagingSenderId: "862743577103",
 71 |       appId: "1:862743577103:web:11fe02f4c24ef2c9c8197a",
 72 |       measurementId: "G-XNT36FMPK6"
 73 |     };
 74 | 
 75 |     import { initializeApp } from "https://www.gstatic.com/firebasejs/9.22.2/firebase-app.js";
 76 |     import {
 77 |       getAuth,
 78 |       signInWithEmailAndPassword,
 79 |       createUserWithEmailAndPassword,
 80 |       signInWithPopup,
 81 |       GoogleAuthProvider
 82 |     } from "https://www.gstatic.com/firebasejs/9.22.2/firebase-auth.js";
 83 |     import {
 84 |       getFirestore,
 85 |       doc,
 86 |       setDoc,
 87 |       getDoc
 88 |     } from "https://www.gstatic.com/firebasejs/9.22.2/firebase-firestore.js";
 89 | 
 90 |     const app = initializeApp(firebaseConfig);
 91 |     const auth = getAuth(app);
 92 |     const db = getFirestore(app);
 93 |     const provider = new GoogleAuthProvider();
 94 | 
 95 |     const errorDisplay = document.getElementById("error");
 96 | 
 97 |     // ---- Tabs Switch ----
 98 |     const loginTab = document.getElementById("login-tab");
 99 |     const signupTab = document.getElementById("signup-tab");
100 |     const loginForm = document.getElementById("login-form");
101 |     const signupForm = document.getElementById("signup-form");
102 | 
103 |     loginTab.onclick = () => {
104 |       loginForm.classList.remove("hidden");
105 |       signupForm.classList.add("hidden");
106 |       loginTab.classList.add("text-blue-600", "border-b-2", "border-blue-600");
107 |       signupTab.classList.remove("text-blue-600", "border-b-2", "border-blue-600");
108 |       signupTab.classList.add("text-gray-600");
109 |     };
110 | 
111 |     signupTab.onclick = () => {
112 |       signupForm.classList.remove("hidden");
113 |       loginForm.classList.add("hidden");
114 |       signupTab.classList.add("text-blue-600", "border-b-2", "border-blue-600");
115 |       loginTab.classList.remove("text-blue-600", "border-b-2", "border-blue-600");
116 |       loginTab.classList.add("text-gray-600");
117 |     };
118 | 
119 |     // ---- Signup (Email/Password) ----
120 |     window.signup = () => {
121 |       const name = document.getElementById("signup-name").value.trim();
122 |       const email = document.getElementById("signup-email").value.trim();
123 |       const password = document.getElementById("signup-password").value.trim();
124 |       const signupSpinner = document.getElementById("signup-spinner");
125 |       const signupBtn = document.getElementById("signup-btn");
126 |       const signupText = document.getElementById("signup-text");
127 | 
128 |       errorDisplay.textContent = "";
129 |       if (!name || !email || !password) {
130 |         errorDisplay.textContent = "Please fill all fields!";
131 |         return;
132 |       }
133 | 
134 |       signupSpinner.classList.remove("hidden");
135 |       signupBtn.disabled = true;
136 |       signupText.textContent = "Signing up…";
137 | 
138 |       createUserWithEmailAndPassword(auth, email, password)
139 |         .then(async (cred) => {
140 |           const userRef = doc(db, "users", cred.user.uid);
141 |           await setDoc(userRef, {
142 |             paid: false,
143 |             email: email,
144 |             name: name
145 |           });
146 |           window.location.href = "/";
147 |         })
148 |         .catch(err => errorDisplay.textContent = err.message)
149 |         .finally(() => {
150 |           signupSpinner.classList.add("hidden");
151 |           signupBtn.disabled = false;
152 |           signupText.textContent = "Sign Up";
153 |         });
154 |     };
155 | 
156 |     // ---- Login (Email/Password) ----
157 |     window.login = () => {
158 |       const email = document.getElementById("login-email").value.trim();
159 |       const password = document.getElementById("login-password").value.trim();
160 |       const loginSpinner = document.getElementById("login-spinner");
161 |       const loginBtn = document.getElementById("login-btn");
162 |       const loginText = document.getElementById("login-text");
163 | 
164 |       errorDisplay.textContent = "";
165 |       loginSpinner.classList.remove("hidden");
166 |       loginBtn.disabled = true;
167 |       loginText.textContent = "Logging in…";
168 | 
169 |       signInWithEmailAndPassword(auth, email, password)
170 |         .then(() => window.location.href = "/")
171 |         .catch(err => errorDisplay.textContent = err.message)
172 |         .finally(() => {
173 |           loginSpinner.classList.add("hidden");
174 |           loginBtn.disabled = false;
175 |           loginText.textContent = "Login";
176 |         });
177 |     };
178 | 
179 |     // ---- Google Login/Signup (Create Once) ----
180 |     window.continueWithGoogle = () => {
181 |       errorDisplay.textContent = "";
182 |       signInWithPopup(auth, provider)
183 |         .then(async (result) => {
184 |           const user = result.user;
185 |           const userRef = doc(db, "users", user.uid);
186 |           const snap = await getDoc(userRef);
187 |           if (!snap.exists()) {
188 |             await setDoc(userRef, {
189 |               paid: false,
190 |               email: user.email,
191 |               name: user.displayName || "Anonymous"
192 |             });
193 |           }
194 |           window.location.href = "/";
195 |         })
196 |         .catch(err => errorDisplay.textContent = err.message);
197 |     };
198 |   </script>
199 | </body>
200 | </html>
201 | 


--------------------------------------------------------------------------------
/Mukhosto/manifest.json:
--------------------------------------------------------------------------------
 1 | {
 2 |   "name": "Mukhosto",
 3 |   "short_name": "Mukhosto",
 4 |   "start_url": "/index.html",
 5 |   "display": "standalone",
 6 |   "background_color": "#ffffff",
 7 |   "theme_color": "#1e40af",
 8 |   "orientation": "portrait",
 9 |   "icons": [
10 |     {
11 |       "src": "/icons/logo.png",
12 |       "sizes": "192x192",
13 |       "type": "image/png"
14 |     },
15 |     {
16 |       "src": "/icons/logo.png",
17 |       "sizes": "512x512",
18 |       "type": "image/png"
19 |     }
20 |   ]
21 | }
22 | 


--------------------------------------------------------------------------------
/Mukhosto/mukhosto.txt:
--------------------------------------------------------------------------------
   1 | ├── Mukhosto
   2 |     ├── admin
   3 |     │   └── index.html
   4 |     ├── custom_practice
   5 |     │   ├── flashcard.html
   6 |     │   ├── flashcard.js
   7 |     │   ├── index.html
   8 |     │   ├── index.js
   9 |     │   ├── known-words.html
  10 |     │   └── style.css
  11 |     ├── icons
  12 |     │   └── logo.png
  13 |     ├── index.html
  14 |     ├── login.html
  15 |     ├── manifest.json
  16 |     ├── payment.html
  17 |     ├── profile.html
  18 |     ├── sw.js
  19 |     ├── verifyAccess.js
  20 |     └── vocabulary
  21 |     │   ├── data.xlsx
  22 |     │   ├── flashcard.html
  23 |     │   ├── flashcard.js
  24 |     │   ├── index.html
  25 |     │   ├── index.js
  26 |     │   ├── known-words.html
  27 |     │   └── style.css
  28 | 
  29 | 
  30 | 
  31 | /Mukhosto/admin/index.html:
  32 | --------------------------------------------------------------------------------
  33 |   1 | <!DOCTYPE html>
  34 |   2 | <html lang="en">
  35 |   3 | <head>
  36 |   4 |   <meta charset="UTF-8" />
  37 |   5 |   <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  38 |   6 |   <title>Admin Dashboard</title>
  39 |   7 |   <script src="https://www.gstatic.com/firebasejs/9.22.2/firebase-app.js"></script>
  40 |   8 |   <script src="https://www.gstatic.com/firebasejs/9.22.2/firebase-auth.js"></script>
  41 |   9 |   <script src="https://www.gstatic.com/firebasejs/9.22.2/firebase-firestore.js"></script>
  42 |  10 |   <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
  43 |  11 | </head>
  44 |  12 | <body class="bg-gray-100 min-h-screen p-6">
  45 |  13 |   <div id="dashboard" class="hidden max-w-4xl mx-auto bg-white p-6 shadow-lg rounded-xl">
  46 |  14 |     <div class="flex items-center justify-between mb-6">
  47 |  15 |       <h1 class="text-2xl font-bold">Admin Dashboard</h1>
  48 |  16 |       <button onclick="logout()" class="bg-red-500 text-white px-3 py-1 rounded text-sm">Logout</button>
  49 |  17 |     </div>
  50 |  18 |     <p class="text-sm text-gray-600 mb-4">Only visible to <strong>Admins</strong>. Below is the full user list:</p>
  51 |  19 |     <div id="user-list" class="space-y-4">
  52 |  20 |       <p class="text-gray-400">Loading users...</p>
  53 |  21 |     </div>
  54 |  22 |   </div>
  55 |  23 | 
  56 |  24 |   <div id="error" class="hidden text-center mt-20 text-gray-600">
  57 |  25 |     <h2 class="text-3xl font-bold text-red-600 mb-4">404 - Page Not Found</h2>
  58 |  26 |     <p>You do not have permission to view this page.</p>
  59 |  27 |   </div>
  60 |  28 | 
  61 |  29 |   <script type="module">
  62 |  30 |     import { initializeApp } from "https://www.gstatic.com/firebasejs/9.22.2/firebase-app.js";
  63 |  31 |     import {
  64 |  32 |       getAuth,
  65 |  33 |       onAuthStateChanged,
  66 |  34 |       signOut
  67 |  35 |     } from "https://www.gstatic.com/firebasejs/9.22.2/firebase-auth.js";
  68 |  36 |     import {
  69 |  37 |       getFirestore,
  70 |  38 |       collection,
  71 |  39 |       getDocs,
  72 |  40 |       doc,
  73 |  41 |       getDoc,
  74 |  42 |       updateDoc
  75 |  43 |     } from "https://www.gstatic.com/firebasejs/9.22.2/firebase-firestore.js";
  76 |  44 | 
  77 |  45 |     const firebaseConfig = {
  78 |  46 |       apiKey: "AIzaSyBqzg9fA14lD_ygNx8CSRiRsnrz1bBNfUw",
  79 |  47 |       authDomain: "memory-auth-9515c.firebaseapp.com",
  80 |  48 |       projectId: "memory-auth-9515c",
  81 |  49 |       storageBucket: "memory-auth-9515c.appspot.com",
  82 |  50 |       messagingSenderId: "862743577103",
  83 |  51 |       appId: "1:862743577103:web:11fe02f4c24ef2c9c8197a"
  84 |  52 |     };
  85 |  53 | 
  86 |  54 |     const app = initializeApp(firebaseConfig);
  87 |  55 |     const auth = getAuth(app);
  88 |  56 |     const db = getFirestore(app);
  89 |  57 | 
  90 |  58 |     const dashboard = document.getElementById("dashboard");
  91 |  59 |     const userList = document.getElementById("user-list");
  92 |  60 |     const errorDiv = document.getElementById("error");
  93 |  61 | 
  94 |  62 |     onAuthStateChanged(auth, async (user) => {
  95 |  63 |       if (!user) {
  96 |  64 |         window.location.href = "../login.html";
  97 |  65 |         return;
  98 |  66 |       }
  99 |  67 | 
 100 |  68 |       const userDocRef = doc(db, "users", user.uid);
 101 |  69 |       const userDocSnap = await getDoc(userDocRef);
 102 |  70 | 
 103 |  71 |       if (!userDocSnap.exists() || userDocSnap.data().admin !== true) {
 104 |  72 |         // Not admin — show error
 105 |  73 |         errorDiv.classList.remove("hidden");
 106 |  74 |         return;
 107 |  75 |       }
 108 |  76 | 
 109 |  77 |       // Is admin — show dashboard
 110 |  78 |       dashboard.classList.remove("hidden");
 111 |  79 | 
 112 |  80 |       const snapshot = await getDocs(collection(db, "users"));
 113 |  81 |       userList.innerHTML = "";
 114 |  82 | 
 115 |  83 |       if (snapshot.empty) {
 116 |  84 |         userList.innerHTML = "<p class='text-gray-500'>No users found.</p>";
 117 |  85 |         return;
 118 |  86 |       }
 119 |  87 | 
 120 |  88 |       const pendingUsers = [];
 121 |  89 |       const otherUsers = [];
 122 |  90 | 
 123 |  91 |       snapshot.forEach(docSnap => {
 124 |  92 |         const userData = docSnap.data();
 125 |  93 |         const uid = docSnap.id;
 126 |  94 |         const name = userData.name || "N/A";
 127 |  95 |         const email = userData.email || "Unknown";
 128 |  96 |         const trxid = userData.trxid || null;
 129 |  97 |         const mobile = userData.mobile || null;
 130 |  98 |         const paid = userData.paid === true;
 131 |  99 |         const paymentStatus = userData.paymentStatus || "not paid";
 132 | 100 | 
 133 | 101 |         const userObj = { uid, name, email, trxid, mobile, paid, paymentStatus };
 134 | 102 |         if (paymentStatus === "pending") {
 135 | 103 |           pendingUsers.push(userObj);
 136 | 104 |         } else {
 137 | 105 |           otherUsers.push(userObj);
 138 | 106 |         }
 139 | 107 |       });
 140 | 108 | 
 141 | 109 |       const sortedUsers = [...pendingUsers, ...otherUsers];
 142 | 110 | 
 143 | 111 |       sortedUsers.forEach(({ uid, name, email, trxid, mobile, paid, paymentStatus }) => {
 144 | 112 |         const statusColor = paymentStatus === "pending"
 145 | 113 |           ? "text-yellow-600"
 146 | 114 |           : paid ? "text-green-600"
 147 | 115 |           : "text-gray-500";
 148 | 116 | 
 149 | 117 |         const cardBg = paymentStatus === "pending" ? "bg-red-100" : "bg-gray-100";
 150 | 118 |         const showVerifyBtn = paymentStatus === "pending";
 151 | 119 | 
 152 | 120 |         const div = document.createElement("div");
 153 | 121 |         div.className = `flex flex-col sm:flex-row justify-between items-start sm:items-center ${cardBg} p-4 rounded`;
 154 | 122 | 
 155 | 123 |         div.innerHTML = `
 156 | 124 |           <div>
 157 | 125 |             <p class="font-semibold">${name}</p>
 158 | 126 |             <p class="text-sm text-gray-700">${email}</p>
 159 | 127 |             ${trxid ? `<p class="text-sm text-yellow-700">TRX: ${trxid}</p>` : ""}
 160 | 128 |             ${mobile ? `<p class="text-sm text-blue-700">Mobile: ${mobile}</p>` : ""}
 161 | 129 |             <p class="text-sm ${statusColor} mt-1">Payment Status: ${paymentStatus}</p>
 162 | 130 |             <span class="inline-block mt-2 px-2 py-1 text-xs rounded font-medium ${paid ? 'bg-green-200 text-green-800' : 'bg-red-200 text-red-800'}">
 163 | 131 |               ${paid ? '✅ Has Access' : '❌ No Access'}
 164 | 132 |             </span>
 165 | 133 |           </div>
 166 | 134 |           <div class="mt-3 sm:mt-0 flex items-center space-x-2">
 167 | 135 |             <button
 168 | 136 |               onclick="updateAccess('${uid}', ${!paid})"
 169 | 137 |               class="px-3 py-1 text-sm rounded text-white bg-${paid ? 'red' : 'green'}-600"
 170 | 138 |             >
 171 | 139 |               ${paid ? 'Revoke Access' : 'Give Access'}
 172 | 140 |             </button>
 173 | 141 |             ${showVerifyBtn ? `
 174 | 142 |               <button
 175 | 143 |                 onclick="verifyPayment('${uid}')"
 176 | 144 |                 class="p-2 text-sm rounded-full bg-blue-600 text-white hover:bg-blue-700"
 177 | 145 |                 title="Verify Payment"
 178 | 146 |               >
 179 | 147 |                 🗸
 180 | 148 |               </button>` : ""}
 181 | 149 |           </div>
 182 | 150 |         `;
 183 | 151 | 
 184 | 152 |         userList.appendChild(div);
 185 | 153 |       });
 186 | 154 |     });
 187 | 155 | 
 188 | 156 |     window.updateAccess = async (uid, giveAccess) => {
 189 | 157 |       const confirmed = confirm(`Are you sure you want to ${giveAccess ? "grant" : "revoke"} access?`);
 190 | 158 |       if (!confirmed) return;
 191 | 159 | 
 192 | 160 |       await updateDoc(doc(db, "users", uid), {
 193 | 161 |         paid: giveAccess,
 194 | 162 |         paymentStatus: giveAccess ? "verified" : "rejected"
 195 | 163 |       });
 196 | 164 | 
 197 | 165 |       alert(`User access has been ${giveAccess ? "granted" : "revoked"}.`);
 198 | 166 |       location.reload();
 199 | 167 |     };
 200 | 168 | 
 201 | 169 |     window.verifyPayment = async (uid) => {
 202 | 170 |       const confirmed = confirm("Mark this payment as verified?");
 203 | 171 |       if (!confirmed) return;
 204 | 172 | 
 205 | 173 |       await updateDoc(doc(db, "users", uid), {
 206 | 174 |         paid: true,
 207 | 175 |         paymentStatus: "verified"
 208 | 176 |       });
 209 | 177 | 
 210 | 178 |       alert("Payment marked as verified.");
 211 | 179 |       location.reload();
 212 | 180 |     };
 213 | 181 | 
 214 | 182 |     window.logout = () => {
 215 | 183 |       signOut(auth).then(() => {
 216 | 184 |         window.location.href = "/login.html";
 217 | 185 |       });
 218 | 186 |     };
 219 | 187 |   </script>
 220 | 188 | </body>
 221 | 189 | </html>
 222 | 190 | 
 223 | 
 224 | 
 225 | --------------------------------------------------------------------------------
 226 | /Mukhosto/custom_practice/flashcard.html:
 227 | --------------------------------------------------------------------------------
 228 |  1 | <!DOCTYPE html>
 229 |  2 | <html lang="en">
 230 |  3 | <head>
 231 |  4 |   <meta charset="UTF-8" />
 232 |  5 |   <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
 233 |  6 |   <title>Vocabulary Flashcards</title>
 234 |  7 |   <link rel="stylesheet" href="style.css">
 235 |  8 |   <script src="https://cdn.jsdelivr.net/npm/xlsx@0.18.5/dist/xlsx.full.min.js"></script>
 236 |  9 |   <script src="https://www.gstatic.com/firebasejs/9.22.2/firebase-app.js"></script>
 237 | 10 |   <script src="https://www.gstatic.com/firebasejs/9.22.2/firebase-auth.js"></script>
 238 | 11 | </head>
 239 | 12 | <body>
 240 | 13 | 
 241 | 14 | <h1>
 242 | 15 |   <a href="/vocabulary" style="color: inherit; text-decoration: none;">
 243 | 16 |     Vocabulary Flashcards
 244 | 17 |   </a>
 245 | 18 | </h1>
 246 | 19 | 
 247 | 20 | <div class="flex justify-center mb-4">
 248 | 21 |   <label class="flex items-center space-x-2 text-sm text-gray-700">
 249 | 22 |     <input type="checkbox" id="reverse-toggle" class="accent-blue-600">
 250 | 23 |     <span>Reverse Practice</span>
 251 | 24 |   </label>
 252 | 25 | </div>
 253 | 26 | 
 254 | 27 | <label>
 255 | 28 |   <input type="checkbox" id="toggle-extra" onchange="toggleExtras()" />
 256 | 29 |   Show Extra Data
 257 | 30 | </label>
 258 | 31 | 
 259 | 32 | <div class="top-controls">
 260 | 33 |   <button class="shuffle-button" onclick="shuffleCards()">Shuffle Cards</button>
 261 | 34 | </div>
 262 | 35 | 
 263 | 36 | <div id="flashcard-container" class="flashcard-container"></div>
 264 | 37 | 
 265 | 38 | <div class="button-container">
 266 | 39 |   <button class="nav-buttons" onclick="showPrevious()">Previous</button>
 267 | 40 | <button class="nav-buttons" id="next-btn" onclick="showNext()">Next</button>  
 268 | 41 | </div>
 269 | 42 | 
 270 | 43 | <div class="counter" id="card-counter">1/0</div>
 271 | 44 | 
 272 | 45 | <script src="flashcard.js"></script> <!-- ✅ Updated here -->
 273 | 46 | 
 274 | 47 | <br><br><br><br>
 275 | 48 | 
 276 | 49 | <footer class="text-center text-sm text-gray-500 mt-12 mb-6">
 277 | 50 |   <a href="/" class="text-blue-600 hover:underline">← Back to Home</a>
 278 | 51 |   <p class="mt-1">&copy; 2025 Jawad. All rights reserved.</p>
 279 | 52 | </footer>
 280 | 53 | 
 281 | 54 | <script type="module" src="../verifyAccess.js"></script>
 282 | 55 | 
 283 | 56 | </body>
 284 | 57 | </html>
 285 | 58 | 
 286 | 
 287 | 
 288 | --------------------------------------------------------------------------------
 289 | /Mukhosto/custom_practice/flashcard.js:
 290 | --------------------------------------------------------------------------------
 291 |   1 | let flashcards = [];
 292 |   2 | let currentCardIndex = 0;
 293 |   3 | let showExtraData = false;
 294 |   4 | let shuffled = false;
 295 |   5 | 
 296 |   6 | // --- Storage Handling ---
 297 |   7 | function getKnownWords() {
 298 |   8 |   return JSON.parse(localStorage.getItem("jawad2_knownWords") || "[]");
 299 |   9 | }
 300 |  10 | 
 301 |  11 | function saveKnownWord(word) {
 302 |  12 |   const knownWords = getKnownWords();
 303 |  13 |   if (!knownWords.includes(word)) {
 304 |  14 |     knownWords.push(word);
 305 |  15 |     localStorage.setItem("jawad2_knownWords", JSON.stringify(knownWords));
 306 |  16 |   }
 307 |  17 | }
 308 |  18 | 
 309 |  19 | function isReverseMode() {
 310 |  20 |   return localStorage.getItem("reversePractice") === "1";
 311 |  21 | }
 312 |  22 | 
 313 |  23 | // --- File Loading ---
 314 |  24 | function getRangeFromURL() {
 315 |  25 |   const params = new URLSearchParams(window.location.search);
 316 |  26 |   const start = parseInt(params.get("start")) || 1;
 317 |  27 |   const end = parseInt(params.get("end")) || Number.MAX_SAFE_INTEGER;
 318 |  28 |   return { start, end };
 319 |  29 | }
 320 |  30 | 
 321 |  31 | 
 322 |  32 | document.addEventListener('keydown', (e) => {
 323 |  33 |   if (e.key === "ArrowRight") {
 324 |  34 |     showNext();
 325 |  35 |   } else if (e.key === "ArrowLeft") {
 326 |  36 |     showPrevious();
 327 |  37 |   } else if (e.key === " " || e.key === "Enter") {
 328 |  38 |     e.preventDefault(); // stop page from scrolling
 329 |  39 |     const card = document.querySelector(".flashcard");
 330 |  40 |     if (card) flipCard(card);
 331 |  41 |   }
 332 |  42 | });
 333 |  43 | 
 334 |  44 | 
 335 |  45 | 
 336 |  46 | function getCustomFileBuffer() {
 337 |  47 |   return new Promise((resolve, reject) => {
 338 |  48 |     const base64 = localStorage.getItem("jawad2_uploadedXLSX");
 339 |  49 |     if (!base64) return reject("No custom Excel file uploaded.");
 340 |  50 |     const binary = atob(base64);
 341 |  51 |     const bytes = new Uint8Array(binary.length);
 342 |  52 |     for (let i = 0; i < binary.length; i++) {
 343 |  53 |       bytes[i] = binary.charCodeAt(i);
 344 |  54 |     }
 345 |  55 |     resolve(bytes.buffer);
 346 |  56 |   });
 347 |  57 | }
 348 |  58 | 
 349 |  59 | // --- Flashcard Setup ---
 350 |  60 | document.addEventListener("DOMContentLoaded", () => {
 351 |  61 |   const toggle = document.getElementById("reverse-toggle");
 352 |  62 |   if (toggle) {
 353 |  63 |     toggle.checked = isReverseMode();
 354 |  64 |     toggle.addEventListener("change", () => {
 355 |  65 |       localStorage.setItem("reversePractice", toggle.checked ? "1" : "0");
 356 |  66 |       const params = new URLSearchParams(window.location.search);
 357 |  67 |       params.set("reverse", toggle.checked ? "1" : "0");
 358 |  68 |       window.location.search = params.toString();
 359 |  69 |     });
 360 |  70 |   }
 361 |  71 | 
 362 |  72 |   getCustomFileBuffer()
 363 |  73 |     .then(buffer => {
 364 |  74 |       const reverse = isReverseMode();
 365 |  75 |       const workbook = XLSX.read(buffer, { type: "array" });
 366 |  76 |       const sheet = workbook.Sheets[workbook.SheetNames[0]];
 367 |  77 |       const json = XLSX.utils.sheet_to_json(sheet);
 368 |  78 | 
 369 |  79 |       const { start, end } = getRangeFromURL();
 370 |  80 |       const knownWords = getKnownWords();
 371 |  81 | 
 372 |  82 |       flashcards = json
 373 |  83 |         .slice(start - 1, end)
 374 |  84 |         .filter(row => !knownWords.includes(row["FrontData"] || ""))
 375 |  85 |         .map(row => ({
 376 |  86 |           front: reverse ? (row["BackData"] || "") : (row["FrontData"] || ""),
 377 |  87 |           back: reverse ? (row["FrontData"] || "") : (row["BackData"] || ""),
 378 |  88 |           subBack: row["SubBack"] || "",
 379 |  89 |           extras: Object.keys(row)
 380 |  90 |             .filter(k => k.startsWith("ExtraData"))
 381 |  91 |             .map(k => row[k]),
 382 |  92 |           reverseOriginal: row["FrontData"] || ""
 383 |  93 |         }));
 384 |  94 | 
 385 |  95 |       createFlashcard();
 386 |  96 |     })
 387 |  97 |     .catch(err => {
 388 |  98 |       document.getElementById("flashcard-container").innerHTML = `<p>Error loading file: ${err}</p>`;
 389 |  99 |     });
 390 | 100 | 
 391 | 101 |   const shuffleBtn = document.getElementById("shuffle-btn");
 392 | 102 |   if (shuffleBtn) {
 393 | 103 |     shuffleBtn.addEventListener("click", shuffleCards);
 394 | 104 |   }
 395 | 105 | });
 396 | 106 | 
 397 | 107 | // --- Flashcard Rendering ---
 398 | 108 | function createFlashcard() {
 399 | 109 |   const container = document.getElementById("flashcard-container");
 400 | 110 |   container.innerHTML = "";
 401 | 111 | 
 402 | 112 |   if (flashcards.length === 0) {
 403 | 113 |     container.innerHTML = "<p>No cards to review!</p>";
 404 | 114 |     updateCardCounter();
 405 | 115 |     return;
 406 | 116 |   }
 407 | 117 | 
 408 | 118 |   const card = flashcards[currentCardIndex];
 409 | 119 |   const cardDiv = document.createElement("div");
 410 | 120 |   cardDiv.classList.add("flashcard");
 411 | 121 | 
 412 | 122 |   cardDiv.innerHTML = `
 413 | 123 |     <div class="card-inner">
 414 | 124 |       <div class="card-front">
 415 | 125 |         <span class="word">${card.front}</span>
 416 | 126 |         <button class="pronunciation-btn" onclick="event.stopPropagation(); pronounce('${card.front}')">🔊</button>
 417 | 127 |         <button class="known-icon" onclick="event.stopPropagation(); markAsKnown(this.dataset.word)" data-word="${encodeURIComponent(card.reverseOriginal || card.front)}">✅</button>
 418 | 128 |       </div>
 419 | 129 |       <div class="card-back">
 420 | 130 |         <div class="meaning">${card.back}</div>
 421 | 131 |         <button class="pronunciation-btn" onclick="event.stopPropagation(); pronounce('${card.back}')">🔊</button>
 422 | 132 |         <button class="known-icon" onclick="event.stopPropagation(); markAsKnown(this.dataset.word)" data-word="${encodeURIComponent(card.reverseOriginal || card.front)}">✅</button>
 423 | 133 | 
 424 | 134 |         ${card.subBack ? `<em class="sub-definition">${card.subBack}</em>` : ""}
 425 | 135 |         ${showExtraData && card.extras.length > 0
 426 | 136 |           ? `<div class="extras">${card.extras.map((e, i) => `<p>${i + 1}. ${e}</p>`).join("")}</div>`
 427 | 137 |           : ""}
 428 | 138 |       </div>
 429 | 139 |     </div>
 430 | 140 |   `;
 431 | 141 | 
 432 | 142 | 
 433 | 143 |   cardDiv.onclick = () => flipCard(cardDiv);
 434 | 144 |   container.appendChild(cardDiv);
 435 | 145 | 
 436 | 146 |   updateCardCounter();
 437 | 147 |   updateNavigation();
 438 | 148 | }
 439 | 149 | 
 440 | 150 | function flipCard(cardElement) {
 441 | 151 |   const inner = cardElement.querySelector(".card-inner");
 442 | 152 |   inner.classList.toggle("is-flipped");
 443 | 153 | }
 444 | 154 | 
 445 | 155 | function showNext() {
 446 | 156 |   if (currentCardIndex < flashcards.length - 1) {
 447 | 157 |     currentCardIndex++;
 448 | 158 |     createFlashcard();
 449 | 159 |   }
 450 | 160 | }
 451 | 161 | 
 452 | 162 | function showPrevious() {
 453 | 163 |   if (currentCardIndex > 0) {
 454 | 164 |     currentCardIndex--;
 455 | 165 |     createFlashcard();
 456 | 166 |   }
 457 | 167 | }
 458 | 168 | 
 459 | 169 | function shuffleCards() {
 460 | 170 |   flashcards.sort(() => Math.random() - 0.5);
 461 | 171 |   currentCardIndex = 0;
 462 | 172 |   shuffled = true;
 463 | 173 |   createFlashcard();
 464 | 174 | }
 465 | 175 | 
 466 | 176 | function updateCardCounter() {
 467 | 177 |   document.getElementById("card-counter").textContent = `${currentCardIndex + 1}/${flashcards.length}`;
 468 | 178 | 
 469 | 179 |   const nextBtn = document.getElementById("next-btn");
 470 | 180 |   if (currentCardIndex >= flashcards.length - 1) {
 471 | 181 |     nextBtn.textContent = "Exit";
 472 | 182 |     nextBtn.onclick = () => window.location.href = "/custom_practice"; // or any page you want
 473 | 183 |   } else {
 474 | 184 |     nextBtn.textContent = "Next";
 475 | 185 |     nextBtn.onclick = showNext;
 476 | 186 |   }
 477 | 187 | }
 478 | 188 | 
 479 | 189 | 
 480 | 190 | function updateNavigation() {
 481 | 191 |   const exitBtn = document.getElementById("exit-btn");
 482 | 192 |   if (exitBtn) {
 483 | 193 |     if (currentCardIndex === flashcards.length - 1) {
 484 | 194 |       exitBtn.style.display = "block";
 485 | 195 |     } else {
 486 | 196 |       exitBtn.style.display = "none";
 487 | 197 |     }
 488 | 198 |   }
 489 | 199 | }
 490 | 200 | 
 491 | 201 | function toggleExtras() {
 492 | 202 |   showExtraData = document.getElementById("toggle-extra")?.checked || false;
 493 | 203 |   createFlashcard();
 494 | 204 | }
 495 | 205 | 
 496 | 206 | function pronounce(word) {
 497 | 207 |   const utterance = new SpeechSynthesisUtterance(word);
 498 | 208 |   window.speechSynthesis.speak(utterance);
 499 | 209 | }
 500 | 210 | 
 501 | 211 | function markAsKnown(word) {
 502 | 212 |   word = decodeURIComponent(word);
 503 | 213 |   saveKnownWord(word);
 504 | 214 |   flashcards.splice(currentCardIndex, 1);
 505 | 215 |   if (currentCardIndex >= flashcards.length) currentCardIndex = flashcards.length - 1;
 506 | 216 |   createFlashcard();
 507 | 217 | }
 508 | 218 | 
 509 | 
 510 | 
 511 | --------------------------------------------------------------------------------
 512 | /Mukhosto/custom_practice/index.html:
 513 | --------------------------------------------------------------------------------
 514 |  1 | <!DOCTYPE html>
 515 |  2 | <html lang="en">
 516 |  3 | <head>
 517 |  4 |   <meta charset="UTF-8" />
 518 |  5 |   <meta name="viewport" content="width=device-width, initial-scale=1.0" />
 519 |  6 |   <title>Vocabulary Sets</title>
 520 |  7 |   <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
 521 |  8 |   <link rel="stylesheet" href="style.css">
 522 |  9 |   <script src="https://www.gstatic.com/firebasejs/9.22.2/firebase-app.js"></script>
 523 | 10 | <script src="https://www.gstatic.com/firebasejs/9.22.2/firebase-auth.js"></script>
 524 | 11 | 
 525 | 12 | </head>
 526 | 13 | <body class="bg-gradient-to-b from-blue-50 to-white min-h-screen py-10 px-4">
 527 | 14 | 
 528 | 15 | <div class="mb-6">
 529 | 16 |   <label class="block text-sm text-gray-700 mb-2">Upload your vocabulary file (.xlsx):</label>
 530 | 17 |   <input type="file" id="upload-xlsx" accept=".xlsx" class="mb-4" />
 531 | 18 | 
 532 | 19 |   <!-- New Download Button -->
 533 | 20 |   <button id="download-sample" class="bg-green-500 text-white px-4 py-2 rounded-xl hover:bg-green-600 transition mt-2">
 534 | 21 |     ⬇ Download Sample .xlsx File
 535 | 22 |   </button>
 536 | 23 | </div>
 537 | 24 | 
 538 | 25 | 
 539 | 26 | 
 540 | 27 |   <div class="max-w-4xl mx-auto text-center">
 541 | 28 | 
 542 | 29 | 
 543 | 30 |     <h1 class="text-4xl font-bold text-blue-800 mb-4">Vocabulary Sets</h1>
 544 | 31 | 
 545 | 32 | 
 546 | 33 |     <p class="text-gray-600 mb-6 text-lg">Practice vocabulary in small, manageable sets for better retention.</p>
 547 | 34 | 
 548 | 35 | 
 549 | 36 | 
 550 | 37 | 
 551 | 38 |     <!-- Reset Progress Button -->
 552 | 39 | <div class="flex flex-wrap justify-center items-center gap-4 mb-8">
 553 | 40 |   <button id="reset-progress" class="bg-red-500 text-white px-4 py-2 rounded-xl hover:bg-red-600 transition">
 554 | 41 |     🔁 Reset Progress
 555 | 42 |   </button>
 556 | 43 |   <a href="known-words.html" class="bg-indigo-600 text-white px-4 py-2 rounded-xl shadow hover:bg-indigo-700 transition">
 557 | 44 |     📚 Review Known Words
 558 | 45 |   </a>
 559 | 46 | </div>
 560 | 47 |     <div id="sets-container" class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 gap-6">
 561 | 48 |       <!-- Sets injected here -->
 562 | 49 |     </div>
 563 | 50 |   </div>
 564 | 51 | 
 565 | 52 |   <script src="https://cdn.jsdelivr.net/npm/xlsx@0.18.5/dist/xlsx.full.min.js"></script>
 566 | 53 |   <script src="index.js"></script>
 567 | 54 | 
 568 | 55 | 
 569 | 56 |   <footer class="text-center text-sm text-gray-500 mt-12 mb-6">
 570 | 57 |   <a href="/" class="text-blue-600 hover:underline">← Back to Home</a>
 571 | 58 |   <p class="mt-1">&copy; 2025 Jawad. All rights reserved.</p>
 572 | 59 | </footer>
 573 | 60 | 
 574 | 61 | <script type="module" src="/verifyAccess.js"></script>
 575 | 62 | 
 576 | 63 | 
 577 | 64 | 
 578 | 65 | </body>
 579 | 66 | </html>
 580 | 
 581 | 
 582 | --------------------------------------------------------------------------------
 583 | /Mukhosto/custom_practice/index.js:
 584 | --------------------------------------------------------------------------------
 585 |   1 | function getKnownWords() {
 586 |   2 |   return JSON.parse(localStorage.getItem("jawad2_knownWords") || "[]");
 587 |   3 | }
 588 |   4 | 
 589 |   5 | 
 590 |   6 | const chunkSize = 20;
 591 |   7 | const setsContainer = document.getElementById("sets-container");
 592 |   8 | const colorClasses = ['blue', 'green', 'purple', 'pink', 'yellow', 'red', 'indigo'];
 593 |   9 | 
 594 |  10 | // ⬇⬇ Handle uploaded file stored in localStorage ⬇⬇
 595 |  11 | function getCustomFileBuffer() {
 596 |  12 |   return new Promise((resolve, reject) => {
 597 |  13 | const base64 = localStorage.getItem("jawad2_uploadedXLSX");
 598 |  14 | 
 599 |  15 |     if (!base64) return reject("No custom Excel file uploaded.");
 600 |  16 |     const binary = atob(base64);
 601 |  17 |     const bytes = new Uint8Array(binary.length);
 602 |  18 |     for (let i = 0; i < binary.length; i++) {
 603 |  19 |       bytes[i] = binary.charCodeAt(i);
 604 |  20 |     }
 605 |  21 |     resolve(bytes.buffer);
 606 |  22 |   });
 607 |  23 | }
 608 |  24 | 
 609 |  25 | 
 610 |  26 | document.getElementById("download-sample").addEventListener("click", function() {
 611 |  27 |   const sampleData = [
 612 |  28 |     {
 613 |  29 |       FrontData: "Main-Word",
 614 |  30 |       BackData: "Word-Meaning",
 615 |  31 |       SubBack: "Defination",
 616 |  32 |       ExtraData1: "ExampleSentence1",
 617 |  33 |       ExtraData2: "ExampleSentence2"
 618 |  34 |     }
 619 |  35 |   ];
 620 |  36 | 
 621 |  37 |   const worksheet = XLSX.utils.json_to_sheet(sampleData);
 622 |  38 |   const workbook = XLSX.utils.book_new();
 623 |  39 |   XLSX.utils.book_append_sheet(workbook, worksheet, "Sample Vocabulary");
 624 |  40 | 
 625 |  41 |   XLSX.writeFile(workbook, "sample_vocabulary.xlsx");
 626 |  42 | });
 627 |  43 | 
 628 |  44 | 
 629 |  45 | document.addEventListener("DOMContentLoaded", () => {
 630 |  46 |   // 🟢 File upload handler
 631 |  47 |   const uploadInput = document.getElementById("upload-xlsx");
 632 |  48 |   if (uploadInput) {
 633 |  49 |     uploadInput.addEventListener("change", (event) => {
 634 |  50 |       const file = event.target.files[0];
 635 |  51 |       if (!file) return;
 636 |  52 | 
 637 |  53 |       const reader = new FileReader();
 638 |  54 |       reader.onload = function (e) {
 639 |  55 |         const base64 = btoa(
 640 |  56 |           new Uint8Array(e.target.result).reduce((data, byte) => data + String.fromCharCode(byte), "")
 641 |  57 |         );
 642 |  58 | localStorage.setItem("jawad2_uploadedXLSX", base64);
 643 |  59 | 
 644 |  60 |         alert("✅ File uploaded! Reloading sets...");
 645 |  61 |         location.reload();
 646 |  62 |       };
 647 |  63 |       reader.readAsArrayBuffer(file);
 648 |  64 |     });
 649 |  65 |   }
 650 |  66 | 
 651 |  67 |   // 🛑 Reset progress
 652 |  68 |   const resetBtn = document.getElementById("reset-progress");
 653 |  69 |   if (resetBtn) {
 654 |  70 |     resetBtn.addEventListener("click", () => {
 655 |  71 |       if (confirm("Reset known word progress and uploaded file?")) {
 656 |  72 | localStorage.removeItem("jawad2_knownWords");
 657 |  73 | localStorage.removeItem("jawad2_uploadedXLSX");
 658 |  74 | 
 659 |  75 |         location.reload();
 660 |  76 |       }
 661 |  77 |     });
 662 |  78 |   }
 663 |  79 | 
 664 |  80 |   // 🔄 Load and build sets from uploaded file
 665 |  81 |   getCustomFileBuffer()
 666 |  82 |     .then(buffer => {
 667 |  83 |       const workbook = XLSX.read(buffer, { type: "array" });
 668 |  84 |       const sheet = workbook.Sheets[workbook.SheetNames[0]];
 669 |  85 |       const data = XLSX.utils.sheet_to_json(sheet);
 670 |  86 |       const knownWords = getKnownWords();
 671 |  87 |       const totalWords = data.filter(row => row["FrontData"]).length;
 672 |  88 | 
 673 |  89 |       for (let i = 0; i < Math.ceil(totalWords / chunkSize); i++) {
 674 |  90 |         const start = i * chunkSize;
 675 |  91 |         const end = Math.min((i + 1) * chunkSize, totalWords);
 676 |  92 | 
 677 |  93 |         const selectedRows = data.slice(start, end)
 678 |  94 |           .filter(row => row["FrontData"] && !knownWords.includes(row["FrontData"]));
 679 |  95 | 
 680 |  96 |         const color = colorClasses[i % colorClasses.length];
 681 |  97 | 
 682 |  98 | 
 683 |  99 | 
 684 | 100 | 
 685 | 101 | const sliceRows = data.slice(start, end).filter(r => r["FrontData"]);
 686 | 102 | const totalInSet = sliceRows.length;
 687 | 103 | const knownInSet = sliceRows.filter(r => knownWords.includes(r["FrontData"])).length;
 688 | 104 | const pct = totalInSet ? Math.round((knownInSet / totalInSet) * 100) : 0;
 689 | 105 | 
 690 | 106 | const card = document.createElement('div');
 691 | 107 | card.className = `bg-white p-6 rounded-2xl shadow-md hover:shadow-xl transition`;
 692 | 108 | 
 693 | 109 | card.innerHTML = `
 694 | 110 |   <h2 class="text-2xl font-semibold text-${color}-600 mb-2">Set ${i + 1}</h2>
 695 | 111 |   <p class="text-gray-500 mb-2">Words ${start + 1} – ${end}</p>
 696 | 112 | 
 697 | 113 |   <div class="w-full bg-gray-200 rounded-full h-2 mb-2">
 698 | 114 |     <div class="bg-${color}-600 h-2 rounded-full" style="width: ${pct}%;"></div>
 699 | 115 |   </div>
 700 | 116 |   <p class="text-sm text-gray-600 mb-4">${knownInSet}/${totalInSet} known (${pct}%)</p>
 701 | 117 | 
 702 | 118 |   ${
 703 | 119 |     knownInSet < totalInSet
 704 | 120 |       ? `<a href="flashcard.html?start=${start + 1}&end=${end}&reverse=${document.getElementById('reverse-toggle')?.checked ? '1' : '0'}" ...
 705 | 121 |  class="inline-block bg-${color}-600 text-white px-4 py-2 rounded-xl">Start</a>`
 706 | 122 |       : `<div class="text-green-600 font-semibold">✅ Completed</div>`
 707 | 123 |   }
 708 | 124 | `;
 709 | 125 | 
 710 | 126 | setsContainer.appendChild(card);
 711 | 127 | 
 712 | 128 | 
 713 | 129 | 
 714 | 130 | 
 715 | 131 | 
 716 | 132 |         
 717 | 133 |       }
 718 | 134 | 
 719 | 135 |       if (totalWords === 0) {
 720 | 136 |         setsContainer.innerHTML = `<p class="text-green-600">🎉 No words available. Please upload a new file.</p>`;
 721 | 137 |       }
 722 | 138 |     })
 723 | 139 |     .catch(err => {
 724 | 140 |       setsContainer.innerHTML = `<p class="text-red-500">⚠️ Error loading file: ${err}</p>`;
 725 | 141 |     });
 726 | 142 | });
 727 | 143 | 
 728 | 
 729 | 
 730 | --------------------------------------------------------------------------------
 731 | /Mukhosto/custom_practice/known-words.html:
 732 | --------------------------------------------------------------------------------
 733 |   1 | <!DOCTYPE html>
 734 |   2 | <html lang="en">
 735 |   3 | <head>
 736 |   4 |   <meta charset="UTF-8" />
 737 |   5 |   <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
 738 |   6 |   <title>Known Vocabulary Flashcards</title>
 739 |   7 |   <link rel="stylesheet" href="style.css">
 740 |   8 |   <script src="https://cdn.jsdelivr.net/npm/xlsx@0.18.5/dist/xlsx.full.min.js"></script>
 741 |   9 | </head>
 742 |  10 | <body>
 743 |  11 |   <button onclick="exportKnownWords()" class="nav-buttons" style="margin-bottom: 20px;">⬇ Export Known Words</button>
 744 |  12 |   <input type="file" id="import-file" accept=".xlsx" style="display: none;" onchange="importKnownWords(event)">
 745 |  13 |   <button onclick="document.getElementById('import-file').click()" class="nav-buttons">⬆ Import Known Words</button>
 746 |  14 | 
 747 |  15 |   <h1>
 748 |  16 |     <a href="/vocabulary" style="color: inherit; text-decoration: none;">
 749 |  17 |       Known Vocabulary Flashcards
 750 |  18 |     </a>
 751 |  19 |   </h1>
 752 |  20 | 
 753 |  21 |   <div class="flex justify-center mb-4">
 754 |  22 |     <label class="flex items-center space-x-2 text-sm text-gray-700">
 755 |  23 |       <input type="checkbox" id="reverse-toggle" class="accent-blue-600">
 756 |  24 |       <span>Reverse Practice</span>
 757 |  25 |     </label>
 758 |  26 |   </div>
 759 |  27 | 
 760 |  28 |   <label>
 761 |  29 |     <input type="checkbox" id="toggle-extra" onchange="toggleExtras()" />
 762 |  30 |     Show Extra Data
 763 |  31 |   </label>
 764 |  32 | 
 765 |  33 |   <button onclick="shuffleFlashcards()" class="nav-buttons" style="margin-top: 10px;">🔀 Shuffle Cards</button>
 766 |  34 | 
 767 |  35 |   <div id="flashcard-container" class="flashcard-container"></div>
 768 |  36 | 
 769 |  37 |   <div class="button-container">
 770 |  38 |     <button class="nav-buttons" onclick="showPrevious()">Previous</button>
 771 |  39 |     <button class="nav-buttons" onclick="showNext()" id="next-button">Next</button>
 772 |  40 |   </div>
 773 |  41 | 
 774 |  42 |   <div class="counter" id="card-counter">1/0</div>
 775 |  43 | 
 776 |  44 |   <script>
 777 |  45 |     let flashcards = [];
 778 |  46 |     let currentCardIndex = 0;
 779 |  47 |     let showExtraData = false;
 780 |  48 | 
 781 |  49 |     // namespaced localStorage key
 782 |  50 |     function isReverseMode() {
 783 |  51 |       return localStorage.getItem("reversePractice") === "1";
 784 |  52 |     }
 785 |  53 | 
 786 |  54 |     document.addEventListener("DOMContentLoaded", () => {
 787 |  55 |       const toggle = document.getElementById("reverse-toggle");
 788 |  56 |       if (!toggle) return;
 789 |  57 | 
 790 |  58 |       // initialize from saved setting
 791 |  59 |       toggle.checked = isReverseMode();
 792 |  60 | 
 793 |  61 |       toggle.addEventListener("change", () => {
 794 |  62 |         localStorage.setItem("reversePractice", toggle.checked ? "1" : "0");
 795 |  63 |         // reload with same flashcard parameters
 796 |  64 |         const params = new URLSearchParams(window.location.search);
 797 |  65 |         params.set("reverse", toggle.checked ? "1" : "0");
 798 |  66 |         window.location.search = params.toString();
 799 |  67 |       });
 800 |  68 |     });
 801 |  69 | 
 802 |  70 |     function getCustomFileBuffer() {
 803 |  71 |       return new Promise((resolve, reject) => {
 804 |  72 |         const base64 = localStorage.getItem("jawad2_uploadedXLSX");
 805 |  73 |         if (!base64) return reject("No custom Excel file uploaded.");
 806 |  74 |         const binary = atob(base64);
 807 |  75 |         const bytes = new Uint8Array(binary.length);
 808 |  76 |         for (let i = 0; i < binary.length; i++) {
 809 |  77 |           bytes[i] = binary.charCodeAt(i);
 810 |  78 |         }
 811 |  79 |         resolve(bytes.buffer);
 812 |  80 |       });
 813 |  81 |     }
 814 |  82 | 
 815 |  83 |     // Get known words from localStorage
 816 |  84 |     function getKnownWords() {
 817 |  85 |       return JSON.parse(localStorage.getItem("jawad2_knownWords") || "[]");
 818 |  86 |     }
 819 |  87 | 
 820 |  88 | 
 821 |  89 | document.addEventListener('keydown', (e) => {
 822 |  90 |   if (e.key === "ArrowRight") {
 823 |  91 |     showNext();
 824 |  92 |   } else if (e.key === "ArrowLeft") {
 825 |  93 |     showPrevious();
 826 |  94 |   } else if (e.key === " " || e.key === "Enter") {
 827 |  95 |     e.preventDefault(); // stop page from scrolling
 828 |  96 |     const card = document.querySelector(".flashcard");
 829 |  97 |     if (card) flipCard(card);
 830 |  98 |   }
 831 |  99 | });
 832 | 100 | 
 833 | 101 | 
 834 | 102 |     // Load only known words into flashcards
 835 | 103 |     window.addEventListener("DOMContentLoaded", () => {
 836 | 104 |       getCustomFileBuffer()
 837 | 105 |         .then(buffer => {
 838 | 106 |           const workbook = XLSX.read(buffer, { type: "array" });
 839 | 107 |           const sheet = workbook.Sheets[workbook.SheetNames[0]];
 840 | 108 |           const json = XLSX.utils.sheet_to_json(sheet);
 841 | 109 | 
 842 | 110 |           const knownWords = JSON.parse(localStorage.getItem("jawad2_knownWords") || "[]");
 843 | 111 |           const knownRows = json.filter(row => knownWords.includes(row["FrontData"]));
 844 | 112 |           const reverse = isReverseMode();
 845 | 113 |           flashcards = knownRows
 846 | 114 |             .map(row => ({
 847 | 115 |               front: reverse ? (row["BackData"] || "") : (row["FrontData"] || ""),
 848 | 116 |               back: reverse ? (row["FrontData"] || "") : (row["BackData"] || ""),
 849 | 117 |               subBack: row["SubBack"] || "",
 850 | 118 |               extras: Object.keys(row)
 851 | 119 |                 .filter(k => k.startsWith("ExtraData"))
 852 | 120 |                 .map(k => row[k])
 853 | 121 |             }));
 854 | 122 | 
 855 | 123 |           // Don't shuffle at this point, wait for shuffle button
 856 | 124 |           createFlashcard();
 857 | 125 |         })
 858 | 126 |         .catch(err => {
 859 | 127 |           document.getElementById("flashcard-container").innerHTML = `<p>Error loading file: ${err}</p>`;
 860 | 128 |         });
 861 | 129 |     });
 862 | 130 | 
 863 | 131 |     function createFlashcard() {
 864 | 132 |       const container = document.getElementById("flashcard-container");
 865 | 133 |       container.innerHTML = "";
 866 | 134 | 
 867 | 135 |       if (flashcards.length === 0) {
 868 | 136 |         container.innerHTML = "<p>No known words to review!</p>";
 869 | 137 |         return;
 870 | 138 |       }
 871 | 139 | 
 872 | 140 |       const card = flashcards[currentCardIndex];
 873 | 141 |       const cardDiv = document.createElement("div");
 874 | 142 |       cardDiv.classList.add("flashcard");
 875 | 143 | 
 876 | 144 |       let extrasHTML = "";
 877 | 145 |       if (showExtraData && card.extras.length > 0) {
 878 | 146 |         extrasHTML = `<div class="extras">${card.extras.join("<br>")}</div>`;
 879 | 147 |       }
 880 | 148 | 
 881 | 149 | cardDiv.innerHTML = `
 882 | 150 |   <div class="card-inner">
 883 | 151 |     <div class="card-front">
 884 | 152 |       <button class="remove-btn" onclick="event.stopPropagation(); removeCurrentCard()">✖️</button>
 885 | 153 |       <span class="word">${card.front}</span>
 886 | 154 |       <button class="pronunciation-btn" onclick="event.stopPropagation(); pronounce('${card.front}')">🔊</button>
 887 | 155 |     </div>
 888 | 156 |     <div class="card-back">
 889 | 157 |       <div class="meaning">${card.back}</div>
 890 | 158 |       <button class="pronunciation-btn" onclick="event.stopPropagation(); pronounce('${card.back}')">🔊</button>
 891 | 159 |       ${card.subBack ? `<em class="sub-definition">${card.subBack}</em>` : ""}
 892 | 160 |       ${showExtraData && card.extras.length > 0
 893 | 161 |         ? `<div class="extras">${card.extras.map((e, i) => `${i + 1}. ${e}`).join("<br>")}</div>`
 894 | 162 |         : ""}
 895 | 163 |     </div>
 896 | 164 |   </div>
 897 | 165 | `;
 898 | 166 | 
 899 | 167 | 
 900 | 168 |       cardDiv.onclick = () => flipCard(cardDiv);
 901 | 169 |       container.appendChild(cardDiv);
 902 | 170 | 
 903 | 171 |       updateCardCounter();
 904 | 172 |     }
 905 | 173 | 
 906 | 174 |     function flipCard(cardElement) {
 907 | 175 |       const inner = cardElement.querySelector(".card-inner");
 908 | 176 |       inner.classList.toggle("is-flipped");
 909 | 177 |     }
 910 | 178 | 
 911 | 179 |   function removeCurrentCard() {
 912 | 180 |   const card = flashcards[currentCardIndex];
 913 | 181 |   if (!card) return;
 914 | 182 | 
 915 | 183 |   let knownWords = getKnownWords();
 916 | 184 |   const wordToRemove = isReverseMode() ? card.back : card.front;
 917 | 185 |   knownWords = knownWords.filter(w => w !== wordToRemove);
 918 | 186 |   localStorage.setItem("jawad2_knownWords", JSON.stringify(knownWords));
 919 | 187 | 
 920 | 188 |   flashcards.splice(currentCardIndex, 1);
 921 | 189 | 
 922 | 190 |   if (currentCardIndex >= flashcards.length) {
 923 | 191 |     currentCardIndex = flashcards.length - 1;
 924 | 192 |   }
 925 | 193 | 
 926 | 194 |   if (flashcards.length === 0) {
 927 | 195 |     document.getElementById("flashcard-container").innerHTML = "<p>No known words to review!</p>";
 928 | 196 |     document.getElementById("card-counter").textContent = "0/0";
 929 | 197 |   } else {
 930 | 198 |     createFlashcard();
 931 | 199 |   }
 932 | 200 | }
 933 | 201 | 
 934 | 202 | 
 935 | 203 |     function showNext() {
 936 | 204 |       if (currentCardIndex < flashcards.length - 1) {
 937 | 205 |         currentCardIndex++;
 938 | 206 |         createFlashcard();
 939 | 207 |       } else {
 940 | 208 |         document.getElementById("next-button").textContent = "Exit";
 941 | 209 |         document.getElementById("next-button").onclick = () => {
 942 | 210 |           window.location.href = "/custom_practice";
 943 | 211 |         };
 944 | 212 |       }
 945 | 213 |     }
 946 | 214 | 
 947 | 215 |     function showPrevious() {
 948 | 216 |       if (currentCardIndex > 0) {
 949 | 217 |         currentCardIndex--;
 950 | 218 |         createFlashcard();
 951 | 219 |       }
 952 | 220 |     }
 953 | 221 | 
 954 | 222 |     function updateCardCounter() {
 955 | 223 |       document.getElementById("card-counter").textContent = `${currentCardIndex + 1}/${flashcards.length}`;
 956 | 224 |     }
 957 | 225 | 
 958 | 226 |     function toggleExtras() {
 959 | 227 |       showExtraData = document.getElementById("toggle-extra").checked;
 960 | 228 |       createFlashcard(); // re-render with new state
 961 | 229 |     }
 962 | 230 | 
 963 | 231 |     function pronounce(word) {
 964 | 232 |       const utterance = new SpeechSynthesisUtterance(word);
 965 | 233 |       window.speechSynthesis.speak(utterance);
 966 | 234 |     }
 967 | 235 | 
 968 | 236 |     function shuffleFlashcards() {
 969 | 237 |       flashcards = flashcards.sort(() => Math.random() - 0.5); // shuffle when clicked
 970 | 238 |       currentCardIndex = 0; // reset to the first card
 971 | 239 |       createFlashcard();
 972 | 240 |     }
 973 | 241 | 
 974 | 242 |     function importKnownWords(event) {
 975 | 243 |       const file = event.target.files[0];
 976 | 244 |       if (!file) return;
 977 | 245 | 
 978 | 246 |       const reader = new FileReader();
 979 | 247 |       reader.onload = function (e) {
 980 | 248 |         const data = new Uint8Array(e.target.result);
 981 | 249 |         const workbook = XLSX.read(data, { type: 'array' });
 982 | 250 |         const sheet = workbook.Sheets[workbook.SheetNames[0]];
 983 | 251 |         const json = XLSX.utils.sheet_to_json(sheet);
 984 | 252 | 
 985 | 253 |         const importedWords = json.map(row => row["FrontData"]).filter(Boolean);
 986 | 254 | 
 987 | 255 |         if (importedWords.length > 0) {
 988 | 256 |           localStorage.setItem("jawad2_knownWords", JSON.stringify(importedWords));
 989 | 257 |           alert("Known words imported successfully!");
 990 | 258 |           location.reload(); // Optional: Refresh to reflect new state
 991 | 259 |         } else {
 992 | 260 |           alert("No valid known words found in the file.");
 993 | 261 |         }
 994 | 262 |       };
 995 | 263 |       reader.readAsArrayBuffer(file);
 996 | 264 |     }
 997 | 265 | 
 998 | 266 | function exportKnownWords() {
 999 | 267 |   const knownWords = getKnownWords();
1000 | 268 | 
1001 | 269 |   if (knownWords.length === 0) {
1002 | 270 |     alert("No known words to export!");
1003 | 271 |     return;
1004 | 272 |   }
1005 | 273 | 
1006 | 274 |   const rows = knownWords.map(word => [word]); // Just one column without header
1007 | 275 | 
1008 | 276 |   const worksheet = XLSX.utils.aoa_to_sheet(rows);
1009 | 277 |   const workbook = XLSX.utils.book_new();
1010 | 278 |   XLSX.utils.book_append_sheet(workbook, worksheet, "Known Words");
1011 | 279 | 
1012 | 280 |   XLSX.writeFile(workbook, "known_words.xlsx");
1013 | 281 | }
1014 | 282 | 
1015 | 283 | 
1016 | 284 | 
1017 | 285 |   </script>
1018 | 286 | 
1019 | 287 |   <br> <br> <br> <br>
1020 | 288 |   <footer class="text-center text-sm text-gray-500 mt-12 mb-6">
1021 | 289 |     <a href="/" class="text-blue-600 hover:underline">← Back to Home</a>
1022 | 290 |     <p class="mt-1">&copy; 2025 Mukhosto.com | All rights reserved.</p>
1023 | 291 |   </footer>
1024 | 292 | 
1025 | 293 |   <script type="module" src="/verifyAccess.js"></script>
1026 | 294 | 
1027 | 295 | </body>
1028 | 296 | </html>
1029 | 297 | 
1030 | 
1031 | 
1032 | --------------------------------------------------------------------------------
1033 | /Mukhosto/custom_practice/style.css:
1034 | --------------------------------------------------------------------------------
1035 |   1 | body {
1036 |   2 |   font-family: Arial, sans-serif;
1037 |   3 |   background-color: #f4f4f4;
1038 |   4 |   text-align: center;
1039 |   5 |   margin: 0;
1040 |   6 |   padding: 0;
1041 |   7 | }
1042 |   8 | 
1043 |   9 | .flashcard-container {
1044 |  10 |   display: flex;
1045 |  11 |   justify-content: center;
1046 |  12 |   align-items: center;
1047 |  13 |   margin-top: 40px;
1048 |  14 |   min-height: 300px;
1049 |  15 | }
1050 |  16 | 
1051 |  17 | .flashcard {
1052 |  18 |   width: 320px;
1053 |  19 |   height: 220px;
1054 |  20 |   perspective: 1000px;
1055 |  21 | }
1056 |  22 | 
1057 |  23 | .card-inner {
1058 |  24 |   width: 100%;
1059 |  25 |   height: 100%;
1060 |  26 |   position: relative;
1061 |  27 |   transform-style: preserve-3d;
1062 |  28 |   transition: transform 0.6s ease;
1063 |  29 | }
1064 |  30 | 
1065 |  31 | .card-inner.is-flipped {
1066 |  32 |   transform: rotateY(180deg);
1067 |  33 | }
1068 |  34 | 
1069 |  35 | .card-front, .card-back {
1070 |  36 |   position: absolute;
1071 |  37 |   top: 0;
1072 |  38 |   left: 0;
1073 |  39 |   width: 100%;
1074 |  40 |   height: 100%;
1075 |  41 |   backface-visibility: hidden;
1076 |  42 |   background-color: #fff;
1077 |  43 |   border: 2px solid #ddd;
1078 |  44 |   border-radius: 12px;
1079 |  45 |   box-sizing: border-box;
1080 |  46 |   padding: 20px;
1081 |  47 |   display: flex;
1082 |  48 |   justify-content: center;
1083 |  49 |   align-items: center;
1084 |  50 |   flex-direction: column;
1085 |  51 |   box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
1086 |  52 | }
1087 |  53 | 
1088 |  54 | .card-front {
1089 |  55 |   font-size: 28px;
1090 |  56 |   z-index: 2;
1091 |  57 | }
1092 |  58 | 
1093 |  59 | .card-back {
1094 |  60 |   transform: rotateY(180deg);
1095 |  61 |   font-size: 18px;
1096 |  62 |   z-index: 1;
1097 |  63 | }
1098 |  64 | 
1099 |  65 | .button-container {
1100 |  66 |   margin-top: 20px;
1101 |  67 | }
1102 |  68 | 
1103 |  69 | .nav-buttons, .known-btn {
1104 |  70 |   background-color: #4CAF50;
1105 |  71 |   color: white;
1106 |  72 |   padding: 10px 20px;
1107 |  73 |   border: none;
1108 |  74 |   font-size: 16px;
1109 |  75 |   margin: 5px;
1110 |  76 |   border-radius: 8px;
1111 |  77 |   cursor: pointer;
1112 |  78 | }
1113 |  79 | 
1114 |  80 | .known-btn {
1115 |  81 |   background-color: #ff9800;
1116 |  82 |   margin-top: 12px;
1117 |  83 | }
1118 |  84 | 
1119 |  85 | .counter {
1120 |  86 |   font-size: 16px;
1121 |  87 |   margin-top: 10px;
1122 |  88 |   color: #555;
1123 |  89 | }
1124 |  90 | 
1125 |  91 | .pronunciation-btn {
1126 |  92 |   background: none;
1127 |  93 |   border: none;
1128 |  94 |   font-size: 20px;
1129 |  95 |   position: absolute;
1130 |  96 |   top: 10px;
1131 |  97 |   right: 10px;
1132 |  98 |   cursor: pointer;
1133 |  99 | }
1134 | 100 | 
1135 | 101 | .extras {
1136 | 102 |   margin-top: 10px;
1137 | 103 |   padding: 8px;
1138 | 104 |   background-color: #f9f9f9;
1139 | 105 |   border-radius: 6px;
1140 | 106 |   font-size: 12px;
1141 | 107 |   color: #444;
1142 | 108 | }
1143 | 109 | 
1144 | 110 | .known-icon {
1145 | 111 |   position: absolute;
1146 | 112 |   top: 10px;
1147 | 113 |   left: 10px;
1148 | 114 |   background-color: rgba(255, 255, 255, 0.1);
1149 | 115 |   border: 2px solid #4CAF50;
1150 | 116 |   border-radius: 50%;
1151 | 117 |   padding: 6px;
1152 | 118 |   font-size: 16px;
1153 | 119 |   cursor: pointer;
1154 | 120 |   z-index: 3;
1155 | 121 |   transition: background-color 0.2s, transform 0.2s;
1156 | 122 | }
1157 | 123 | 
1158 | 124 | .known-icon:hover {
1159 | 125 |   background-color: rgba(76, 175, 80, 0.2);
1160 | 126 |   transform: scale(1.1);
1161 | 127 | }
1162 | 128 | 
1163 | 129 | 
1164 | 130 | .word {
1165 | 131 |   font-size: 28px;        /* was 36px */
1166 | 132 |   font-weight: bold;
1167 | 133 |   color: #333;
1168 | 134 |   padding: 16px 8px;
1169 | 135 | }
1170 | 136 | 
1171 | 137 | .card-back .meaning {
1172 | 138 |   font-size: 18px;        /* was 20px */
1173 | 139 |   font-weight: bold;
1174 | 140 |   color: #1e3a8a;
1175 | 141 |   margin-bottom: 10px;
1176 | 142 | }
1177 | 143 | 
1178 | 144 | .sub-definition {
1179 | 145 |   font-size: 14px;        /* was 16px */
1180 | 146 |   color: #777;
1181 | 147 |   display: block;
1182 | 148 |   margin-bottom: 8px;
1183 | 149 | }
1184 | 150 | 
1185 | 151 | .card-back .extras {
1186 | 152 |   font-size: 12px;        /* was 13px */
1187 | 153 |   color: #444;
1188 | 154 |   background-color: #f3f3f3;
1189 | 155 |   padding: 8px;
1190 | 156 |   border-radius: 8px;
1191 | 157 |   text-align: left;
1192 | 158 | }
1193 | 159 | 
1194 | 160 | 
1195 | 161 | .top-controls {
1196 | 162 |   margin: 20px 0;
1197 | 163 | }
1198 | 164 | 
1199 | 165 | .shuffle-button {
1200 | 166 |   background-color: #3498db;
1201 | 167 |   color: white;
1202 | 168 |   padding: 10px 20px;
1203 | 169 |   font-size: 16px;
1204 | 170 |   border: none;
1205 | 171 |   border-radius: 8px;
1206 | 172 |   cursor: pointer;
1207 | 173 | }
1208 | 174 | 
1209 | 175 | .shuffle-button:hover {
1210 | 176 |   background-color: #2980b9;
1211 | 177 | }
1212 | 178 | 
1213 | 179 | 
1214 | 180 | .top-controls {
1215 | 181 |   margin: 20px 0;
1216 | 182 | }
1217 | 183 | 
1218 | 184 | .shuffle-button {
1219 | 185 |   background-color: #3498db;
1220 | 186 |   color: white;
1221 | 187 |   padding: 10px 20px;
1222 | 188 |   font-size: 16px;
1223 | 189 |   border: none;
1224 | 190 |   border-radius: 8px;
1225 | 191 |   cursor: pointer;
1226 | 192 | }
1227 | 193 | 
1228 | 194 | .shuffle-button:hover {
1229 | 195 |   background-color: #2980b9;
1230 | 196 | }
1231 | 197 | 
1232 | 198 | .extras p {
1233 | 199 |   margin: 4px 0;
1234 | 200 |   padding: 0;
1235 | 201 |   font-size: 12px;
1236 | 202 |   color: #444;
1237 | 203 | }
1238 | 204 | 
1239 | 205 | .flashcard {
1240 | 206 |   position: relative; /* make sure the card is positioned */
1241 | 207 | }
1242 | 208 | 
1243 | 209 | .remove-btn {
1244 | 210 |   position: absolute;
1245 | 211 |   top: 10px;
1246 | 212 |   left: 10px;
1247 | 213 |   background: none;
1248 | 214 |   border: none;
1249 | 215 |   font-size: 24px;
1250 | 216 |   cursor: pointer;
1251 | 217 |   color: #f44336;
1252 | 218 |   z-index: 10;
1253 | 219 | }
1254 | 220 | .remove-btn:hover {
1255 | 221 |   color: #c62828;
1256 | 222 | }
1257 | 223 | 
1258 | 
1259 | 
1260 | --------------------------------------------------------------------------------
1261 | /Mukhosto/icons/logo.png:
1262 | --------------------------------------------------------------------------------
1263 | https://raw.githubusercontent.com/ImJawadHossain/Mukhosto/3b9cd86196504288837847efb9850d47317864c7/Mukhosto/icons/logo.png
1264 | 
1265 | 
1266 | --------------------------------------------------------------------------------
1267 | /Mukhosto/index.html:
1268 | --------------------------------------------------------------------------------
1269 |   1 | <!DOCTYPE html>
1270 |   2 | <html lang="en">
1271 |   3 | <head>
1272 |   4 |   <meta charset="UTF-8" />
1273 |   5 |   <meta name="viewport" content="width=device-width, initial-scale=1.0" />
1274 |   6 |   <title>English Practice Hub</title>
1275 |   7 |   <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
1276 |   8 |   <script src="https://unpkg.com/lucide@latest"></script>
1277 |   9 |   <script src="https://www.gstatic.com/firebasejs/9.22.2/firebase-app.js"></script>
1278 |  10 |   <script src="https://www.gstatic.com/firebasejs/9.22.2/firebase-auth.js"></script>
1279 |  11 |   <script src="https://www.gstatic.com/firebasejs/9.22.2/firebase-firestore.js"></script>
1280 |  12 |   <link rel="manifest" href="/manifest.json" />
1281 |  13 |   <meta name="theme-color" content="#1e40af">
1282 |  14 | 
1283 |  15 | </head>
1284 |  16 | <body class="bg-gray-50 min-h-screen py-10 px-4">
1285 |  17 | 
1286 |  18 |   <!-- 🔝 Profile Dropdown -->
1287 |  19 |   <div class="absolute top-4 right-6">
1288 |  20 |     <div class="relative inline-block text-left">
1289 |  21 |       <button id="profile-button" class="flex items-center space-x-2 px-3 py-2 bg-white border border-gray-200 rounded-full shadow-sm hover:bg-gray-100 transition">
1290 |  22 |         <img id="profile-avatar" src="" alt="Avatar" class="w-8 h-8 rounded-full" />
1291 |  23 |         <span id="user-name" class="text-sm font-medium text-gray-700">Loading...</span>
1292 |  24 |         <span id="access-badge" class="ml-2 text-xs font-semibold px-2 py-0.5 rounded hidden"></span>
1293 |  25 |         <svg class="w-4 h-4 text-gray-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
1294 |  26 |           <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7" />
1295 |  27 |         </svg>
1296 |  28 |       </button>
1297 |  29 | 
1298 |  30 |       <div id="dropdown-menu" class="hidden absolute right-0 mt-2 w-48 bg-white border border-gray-200 rounded-lg shadow-lg z-50">
1299 |  31 |         <a href="/profile.html" class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100">View Profile</a>
1300 |  32 |         <a id="access-status-link" href="#" class="block px-4 py-2 text-sm font-medium rounded"></a>
1301 |  33 |         <a href="/custom_practice" class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100">Custom Practice</a>
1302 |  34 |         <button id="logout-btn" class="w-full text-left px-4 py-2 text-sm text-red-600 hover:bg-gray-100">Logout</button>
1303 |  35 | 
1304 |  36 |       </div>
1305 |  37 |     </div>
1306 |  38 |   </div>
1307 |  39 | 
1308 |  40 |   <!-- 💡 Main Content -->
1309 |  41 |   <div class="max-w-5xl mx-auto text-center">
1310 |  42 |     <h1 class="text-4xl font-bold mb-4"><br>Mukhosto.com | Memorization Tools</h1>
1311 |  43 |     <p class="text-lg text-gray-600 mb-10">Sharpen your English skills — one click at a time!</p>
1312 |  44 | 
1313 |  45 |   <div id="install-container" class="fixed bottom-6 right-6 hidden">
1314 |  46 |   <button id="install-button" class="bg-blue-600 text-white px-4 py-2 rounded-lg shadow-md hover:bg-blue-700 transition">
1315 |  47 |     📲 Install App
1316 |  48 |   </button>
1317 |  49 | </div>
1318 |  50 | 
1319 |  51 | 
1320 |  52 |     <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-6">
1321 |  53 |       <div class="rounded-2xl shadow-md hover:shadow-lg transition bg-white p-6 flex flex-col items-center text-center">
1322 |  54 |         <i data-lucide="book-open" class="w-8 h-8 text-blue-600"></i>
1323 |  55 |         <h2 class="text-xl font-semibold mt-4 mb-2">Vocabulary Practice</h2>
1324 |  56 |         <p class="text-sm text-gray-500 mb-4">Expand your word power with focused vocabulary exercises.</p>
1325 |  57 |         <a href="/vocabulary" class="bg-blue-600 text-white px-4 py-2 rounded-xl">Start Practicing</a>
1326 |  58 |       </div>
1327 |  59 | 
1328 |  60 |       <div class="rounded-2xl shadow-md hover:shadow-lg transition bg-white p-6 flex flex-col items-center text-center">
1329 |  61 |         <i data-lucide="repeat" class="w-8 h-8 text-green-600"></i>
1330 |  62 |         <h2 class="text-xl font-semibold mt-4 mb-2">Prepositions Practice</h2>
1331 |  63 |         <p class="text-sm text-gray-500 mb-4">Master the usage of prepositions with guided practice.</p>
1332 |  64 |         <a href="/prepositions" class="bg-green-600 text-white px-4 py-2 rounded-xl">Start Practicing</a>
1333 |  65 |       </div>
1334 |  66 | 
1335 |  67 |       <div class="rounded-2xl shadow-md hover:shadow-lg transition bg-white p-6 flex flex-col items-center text-center">
1336 |  68 |         <i data-lucide="message-circle" class="w-8 h-8 text-purple-600"></i>
1337 |  69 |         <h2 class="text-xl font-semibold mt-4 mb-2">Idioms Practice</h2>
1338 |  70 |         <p class="text-sm text-gray-500 mb-4">Learn common idioms to sound more like a native speaker.</p>
1339 |  71 |         <a href="/idioms" class="bg-purple-600 text-white px-4 py-2 rounded-xl">Start Practicing</a>
1340 |  72 |       </div>
1341 |  73 | 
1342 |  74 |       <div class="rounded-2xl shadow-md hover:shadow-lg transition bg-white p-6 flex flex-col items-center text-center">
1343 |  75 |         <i data-lucide="scroll-text" class="w-8 h-8 text-yellow-600"></i>
1344 |  76 |         <h2 class="text-xl font-semibold mt-4 mb-2">Proverbs Practice</h2>
1345 |  77 |         <p class="text-sm text-gray-500 mb-4">Understand traditional wisdom with engaging proverb activities.</p>
1346 |  78 |         <a href="/proverbs" class="bg-yellow-600 text-white px-4 py-2 rounded-xl">Start Practicing</a>
1347 |  79 |       </div>
1348 |  80 |       
1349 |  81 |       
1350 |  82 |       <div class="rounded-2xl shadow-md hover:shadow-lg transition bg-white p-6 flex flex-col items-center text-center">
1351 |  83 |         <i data-lucide="scroll-text" class="w-8 h-8 text-yellow-600"></i>
1352 |  84 |         <h2 class="text-xl font-semibold mt-4 mb-2">Formula Practice</h2>
1353 |  85 |         <p class="text-sm text-gray-500 mb-4">Practice Formulas </p>
1354 |  86 |         <a href="/formula" class="bg-yellow-600 text-white px-4 py-2 rounded-xl">Start Practicing</a>
1355 |  87 |       </div>
1356 |  88 | 
1357 |  89 |       <div class="rounded-2xl shadow-md hover:shadow-lg transition bg-white p-6 flex flex-col items-center text-center">
1358 |  90 |         <i data-lucide="message-circle" class="w-8 h-8 text-purple-600"></i>
1359 |  91 |         <h2 class="text-xl font-semibold mt-4 mb-2">Important Preposition</h2>
1360 |  92 |         <p class="text-sm text-gray-500 mb-4">Learn common Important Preopsition to sound more like a native speaker.</p>
1361 |  93 |         <a href="/important_preposition" class="bg-purple-600 text-white px-4 py-2 rounded-xl">Start Practicing</a>
1362 |  94 |       </div>
1363 |  95 | 
1364 |  96 |       <div class="rounded-2xl shadow-md hover:shadow-lg transition bg-white p-6 flex flex-col items-center text-center">
1365 |  97 |         <i data-lucide="scroll-text" class="w-8 h-8 text-yellow-600"></i>
1366 |  98 |         <h2 class="text-xl font-semibold mt-4 mb-2">Important Synonym & Antonyms</h2>
1367 |  99 |         <p class="text-sm text-gray-500 mb-4">Understand traditional wisdom with engaging proverb activities.</p>
1368 | 100 |         <a href="/important_synonym" class="bg-yellow-600 text-white px-4 py-2 rounded-xl">Start Practicing</a>
1369 | 101 |       </div>
1370 | 102 | 
1371 | 103 | 
1372 | 104 | 
1373 | 105 | 
1374 | 106 | 
1375 | 107 |       <div class="rounded-2xl shadow-md hover:shadow-lg transition bg-white p-6 flex flex-col items-center text-center">
1376 | 108 |         <i data-lucide="scroll-text" class="w-8 h-8 text-yellow-600"></i>
1377 | 109 |         <h2 class="text-xl font-semibold mt-4 mb-2">Important Idioms</h2>
1378 | 110 |         <p class="text-sm text-gray-500 mb-4">Understand traditional wisdom with engaging proverb activities.</p>
1379 | 111 |         <a href="/important_idiom" class="bg-yellow-600 text-white px-4 py-2 rounded-xl">Start Practicing</a>
1380 | 112 |       </div>
1381 | 113 | 
1382 | 114 | 
1383 | 115 | 
1384 | 116 | 
1385 | 117 |       <div class="rounded-2xl shadow-md hover:shadow-lg transition bg-white p-6 flex flex-col items-center text-center">
1386 | 118 |         <i data-lucide="scroll-text" class="w-8 h-8 text-yellow-600"></i>
1387 | 119 |         <h2 class="text-xl font-semibold mt-4 mb-2">Physics Formula</h2>
1388 | 120 |         <p class="text-sm text-gray-500 mb-4">Understand traditional wisdom with engaging proverb activities.</p>
1389 | 121 |         <a href="/file/physics_formula.html" class="bg-yellow-600 text-white px-4 py-2 rounded-xl">Start Practicing</a>
1390 | 122 |       </div>
1391 | 123 | 
1392 | 124 | 
1393 | 125 |       <div class="rounded-2xl shadow-md hover:shadow-lg transition bg-white p-6 flex flex-col items-center text-center">
1394 | 126 |         <i data-lucide="scroll-text" class="w-8 h-8 text-yellow-600"></i>
1395 | 127 |         <h2 class="text-xl font-semibold mt-4 mb-2">Chemistry Data</h2>
1396 | 128 |         <p class="text-sm text-gray-500 mb-4">Understand traditional wisdom with engaging proverb activities.</p>
1397 | 129 |         <a href="/chemistry_data" class="bg-yellow-600 text-white px-4 py-2 rounded-xl">Start Practicing</a>
1398 | 130 |       </div>
1399 | 131 | 
1400 | 132 | 
1401 | 133 |       <div class="rounded-2xl shadow-md hover:shadow-lg transition bg-white p-6 flex flex-col items-center text-center">
1402 | 134 |         <i data-lucide="message-circle" class="w-8 h-8 text-purple-600"></i>
1403 | 135 |         <h2 class="text-xl font-semibold mt-4 mb-2">Chemistry Reaction</h2>
1404 | 136 |         <p class="text-sm text-gray-500 mb-4">Learn common Important Preopsition to sound more like a native speaker.</p>
1405 | 137 |         <a href="/file/chemistry_reaction.html" class="bg-purple-600 text-white px-4 py-2 rounded-xl">Start Practicing</a>
1406 | 138 |       </div>
1407 | 139 | 
1408 | 140 | 
1409 | 141 |       <div class="rounded-2xl shadow-md hover:shadow-lg transition bg-white p-6 flex flex-col items-center text-center">
1410 | 142 |         <i data-lucide="message-circle" class="w-8 h-8 text-purple-600"></i>
1411 | 143 |         <h2 class="text-xl font-semibold mt-4 mb-2">Organic Chemistry</h2>
1412 | 144 |         <p class="text-sm text-gray-500 mb-4">Learn Important Organic Chemistry.</p>
1413 | 145 |         <a href="/file/organic_chemistry.html" class="bg-purple-600 text-white px-4 py-2 rounded-xl">Start Practicing</a>
1414 | 146 |       </div>
1415 | 147 | 
1416 | 148 | 
1417 | 149 |       <div class="rounded-2xl shadow-md hover:shadow-lg transition bg-white p-6 flex flex-col items-center text-center">
1418 | 150 |         <i data-lucide="message-circle" class="w-8 h-8 text-purple-600"></i>
1419 | 151 |         <h2 class="text-xl font-semibold mt-4 mb-2">Trigonometry Formula</h2>
1420 | 152 |         <p class="text-sm text-gray-500 mb-4">Learn Important Trigonometry Formula.</p>
1421 | 153 |         <a href="/file/trigonomery_formula.html" class="bg-purple-600 text-white px-4 py-2 rounded-xl">Start Practicing</a>
1422 | 154 |       </div>
1423 | 155 | 
1424 | 156 | 
1425 | 157 |       <div class="rounded-2xl shadow-md hover:shadow-lg transition bg-white p-6 flex flex-col items-center text-center">
1426 | 158 |         <i data-lucide="message-circle" class="w-8 h-8 text-purple-600"></i>
1427 | 159 |         <h2 class="text-xl font-semibold mt-4 mb-2">Calculas Formula</h2>
1428 | 160 |         <p class="text-sm text-gray-500 mb-4">Learn Important Calculas Formula.</p>
1429 | 161 |         <a href="/file/calculas_formula.html" class="bg-purple-600 text-white px-4 py-2 rounded-xl">Start Practicing</a>
1430 | 162 |       </div>
1431 | 163 | 
1432 | 164 |       <div class="rounded-2xl shadow-md hover:shadow-lg transition bg-white p-6 flex flex-col items-center text-center">
1433 | 165 |         <i data-lucide="message-circle" class="w-8 h-8 text-purple-600"></i>
1434 | 166 |         <h2 class="text-xl font-semibold mt-4 mb-2">Important Voice Change</h2>
1435 | 167 |         <p class="text-sm text-gray-500 mb-4">Learn Important Organic Chemistry.</p>
1436 | 168 |         <a href="/voice_change" class="bg-purple-600 text-white px-4 py-2 rounded-xl">Start Practicing</a>
1437 | 169 |       </div>
1438 | 170 | 
1439 | 171 | 
1440 | 172 |       <div class="rounded-2xl shadow-md hover:shadow-lg transition bg-white p-6 flex flex-col items-center text-center">
1441 | 173 |         <i data-lucide="message-circle" class="w-8 h-8 text-purple-600"></i>
1442 | 174 |         <h2 class="text-xl font-semibold mt-4 mb-2">Important Depertment</h2>
1443 | 175 |         <p class="text-sm text-gray-500 mb-4">Learn Important CSE Depertment Data</p>
1444 | 176 |         <a href="/depertment" class="bg-purple-600 text-white px-4 py-2 rounded-xl">Start Practicing</a>
1445 | 177 |       </div>
1446 | 178 | 
1447 | 179 |       <!-- ✅ Custom Practice Card -->
1448 | 180 |       <div class="rounded-2xl shadow-md hover:shadow-lg transition bg-white p-6 flex flex-col items-center text-center">
1449 | 181 |         <i data-lucide="upload-cloud" class="w-8 h-8 text-pink-600"></i>
1450 | 182 |         <h2 class="text-xl font-semibold mt-4 mb-2">Custom Practice</h2>
1451 | 183 |         <p class="text-sm text-gray-500 mb-4">Upload your own word list (.xlsx) and practice on your terms.</p>
1452 | 184 |         <a href="/custom_practice" class="bg-pink-600 text-white px-4 py-2 rounded-xl">Start Custom Mode</a>
1453 | 185 |       </div>
1454 | 186 |     </div>
1455 | 187 |   </div>
1456 | 188 | 
1457 | 189 |   <!-- 📎 Footer -->
1458 | 190 |   <footer class="text-center text-sm text-gray-500 mt-12 mb-6">
1459 | 191 |     <p class="mt-1">&copy; 2025 Jawad. All rights reserved.</p>
1460 | 192 |   </footer>
1461 | 193 | 
1462 | 194 |   <!-- 📜 Scripts -->
1463 | 195 |   <script type="module">
1464 | 196 |     import { initializeApp } from "https://www.gstatic.com/firebasejs/9.22.2/firebase-app.js";
1465 | 197 |     import { getAuth, onAuthStateChanged, signOut } from "https://www.gstatic.com/firebasejs/9.22.2/firebase-auth.js";
1466 | 198 |     import { getFirestore, doc, getDoc } from "https://www.gstatic.com/firebasejs/9.22.2/firebase-firestore.js";
1467 | 199 | 
1468 | 200 |     const firebaseConfig = {
1469 | 201 |       apiKey: "AIzaSyBqzg9fA14lD_ygNx8CSRiRsnrz1bBNfUw",
1470 | 202 |       authDomain: "memory-auth-9515c.firebaseapp.com",
1471 | 203 |       projectId: "memory-auth-9515c",
1472 | 204 |       storageBucket: "memory-auth-9515c.appspot.com",
1473 | 205 |       messagingSenderId: "862743577103",
1474 | 206 |       appId: "1:862743577103:web:11fe02f4c24ef2c9c8197a"
1475 | 207 |     };
1476 | 208 | 
1477 | 209 |     const app = initializeApp(firebaseConfig);
1478 | 210 |     const auth = getAuth(app);
1479 | 211 |     const db = getFirestore(app);
1480 | 212 | 
1481 | 213 |     const profileButton = document.getElementById('profile-button');
1482 | 214 |     const dropdown = document.getElementById('dropdown-menu');
1483 | 215 |     const userNameSpan = document.getElementById('user-name');
1484 | 216 |     const logoutBtn = document.getElementById('logout-btn');
1485 | 217 |     const avatarImg = document.getElementById('profile-avatar');
1486 | 218 |     const badge = document.getElementById('access-badge');
1487 | 219 |     const accessLink = document.getElementById('access-status-link');
1488 | 220 | 
1489 | 221 |     profileButton.addEventListener('click', () => dropdown.classList.toggle('hidden'));
1490 | 222 |     logoutBtn.addEventListener('click', () => signOut(auth).then(() => window.location.href = '/login.html'));
1491 | 223 | onAuthStateChanged(auth, async (user) => {
1492 | 224 |   const dropdownMenu = document.getElementById("dropdown-menu");
1493 | 225 | 
1494 | 226 |   // Clean up extra links if previously rendered
1495 | 227 |   ['signup-link', 'admin-dashboard-link'].forEach(id => {
1496 | 228 |     const el = document.getElementById(id);
1497 | 229 |     if (el) el.remove();
1498 | 230 |   });
1499 | 231 | 
1500 | 232 |   // Guest
1501 | 233 |   if (!user) {
1502 | 234 |     userNameSpan.textContent = "Guest";
1503 | 235 |     avatarImg.src = `https://ui-avatars.com/api/?name=Guest&background=ccc&size=32`;
1504 | 236 | 
1505 | 237 |     badge.textContent = "Login/Signup";
1506 | 238 |     badge.className = "ml-2 text-xs font-semibold px-2 py-0.5 rounded bg-gray-100 text-gray-600";
1507 | 239 |     badge.classList.remove("hidden");
1508 | 240 | 
1509 | 241 |     accessLink.textContent = "🔐 Login";
1510 | 242 |     accessLink.href = "/login.html";
1511 | 243 |     accessLink.className = "block px-4 py-2 text-sm font-medium bg-blue-100 text-blue-700 hover:bg-blue-200";
1512 | 244 |     logoutBtn.classList.add("hidden");
1513 | 245 | 
1514 | 246 |     // Add Signup
1515 | 247 |     const signupLink = document.createElement("a");
1516 | 248 |     signupLink.id = "signup-link";
1517 | 249 |     signupLink.href = "/signup.html";
1518 | 250 |     signupLink.textContent = "📝 Signup";
1519 | 251 |     signupLink.className = "block px-4 py-2 text-sm font-medium bg-blue-100 text-green-700 hover:bg-green-200";
1520 | 252 |     dropdownMenu.appendChild(signupLink);
1521 | 253 | 
1522 | 254 | 
1523 | 255 | 
1524 | 256 | 
1525 | 257 |     return;
1526 | 258 |   }
1527 | 259 | 
1528 | 260 |   // Logged-in user
1529 | 261 |   logoutBtn.classList.remove("hidden");
1530 | 262 | 
1531 | 263 |   const snap = await getDoc(doc(db, 'users', user.uid));
1532 | 264 |   const name = snap.exists() ? snap.data().name : user.email;
1533 | 265 |   const isAdmin = snap.exists() && snap.data().admin === true;
1534 | 266 |   const paymentStatus = snap.exists() ? snap.data().paymentStatus : "not paid";
1535 | 267 | 
1536 | 268 |   userNameSpan.textContent = name;
1537 | 269 |   const initials = name.split(" ").map(n => n[0]).join("").toUpperCase();
1538 | 270 |   avatarImg.src = `https://ui-avatars.com/api/?name=${initials}&background=random&size=32`;
1539 | 271 | 
1540 | 272 |   if (isAdmin) {
1541 | 273 |     // Admin UI
1542 | 274 |     badge.textContent = "Admin";
1543 | 275 |     badge.className = "ml-2 text-xs font-semibold px-2 py-0.5 rounded bg-black text-white";
1544 | 276 |     badge.classList.remove("hidden");
1545 | 277 | 
1546 | 278 |     accessLink.textContent = "🛠 Admin Dashboard";
1547 | 279 |     accessLink.href = "/admin";
1548 | 280 |     accessLink.className = "block px-4 py-2 text-sm font-medium bg-black text-white hover:bg-gray-800";
1549 | 281 | 
1550 | 282 |     return;
1551 | 283 |   }
1552 | 284 | 
1553 | 285 |   // General User Access Logic
1554 | 286 |   badge.classList.remove("hidden");
1555 | 287 | 
1556 | 288 |   if (paymentStatus === "verified") {
1557 | 289 |     badge.textContent = "Full Access";
1558 | 290 |     badge.className = "ml-2 text-xs font-semibold px-2 py-0.5 rounded bg-green-100 text-green-700";
1559 | 291 | 
1560 | 292 |     accessLink.textContent = "✅ Full Access";
1561 | 293 |     accessLink.href = "/dashboard.html";
1562 | 294 |     accessLink.className = "block px-4 py-2 text-sm font-medium bg-green-100 text-green-700";
1563 | 295 |     accessLink.style.cursor = "default";
1564 | 296 | 
1565 | 297 |   } else if (paymentStatus === "pending") {
1566 | 298 |     badge.textContent = "Reviewing";
1567 | 299 |     badge.className = "ml-2 text-xs font-semibold px-2 py-0.5 rounded bg-yellow-100 text-yellow-700";
1568 | 300 | 
1569 | 301 |     accessLink.textContent = "⏳ Reviewing...";
1570 | 302 |     accessLink.href = "/dashboard.html";
1571 | 303 |     accessLink.className = "block px-4 py-2 text-sm font-medium bg-yellow-100 text-yellow-700";
1572 | 304 |     accessLink.style.cursor = "default";
1573 | 305 | 
1574 | 306 |   } else {
1575 | 307 |     badge.textContent = "No Access";
1576 | 308 |     badge.className = "ml-2 text-xs font-semibold px-2 py-0.5 rounded bg-red-100 text-red-700";
1577 | 309 | 
1578 | 310 |     accessLink.textContent = "🔓 Get Full Access";
1579 | 311 |     accessLink.href = "/payment.html";
1580 | 312 |     accessLink.className = "block px-4 py-2 text-sm font-medium bg-red-100 text-red-700 hover:bg-red-200";
1581 | 313 |   }
1582 | 314 | });
1583 | 315 | 
1584 | 316 | 
1585 | 317 | 
1586 | 318 | 
1587 | 319 |   </script>
1588 | 320 | 
1589 | 321 |   <script>
1590 | 322 |     lucide.createIcons();
1591 | 323 |   </script>
1592 | 324 |   <script>
1593 | 325 |   if ('serviceWorker' in navigator) {
1594 | 326 |     window.addEventListener('load', function () {
1595 | 327 |       navigator.serviceWorker.register('/sw.js')
1596 | 328 |         .then(reg => console.log('Service worker registered:', reg))
1597 | 329 |         .catch(err => console.error('SW registration failed:', err));
1598 | 330 |     });
1599 | 331 |   }
1600 | 332 | </script>
1601 | 333 | 
1602 | 334 | <script>
1603 | 335 |   let deferredPrompt;
1604 | 336 |   const installContainer = document.getElementById("install-container");
1605 | 337 |   const installButton = document.getElementById("install-button");
1606 | 338 | 
1607 | 339 |   window.addEventListener("beforeinstallprompt", (e) => {
1608 | 340 |     // Stop the mini-infobar from appearing
1609 | 341 |     e.preventDefault();
1610 | 342 |     deferredPrompt = e;
1611 | 343 |     installContainer.classList.remove("hidden"); // Show the custom install button
1612 | 344 |   });
1613 | 345 | 
1614 | 346 |   installButton.addEventListener("click", async () => {
1615 | 347 |     if (deferredPrompt) {
1616 | 348 |       deferredPrompt.prompt();
1617 | 349 |       const { outcome } = await deferredPrompt.userChoice;
1618 | 350 |       console.log(`User response to the install prompt: ${outcome}`);
1619 | 351 |       if (outcome === 'accepted') {
1620 | 352 |         installContainer.classList.add("hidden");
1621 | 353 |       }
1622 | 354 |       deferredPrompt = null;
1623 | 355 |     }
1624 | 356 |   });
1625 | 357 | </script>
1626 | 358 | 
1627 | 359 | 
1628 | 360 | 
1629 | 361 | 
1630 | 362 | </body>
1631 | 363 | </html>
1632 | 364 | 
1633 | 
1634 | 
1635 | --------------------------------------------------------------------------------
1636 | /Mukhosto/login.html:
1637 | --------------------------------------------------------------------------------
1638 |   1 | <!DOCTYPE html>
1639 |   2 | <html lang="en">
1640 |   3 | <head>
1641 |   4 |   <meta charset="UTF-8" />
1642 |   5 |   <meta name="viewport" content="width=device-width, initial-scale=1.0" />
1643 |   6 |   <title>Mukhosto | Login / Signup</title>
1644 |   7 |   <script src="https://www.gstatic.com/firebasejs/9.22.2/firebase-app.js"></script>
1645 |   8 |   <script src="https://www.gstatic.com/firebasejs/9.22.2/firebase-auth.js"></script>
1646 |   9 |   <script src="https://www.gstatic.com/firebasejs/9.22.2/firebase-firestore.js"></script>
1647 |  10 |   <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
1648 |  11 | </head>
1649 |  12 | <body class="bg-gray-50 min-h-screen flex items-center justify-center">
1650 |  13 |   <div class="bg-white shadow-md p-6 rounded-xl max-w-sm w-full">
1651 |  14 |     <!-- Tabs -->
1652 |  15 |     <div class="flex mb-6 border-b">
1653 |  16 |       <button id="login-tab" class="w-1/2 py-2 font-semibold text-blue-600 border-b-2 border-blue-600">Login</button>
1654 |  17 |       <button id="signup-tab" class="w-1/2 py-2 font-semibold text-gray-600">Signup</button>
1655 |  18 |     </div>
1656 |  19 | 
1657 |  20 |     <!-- Login Form -->
1658 |  21 |     <div id="login-form">
1659 |  22 |       <input id="login-email" type="email" placeholder="Email" class="w-full mb-3 px-4 py-2 border rounded" />
1660 |  23 |       <input id="login-password" type="password" placeholder="Password" class="w-full mb-4 px-4 py-2 border rounded" />
1661 |  24 | 
1662 |  25 |       <button id="login-btn" onclick="login()" class="w-full bg-blue-600 text-white py-2 rounded mb-3 flex items-center justify-center">
1663 |  26 |         <svg id="login-spinner" class="w-5 h-5 mr-2 animate-spin hidden" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
1664 |  27 |           <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
1665 |  28 |           <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8v4a4 4 0 00-4 4H4z"></path>
1666 |  29 |         </svg>
1667 |  30 |         <span id="login-text">Login</span>
1668 |  31 |       </button>
1669 |  32 | 
1670 |  33 |       <button onclick="continueWithGoogle()" class="w-full py-2 rounded border flex items-center justify-center hover:bg-gray-100">
1671 |  34 |         <img src="https://www.svgrepo.com/show/475656/google-color.svg" class="w-5 h-5 mr-2" alt="Google logo" />
1672 |  35 |         <span>Continue with Google</span>
1673 |  36 |       </button>
1674 |  37 |     </div>
1675 |  38 | 
1676 |  39 |     <!-- Signup Form -->
1677 |  40 |     <div id="signup-form" class="hidden">
1678 |  41 |       <input id="signup-name" type="text" placeholder="Full Name" class="w-full mb-3 px-4 py-2 border rounded" />
1679 |  42 |       <input id="signup-email" type="email" placeholder="Email" class="w-full mb-3 px-4 py-2 border rounded" />
1680 |  43 |       <input id="signup-password" type="password" placeholder="Password" class="w-full mb-4 px-4 py-2 border rounded" />
1681 |  44 | 
1682 |  45 |       <button id="signup-btn" onclick="signup()" class="w-full bg-blue-600 text-white py-2 rounded mb-3 flex items-center justify-center">
1683 |  46 |         <svg id="signup-spinner" class="w-5 h-5 mr-2 animate-spin hidden" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
1684 |  47 |           <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
1685 |  48 |           <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8v4a4 4 0 00-4 4H4z"></path>
1686 |  49 |         </svg>
1687 |  50 |         <span id="signup-text">Sign Up</span>
1688 |  51 |       </button>
1689 |  52 | 
1690 |  53 |       <button onclick="continueWithGoogle()" class="w-full py-2 rounded border flex items-center justify-center hover:bg-gray-100">
1691 |  54 |         <img src="https://www.svgrepo.com/show/475656/google-color.svg" class="w-5 h-5 mr-2" alt="Google logo" />
1692 |  55 |         <span>Continue with Google</span>
1693 |  56 |       </button>
1694 |  57 |     </div>
1695 |  58 | 
1696 |  59 |     <!-- Error Display -->
1697 |  60 |     <p id="error" class="text-red-500 text-sm mt-3 text-center"></p>
1698 |  61 |   </div>
1699 |  62 | 
1700 |  63 |   <script type="module">
1701 |  64 |     // --- Firebase Config ---
1702 |  65 |     const firebaseConfig = {
1703 |  66 |       apiKey: "AIzaSyBqzg9fA14lD_ygNx8CSRiRsnrz1bBNfUw",
1704 |  67 |       authDomain: "memory-auth-9515c.firebaseapp.com",
1705 |  68 |       projectId: "memory-auth-9515c",
1706 |  69 |       storageBucket: "memory-auth-9515c.appspot.com",
1707 |  70 |       messagingSenderId: "862743577103",
1708 |  71 |       appId: "1:862743577103:web:11fe02f4c24ef2c9c8197a",
1709 |  72 |       measurementId: "G-XNT36FMPK6"
1710 |  73 |     };
1711 |  74 | 
1712 |  75 |     import { initializeApp } from "https://www.gstatic.com/firebasejs/9.22.2/firebase-app.js";
1713 |  76 |     import {
1714 |  77 |       getAuth,
1715 |  78 |       signInWithEmailAndPassword,
1716 |  79 |       createUserWithEmailAndPassword,
1717 |  80 |       signInWithPopup,
1718 |  81 |       GoogleAuthProvider
1719 |  82 |     } from "https://www.gstatic.com/firebasejs/9.22.2/firebase-auth.js";
1720 |  83 |     import {
1721 |  84 |       getFirestore,
1722 |  85 |       doc,
1723 |  86 |       setDoc,
1724 |  87 |       getDoc
1725 |  88 |     } from "https://www.gstatic.com/firebasejs/9.22.2/firebase-firestore.js";
1726 |  89 | 
1727 |  90 |     const app = initializeApp(firebaseConfig);
1728 |  91 |     const auth = getAuth(app);
1729 |  92 |     const db = getFirestore(app);
1730 |  93 |     const provider = new GoogleAuthProvider();
1731 |  94 | 
1732 |  95 |     const errorDisplay = document.getElementById("error");
1733 |  96 | 
1734 |  97 |     // ---- Tabs Switch ----
1735 |  98 |     const loginTab = document.getElementById("login-tab");
1736 |  99 |     const signupTab = document.getElementById("signup-tab");
1737 | 100 |     const loginForm = document.getElementById("login-form");
1738 | 101 |     const signupForm = document.getElementById("signup-form");
1739 | 102 | 
1740 | 103 |     loginTab.onclick = () => {
1741 | 104 |       loginForm.classList.remove("hidden");
1742 | 105 |       signupForm.classList.add("hidden");
1743 | 106 |       loginTab.classList.add("text-blue-600", "border-b-2", "border-blue-600");
1744 | 107 |       signupTab.classList.remove("text-blue-600", "border-b-2", "border-blue-600");
1745 | 108 |       signupTab.classList.add("text-gray-600");
1746 | 109 |     };
1747 | 110 | 
1748 | 111 |     signupTab.onclick = () => {
1749 | 112 |       signupForm.classList.remove("hidden");
1750 | 113 |       loginForm.classList.add("hidden");
1751 | 114 |       signupTab.classList.add("text-blue-600", "border-b-2", "border-blue-600");
1752 | 115 |       loginTab.classList.remove("text-blue-600", "border-b-2", "border-blue-600");
1753 | 116 |       loginTab.classList.add("text-gray-600");
1754 | 117 |     };
1755 | 118 | 
1756 | 119 |     // ---- Signup (Email/Password) ----
1757 | 120 |     window.signup = () => {
1758 | 121 |       const name = document.getElementById("signup-name").value.trim();
1759 | 122 |       const email = document.getElementById("signup-email").value.trim();
1760 | 123 |       const password = document.getElementById("signup-password").value.trim();
1761 | 124 |       const signupSpinner = document.getElementById("signup-spinner");
1762 | 125 |       const signupBtn = document.getElementById("signup-btn");
1763 | 126 |       const signupText = document.getElementById("signup-text");
1764 | 127 | 
1765 | 128 |       errorDisplay.textContent = "";
1766 | 129 |       if (!name || !email || !password) {
1767 | 130 |         errorDisplay.textContent = "Please fill all fields!";
1768 | 131 |         return;
1769 | 132 |       }
1770 | 133 | 
1771 | 134 |       signupSpinner.classList.remove("hidden");
1772 | 135 |       signupBtn.disabled = true;
1773 | 136 |       signupText.textContent = "Signing up…";
1774 | 137 | 
1775 | 138 |       createUserWithEmailAndPassword(auth, email, password)
1776 | 139 |         .then(async (cred) => {
1777 | 140 |           const userRef = doc(db, "users", cred.user.uid);
1778 | 141 |           await setDoc(userRef, {
1779 | 142 |             paid: false,
1780 | 143 |             email: email,
1781 | 144 |             name: name
1782 | 145 |           });
1783 | 146 |           window.location.href = "/";
1784 | 147 |         })
1785 | 148 |         .catch(err => errorDisplay.textContent = err.message)
1786 | 149 |         .finally(() => {
1787 | 150 |           signupSpinner.classList.add("hidden");
1788 | 151 |           signupBtn.disabled = false;
1789 | 152 |           signupText.textContent = "Sign Up";
1790 | 153 |         });
1791 | 154 |     };
1792 | 155 | 
1793 | 156 |     // ---- Login (Email/Password) ----
1794 | 157 |     window.login = () => {
1795 | 158 |       const email = document.getElementById("login-email").value.trim();
1796 | 159 |       const password = document.getElementById("login-password").value.trim();
1797 | 160 |       const loginSpinner = document.getElementById("login-spinner");
1798 | 161 |       const loginBtn = document.getElementById("login-btn");
1799 | 162 |       const loginText = document.getElementById("login-text");
1800 | 163 | 
1801 | 164 |       errorDisplay.textContent = "";
1802 | 165 |       loginSpinner.classList.remove("hidden");
1803 | 166 |       loginBtn.disabled = true;
1804 | 167 |       loginText.textContent = "Logging in…";
1805 | 168 | 
1806 | 169 |       signInWithEmailAndPassword(auth, email, password)
1807 | 170 |         .then(() => window.location.href = "/")
1808 | 171 |         .catch(err => errorDisplay.textContent = err.message)
1809 | 172 |         .finally(() => {
1810 | 173 |           loginSpinner.classList.add("hidden");
1811 | 174 |           loginBtn.disabled = false;
1812 | 175 |           loginText.textContent = "Login";
1813 | 176 |         });
1814 | 177 |     };
1815 | 178 | 
1816 | 179 |     // ---- Google Login/Signup (Create Once) ----
1817 | 180 |     window.continueWithGoogle = () => {
1818 | 181 |       errorDisplay.textContent = "";
1819 | 182 |       signInWithPopup(auth, provider)
1820 | 183 |         .then(async (result) => {
1821 | 184 |           const user = result.user;
1822 | 185 |           const userRef = doc(db, "users", user.uid);
1823 | 186 |           const snap = await getDoc(userRef);
1824 | 187 |           if (!snap.exists()) {
1825 | 188 |             await setDoc(userRef, {
1826 | 189 |               paid: false,
1827 | 190 |               email: user.email,
1828 | 191 |               name: user.displayName || "Anonymous"
1829 | 192 |             });
1830 | 193 |           }
1831 | 194 |           window.location.href = "/";
1832 | 195 |         })
1833 | 196 |         .catch(err => errorDisplay.textContent = err.message);
1834 | 197 |     };
1835 | 198 |   </script>
1836 | 199 | </body>
1837 | 200 | </html>
1838 | 201 | 
1839 | 
1840 | 
1841 | --------------------------------------------------------------------------------
1842 | /Mukhosto/manifest.json:
1843 | --------------------------------------------------------------------------------
1844 |  1 | {
1845 |  2 |   "name": "Mukhosto",
1846 |  3 |   "short_name": "Mukhosto",
1847 |  4 |   "start_url": "/index.html",
1848 |  5 |   "display": "standalone",
1849 |  6 |   "background_color": "#ffffff",
1850 |  7 |   "theme_color": "#1e40af",
1851 |  8 |   "orientation": "portrait",
1852 |  9 |   "icons": [
1853 | 10 |     {
1854 | 11 |       "src": "/icons/logo.png",
1855 | 12 |       "sizes": "192x192",
1856 | 13 |       "type": "image/png"
1857 | 14 |     },
1858 | 15 |     {
1859 | 16 |       "src": "/icons/logo.png",
1860 | 17 |       "sizes": "512x512",
1861 | 18 |       "type": "image/png"
1862 | 19 |     }
1863 | 20 |   ]
1864 | 21 | }
1865 | 22 | 
1866 | 
1867 | 
1868 | --------------------------------------------------------------------------------
1869 | /Mukhosto/payment.html:
1870 | --------------------------------------------------------------------------------
1871 |   1 | <!DOCTYPE html>
1872 |   2 | <html lang="en">
1873 |   3 | <head>
1874 |   4 |   <meta charset="UTF-8" />
1875 |   5 |   <meta name="viewport" content="width=device-width, initial-scale=1.0" />
1876 |   6 |   <title>Limited Time Offer | Jawad Hossain</title>
1877 |   7 |   <script src="https://www.gstatic.com/firebasejs/9.22.2/firebase-app.js"></script>
1878 |   8 |   <script src="https://www.gstatic.com/firebasejs/9.22.2/firebase-auth.js"></script>
1879 |   9 |   <script src="https://www.gstatic.com/firebasejs/9.22.2/firebase-firestore.js"></script>
1880 |  10 |   <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
1881 |  11 | </head>
1882 |  12 | <body class="bg-gray-100 min-h-screen flex items-center justify-center px-4">
1883 |  13 |   <div class="bg-white shadow-xl rounded-2xl max-w-2xl w-full p-8">
1884 |  14 |     <div class="text-center">
1885 |  15 |       <h1 class="text-3xl font-bold text-gray-800 mb-4">🚀 Special Limited-Time Offer!</h1>
1886 |  16 |       <p class="text-lg text-gray-600 mb-2">Get access to our premium content and tools at a massive discount.</p>
1887 |  17 |       <p class="text-gray-700 text-md mb-4">Previously <span class="line-through text-red-500">৳1000</span>, now only <span class="text-green-600 font-semibold text-xl">৳499</span>!</p>
1888 |  18 |     </div>
1889 |  19 | 
1890 |  20 |     <div class="bg-gray-50 border border-dashed border-gray-300 p-4 rounded-lg mb-6 text-center">
1891 |  21 |       <p class="text-sm text-gray-700 mb-2">Send ৳499 to the following bKash (personal) number:</p>
1892 |  22 |       <p class="text-pink-600 font-bold text-2xl tracking-wide">01402633318</p>
1893 |  23 |       <p class="text-xs mt-2 text-gray-500">After payment, enter your transaction details below to confirm.</p>
1894 |  24 |     </div>
1895 |  25 | 
1896 |  26 |     <div class="mb-4">
1897 |  27 |       <input id="trxid" type="text" placeholder="bKash Transaction ID" class="w-full px-4 py-3 border rounded-lg mb-3 focus:outline-none focus:ring-2 focus:ring-blue-500" />
1898 |  28 |       <input id="mobile" type="text" placeholder="Your Mobile Number" class="w-full px-4 py-3 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500" />
1899 |  29 |     </div>
1900 |  30 | 
1901 |  31 |     <button id="submit-btn" onclick="submitTrx()" class="w-full bg-blue-600 hover:bg-blue-700 text-white py-3 rounded-lg font-semibold transition duration-200 flex items-center justify-center">
1902 |  32 |       <svg id="submit-spinner" class="w-5 h-5 mr-2 animate-spin hidden" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
1903 |  33 |         <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
1904 |  34 |         <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8v4a4 4 0 00-4 4H4z" />
1905 |  35 |       </svg>
1906 |  36 |       <span id="submit-text">Confirm Payment</span>
1907 |  37 |     </button>
1908 |  38 | 
1909 |  39 |     <p id="message" class="text-green-600 text-center mt-4 hidden">🎉 Payment submitted! We’ll verify and activate your access soon.</p>
1910 |  40 |     <p id="error" class="text-red-500 text-sm mt-2 text-center"></p>
1911 |  41 | 
1912 |  42 |     <div class="mt-6 text-center text-sm text-gray-500">
1913 |  43 |       1000+ satisfied users have already joined. Don’t miss out on this offer!
1914 |  44 |     </div>
1915 |  45 |   </div>
1916 |  46 | 
1917 |  47 |   <script type="module">
1918 |  48 |     const submitBtn = document.getElementById("submit-btn");
1919 |  49 |     const submitSpinner = document.getElementById("submit-spinner");
1920 |  50 |     const submitText = document.getElementById("submit-text");
1921 |  51 | 
1922 |  52 |     const firebaseConfig = {
1923 |  53 |       apiKey: "AIzaSyBqzg9fA14lD_ygNx8CSRiRsnrz1bBNfUw",
1924 |  54 |       authDomain: "memory-auth-9515c.firebaseapp.com",
1925 |  55 |       projectId: "memory-auth-9515c",
1926 |  56 |       storageBucket: "memory-auth-9515c.appspot.com",
1927 |  57 |       messagingSenderId: "862743577103",
1928 |  58 |       appId: "1:862743577103:web:11fe02f4c24ef2c9c8197a",
1929 |  59 |       measurementId: "G-XNT36FMPK6"
1930 |  60 |     };
1931 |  61 | 
1932 |  62 |     import { initializeApp } from "https://www.gstatic.com/firebasejs/9.22.2/firebase-app.js";
1933 |  63 |     import { getAuth, onAuthStateChanged } from "https://www.gstatic.com/firebasejs/9.22.2/firebase-auth.js";
1934 |  64 |     import { getFirestore, doc, updateDoc } from "https://www.gstatic.com/firebasejs/9.22.2/firebase-firestore.js";
1935 |  65 | 
1936 |  66 |     const app = initializeApp(firebaseConfig);
1937 |  67 |     const auth = getAuth(app);
1938 |  68 |     const db = getFirestore(app);
1939 |  69 | 
1940 |  70 |     const trxInput = document.getElementById("trxid");
1941 |  71 |     const mobileInput = document.getElementById("mobile");
1942 |  72 |     const msg = document.getElementById("message");
1943 |  73 |     const error = document.getElementById("error");
1944 |  74 | 
1945 |  75 |     let currentUID = null;
1946 |  76 | 
1947 |  77 |     onAuthStateChanged(auth, user => {
1948 |  78 |       if (!user) {
1949 |  79 |         window.location.href = "login.html";
1950 |  80 |         return;
1951 |  81 |       }
1952 |  82 |       currentUID = user.uid;
1953 |  83 |     });
1954 |  84 | 
1955 |  85 |     window.submitTrx = async () => {
1956 |  86 |       error.textContent = "";
1957 |  87 |       const trx = trxInput.value.trim();
1958 |  88 |       const mobile = mobileInput.value.trim();
1959 |  89 | 
1960 |  90 |       if (!trx || !mobile) {
1961 |  91 |         error.textContent = "Please fill in both the Transaction ID and Mobile Number.";
1962 |  92 |         return;
1963 |  93 |       }
1964 |  94 | 
1965 |  95 |       // Show loading
1966 |  96 |       submitSpinner.classList.remove("hidden");
1967 |  97 |       submitText.textContent = "Submitting...";
1968 |  98 |       submitBtn.disabled = true;
1969 |  99 | 
1970 | 100 |       try {
1971 | 101 |         const ref = doc(db, "users", currentUID);
1972 | 102 |         await updateDoc(ref, {
1973 | 103 |           trxid: trx,
1974 | 104 |           mobile: mobile,
1975 | 105 |           paymentStatus: "pending",
1976 | 106 |           paid: true
1977 | 107 |         });
1978 | 108 | 
1979 | 109 |         msg.classList.remove("hidden");
1980 | 110 |         setTimeout(() => {
1981 | 111 |           window.location.href = "index.html";
1982 | 112 |         }, 2000);
1983 | 113 |       } catch (err) {
1984 | 114 |         error.textContent = "Failed to save. Try again.";
1985 | 115 |         submitSpinner.classList.add("hidden");
1986 | 116 |         submitText.textContent = "Confirm Payment";
1987 | 117 |         submitBtn.disabled = false;
1988 | 118 |       }
1989 | 119 |     };
1990 | 120 |   </script>
1991 | 121 | </body>
1992 | 122 | </html>
1993 | 123 | 
1994 | 
1995 | 
1996 | --------------------------------------------------------------------------------
1997 | /Mukhosto/profile.html:
1998 | --------------------------------------------------------------------------------
1999 |   1 | <!DOCTYPE html>
2000 |   2 | <html lang="en">
2001 |   3 | <head>
2002 |   4 |   <meta charset="UTF-8" />
2003 |   5 |   <meta name="viewport" content="width=device-width, initial-scale=1.0" />
2004 |   6 |   <title>Your Profile</title>
2005 |   7 |   <script src="https://www.gstatic.com/firebasejs/9.22.2/firebase-app.js"></script>
2006 |   8 |   <script src="https://www.gstatic.com/firebasejs/9.22.2/firebase-auth.js"></script>
2007 |   9 |   <script src="https://www.gstatic.com/firebasejs/9.22.2/firebase-firestore.js"></script>
2008 |  10 |   <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
2009 |  11 | </head>
2010 |  12 | <body class="bg-gradient-to-br from-gray-100 to-gray-300 min-h-screen flex items-center justify-center p-4">
2011 |  13 |   <div class="bg-white shadow-xl p-8 rounded-2xl max-w-md w-full space-y-6">
2012 |  14 |     <div class="text-center">
2013 |  15 |       <h1 class="text-3xl font-bold text-gray-800 mb-2">👤 Your Profile</h1>
2014 |  16 |       <p class="text-sm text-gray-500">Welcome back!</p>
2015 |  17 |     </div>
2016 |  18 | 
2017 |  19 |     <div class="space-y-4 text-gray-700">
2018 |  20 |       <div>
2019 |  21 |         <p class="text-xs font-medium text-gray-500 uppercase">Name</p>
2020 |  22 |         <p id="user-name" class="text-lg font-semibold text-gray-800">Loading...</p>
2021 |  23 |       </div>
2022 |  24 | 
2023 |  25 |       <div>
2024 |  26 |         <p class="text-xs font-medium text-gray-500 uppercase">Email</p>
2025 |  27 |         <p id="user-email" class="text-base text-blue-600 break-words">Loading...</p>
2026 |  28 |       </div>
2027 |  29 | 
2028 |  30 |       <div>
2029 |  31 |         <p class="text-xs font-medium text-gray-500 uppercase">Account Status</p>
2030 |  32 |         <p id="user-status" class="inline-block px-3 py-1 text-sm rounded-full bg-yellow-100 text-yellow-700 font-medium">Checking...</p>
2031 |  33 |       </div>
2032 |  34 | 
2033 |  35 |       <div>
2034 |  36 |         <p class="text-xs font-medium text-gray-500 uppercase">Signed in with</p>
2035 |  37 |         <p id="provider" class="text-green-600 font-medium">Loading...</p>
2036 |  38 |       </div>
2037 |  39 |     </div>
2038 |  40 | 
2039 |  41 |     <div class="mt-6 flex flex-wrap gap-2 justify-between items-center">
2040 |  42 |       <a href="/" class="text-sm text-blue-600 hover:underline">← Back to Home</a>
2041 |  43 |       <div class="flex gap-2">
2042 |  44 |         <button onclick="resetPassword()" class="bg-blue-500 text-white px-4 py-2 rounded text-sm hover:bg-blue-600">Reset Password</button>
2043 |  45 |         <button onclick="logout()" class="bg-red-500 text-white px-4 py-2 rounded text-sm hover:bg-red-600">Logout</button>
2044 |  46 |       </div>
2045 |  47 |     </div>
2046 |  48 |   </div>
2047 |  49 | 
2048 |  50 |   <script type="module">
2049 |  51 |     import { initializeApp } from "https://www.gstatic.com/firebasejs/9.22.2/firebase-app.js";
2050 |  52 |     import {
2051 |  53 |       getAuth,
2052 |  54 |       onAuthStateChanged,
2053 |  55 |       signOut,
2054 |  56 |       sendPasswordResetEmail
2055 |  57 |     } from "https://www.gstatic.com/firebasejs/9.22.2/firebase-auth.js";
2056 |  58 |     import {
2057 |  59 |       getFirestore,
2058 |  60 |       doc,
2059 |  61 |       getDoc
2060 |  62 |     } from "https://www.gstatic.com/firebasejs/9.22.2/firebase-firestore.js";
2061 |  63 | 
2062 |  64 |     const firebaseConfig = {
2063 |  65 |       apiKey: "AIzaSyBqzg9fA14lD_ygNx8CSRiRsnrz1bBNfUw",
2064 |  66 |       authDomain: "memory-auth-9515c.firebaseapp.com",
2065 |  67 |       projectId: "memory-auth-9515c",
2066 |  68 |       storageBucket: "memory-auth-9515c.appspot.com",
2067 |  69 |       messagingSenderId: "862743577103",
2068 |  70 |       appId: "1:862743577103:web:11fe02f4c24ef2c9c8197a"
2069 |  71 |     };
2070 |  72 | 
2071 |  73 |     const app = initializeApp(firebaseConfig);
2072 |  74 |     const auth = getAuth(app);
2073 |  75 |     const db = getFirestore(app);
2074 |  76 | 
2075 |  77 |     onAuthStateChanged(auth, async user => {
2076 |  78 |       if (!user) {
2077 |  79 |         window.location.href = "login.html";
2078 |  80 |         return;
2079 |  81 |       }
2080 |  82 | 
2081 |  83 |       document.getElementById("user-email").textContent = user.email;
2082 |  84 | 
2083 |  85 |       const provider = user.providerData[0]?.providerId || "unknown";
2084 |  86 |       document.getElementById("provider").textContent =
2085 |  87 |         provider === "password" ? "Email & Password" :
2086 |  88 |         provider === "google.com" ? "Google" : provider;
2087 |  89 | 
2088 |  90 |       try {
2089 |  91 |         const docRef = doc(db, "users", user.uid);
2090 |  92 |         const docSnap = await getDoc(docRef);
2091 |  93 |         if (docSnap.exists()) {
2092 |  94 |           const userData = docSnap.data();
2093 |  95 |           document.getElementById("user-name").textContent = userData.name || "N/A";
2094 |  96 | 
2095 |  97 |           const statusEl = document.getElementById("user-status");
2096 |  98 |           if (userData.paid === true && userData.paymentStatus === "verified") {
2097 |  99 |             statusEl.textContent = "Verified";
2098 | 100 |             statusEl.className = "inline-block px-3 py-1 text-sm rounded-full bg-green-100 text-green-700 font-medium";
2099 | 101 |           } else if (userData.paymentStatus === "pending") {
2100 | 102 |             statusEl.textContent = "Pending";
2101 | 103 |             statusEl.className = "inline-block px-3 py-1 text-sm rounded-full bg-yellow-100 text-yellow-700 font-medium";
2102 | 104 |           } else {
2103 | 105 |             statusEl.textContent = "Not Verified";
2104 | 106 |             statusEl.className = "inline-block px-3 py-1 text-sm rounded-full bg-red-100 text-red-700 font-medium";
2105 | 107 |           }
2106 | 108 |         } else {
2107 | 109 |           document.getElementById("user-name").textContent = "Unknown User";
2108 | 110 |         }
2109 | 111 |       } catch (error) {
2110 | 112 |         console.error("Error fetching user profile:", error);
2111 | 113 |       }
2112 | 114 |     });
2113 | 115 | 
2114 | 116 |     window.logout = () => {
2115 | 117 |       signOut(auth).then(() => {
2116 | 118 |         window.location.href = "login.html";
2117 | 119 |       });
2118 | 120 |     };
2119 | 121 | 
2120 | 122 |     window.resetPassword = () => {
2121 | 123 |       const user = auth.currentUser;
2122 | 124 |       if (user && user.email) {
2123 | 125 |         sendPasswordResetEmail(auth, user.email)
2124 | 126 |           .then(() => {
2125 | 127 |             alert('Password reset email sent! Please check your inbox.');
2126 | 128 |           })
2127 | 129 |           .catch((error) => {
2128 | 130 |             console.error('Error sending password reset email:', error);
2129 | 131 |             alert('Error sending reset email. Try again later.');
2130 | 132 |           });
2131 | 133 |       } else {
2132 | 134 |         alert('No user is signed in.');
2133 | 135 |       }
2134 | 136 |     };
2135 | 137 |   </script>
2136 | 138 | </body>
2137 | 139 | </html>
2138 | 140 | 
2139 | 
2140 | 
2141 | --------------------------------------------------------------------------------
2142 | /Mukhosto/sw.js:
2143 | --------------------------------------------------------------------------------
2144 | 1 | self.addEventListener('install', event => {
2145 | 2 |   console.log('Service Worker installed');
2146 | 3 | });
2147 | 4 | 
2148 | 5 | self.addEventListener('fetch', function (event) {
2149 | 6 |   // Add offline cache logic here if needed
2150 | 7 | });
2151 | 8 | 
2152 | 
2153 | 
2154 | --------------------------------------------------------------------------------
2155 | /Mukhosto/verifyAccess.js:
2156 | --------------------------------------------------------------------------------
2157 |  1 | import { initializeApp } from "https://www.gstatic.com/firebasejs/9.22.2/firebase-app.js";
2158 |  2 | import {
2159 |  3 |   getAuth,
2160 |  4 |   onAuthStateChanged,
2161 |  5 | } from "https://www.gstatic.com/firebasejs/9.22.2/firebase-auth.js";
2162 |  6 | import {
2163 |  7 |   getFirestore,
2164 |  8 |   doc,
2165 |  9 |   getDoc,
2166 | 10 | } from "https://www.gstatic.com/firebasejs/9.22.2/firebase-firestore.js";
2167 | 11 | 
2168 | 12 | // ✅ Your Firebase config
2169 | 13 | const firebaseConfig = {
2170 | 14 |   apiKey: "AIzaSyBqzg9fA14lD_ygNx8CSRiRsnrz1bBNfUw",
2171 | 15 |   authDomain: "memory-auth-9515c.firebaseapp.com",
2172 | 16 |   projectId: "memory-auth-9515c",
2173 | 17 |   storageBucket: "memory-auth-9515c.appspot.com",
2174 | 18 |   messagingSenderId: "862743577103",
2175 | 19 |   appId: "1:862743577103:web:11fe02f4c24ef2c9c8197a",
2176 | 20 |   measurementId: "G-XNT36FMPK6"
2177 | 21 | };
2178 | 22 | 
2179 | 23 | const app = initializeApp(firebaseConfig);
2180 | 24 | const auth = getAuth(app);
2181 | 25 | const db = getFirestore(app);
2182 | 26 | 
2183 | 27 | onAuthStateChanged(auth, async (user) => {
2184 | 28 |   if (!user) {
2185 | 29 |     window.location.href = "/login.html";
2186 | 30 |     return;
2187 | 31 |   }
2188 | 32 | 
2189 | 33 |   const userRef = doc(db, "users", user.uid);
2190 | 34 |   const userSnap = await getDoc(userRef);
2191 | 35 | 
2192 | 36 |   if (!userSnap.exists()) {
2193 | 37 |     console.error("User document does not exist.");
2194 | 38 |     window.location.href = "/login.html";
2195 | 39 |     return;
2196 | 40 |   }
2197 | 41 | 
2198 | 42 |   const userData = userSnap.data();
2199 | 43 | 
2200 | 44 |   // ✅ MAIN LOGIC
2201 | 45 |   if (userData.paymentStatus === "verified") {
2202 | 46 |     // Payment fully verified, allow access
2203 | 47 |     console.log("Access granted: Payment verified");
2204 | 48 |     return;
2205 | 49 |   } else {
2206 | 50 |     if (userData.paid === true && user.emailVerified) {
2207 | 51 |       // Paid is true AND email is verified, allow access
2208 | 52 |       console.log("Access granted: Paid and email verified");
2209 | 53 |       return;
2210 | 54 |     }
2211 | 55 | 
2212 | 56 |     if (userData.paid !== true) {
2213 | 57 |       // Paid is not true, go to payment page
2214 | 58 |       window.location.href = "/payment.html";
2215 | 59 |       return;
2216 | 60 |     }
2217 | 61 | 
2218 | 62 | 
2219 | 63 |   }
2220 | 64 | });
2221 | 65 | 
2222 | 
2223 | 
2224 | --------------------------------------------------------------------------------
2225 | /Mukhosto/vocabulary/data.xlsx:
2226 | --------------------------------------------------------------------------------
2227 | https://raw.githubusercontent.com/ImJawadHossain/Mukhosto/3b9cd86196504288837847efb9850d47317864c7/Mukhosto/vocabulary/data.xlsx
2228 | 
2229 | 
2230 | --------------------------------------------------------------------------------
2231 | /Mukhosto/vocabulary/flashcard.html:
2232 | --------------------------------------------------------------------------------
2233 |  1 | <!DOCTYPE html>
2234 |  2 | <html lang="en">
2235 |  3 | <head>
2236 |  4 |   <meta charset="UTF-8" />
2237 |  5 |   <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
2238 |  6 |   <title>Vocabulary Flashcards</title>
2239 |  7 |   <link rel="stylesheet" href="style.css">
2240 |  8 |   <script src="https://cdn.jsdelivr.net/npm/xlsx@0.18.5/dist/xlsx.full.min.js"></script>
2241 |  9 |   <script src="https://www.gstatic.com/firebasejs/9.22.2/firebase-app.js"></script>
2242 | 10 |   <script src="https://www.gstatic.com/firebasejs/9.22.2/firebase-auth.js"></script>
2243 | 11 | </head>
2244 | 12 | <body>
2245 | 13 | 
2246 | 14 | <h1>
2247 | 15 |   <a href="/vocabulary" style="color: inherit; text-decoration: none;">
2248 | 16 |     Vocabulary Flashcards
2249 | 17 |   </a>
2250 | 18 | </h1>
2251 | 19 | 
2252 | 20 | <div class="flex justify-center mb-4">
2253 | 21 |   <label class="flex items-center space-x-2 text-sm text-gray-700">
2254 | 22 |     <input type="checkbox" id="reverse-toggle" class="accent-blue-600">
2255 | 23 |     <span>Reverse Practice</span>
2256 | 24 |   </label>
2257 | 25 | </div>
2258 | 26 | 
2259 | 27 | <label>
2260 | 28 |   <input type="checkbox" id="toggle-extra" onchange="toggleExtras()" />
2261 | 29 |   Show Extra Data
2262 | 30 | </label>
2263 | 31 | 
2264 | 32 | <div class="top-controls">
2265 | 33 |   <button class="shuffle-button" onclick="shuffleCards()">Shuffle Cards</button>
2266 | 34 | </div>
2267 | 35 | 
2268 | 36 | 
2269 | 37 | <div id="flashcard-container" class="flashcard-container"></div>
2270 | 38 | 
2271 | 39 | <div class="button-container">
2272 | 40 |   <button class="nav-buttons" onclick="showPrevious()">Previous</button>
2273 | 41 |   <button class="nav-buttons" id="next-btn" onclick="showNext()">Next</button>
2274 | 42 | </div>
2275 | 43 | 
2276 | 44 | <div class="counter" id="card-counter">1/0</div>
2277 | 45 | 
2278 | 46 | <script src="flashcard.js"></script>
2279 | 47 | 
2280 | 48 | <br><br><br><br>
2281 | 49 | 
2282 | 50 | <footer class="text-center text-sm text-gray-500 mt-12 mb-6">
2283 | 51 |   <a href="/" class="text-blue-600 hover:underline">← Back to Home</a>
2284 | 52 |   <p class="mt-1">&copy; 2025 Jawad. All rights reserved.</p>
2285 | 53 | </footer>
2286 | 54 | 
2287 | 55 | <script type="module" src="../verifyAccess.js"></script>
2288 | 56 | 
2289 | 57 | </body>
2290 | 58 | </html>
2291 | 59 | 
2292 | 
2293 | 
2294 | --------------------------------------------------------------------------------
2295 | /Mukhosto/vocabulary/flashcard.js:
2296 | --------------------------------------------------------------------------------
2297 |   1 | let flashcards = [];
2298 |   2 | let currentCardIndex = 0;
2299 |   3 | let showExtraData = false;
2300 |   4 | 
2301 |   5 | function getKnownWords() {
2302 |   6 |   return JSON.parse(localStorage.getItem("knownWords") || "[]");
2303 |   7 | }
2304 |   8 | 
2305 |   9 | function isReverseMode() {
2306 |  10 |   return localStorage.getItem("reversePractice") === "1";
2307 |  11 | }
2308 |  12 | 
2309 |  13 | document.addEventListener("DOMContentLoaded", () => {
2310 |  14 |   const toggle = document.getElementById("reverse-toggle");
2311 |  15 |   if (!toggle) return;
2312 |  16 | 
2313 |  17 |   toggle.checked = isReverseMode();
2314 |  18 | 
2315 |  19 |   toggle.addEventListener("change", () => {
2316 |  20 |     localStorage.setItem("reversePractice", toggle.checked ? "1" : "0");
2317 |  21 | 
2318 |  22 |     const params = new URLSearchParams(window.location.search);
2319 |  23 |     params.set("reverse", toggle.checked ? "1" : "0");
2320 |  24 |     window.location.search = params.toString();
2321 |  25 |   });
2322 |  26 | });
2323 |  27 | 
2324 |  28 | function saveKnownWord(word) {
2325 |  29 |   const knownWords = getKnownWords();
2326 |  30 |   if (!knownWords.includes(word)) {
2327 |  31 |     knownWords.push(word);
2328 |  32 |     localStorage.setItem("knownWords", JSON.stringify(knownWords));
2329 |  33 |   }
2330 |  34 | }
2331 |  35 | 
2332 |  36 | function getRangeFromURL() {
2333 |  37 |   const params = new URLSearchParams(window.location.search);
2334 |  38 |   const start = parseInt(params.get("start")) || 1;
2335 |  39 |   const end = parseInt(params.get("end")) || Number.MAX_SAFE_INTEGER;
2336 |  40 |   return { start, end };
2337 |  41 | }
2338 |  42 | 
2339 |  43 | document.addEventListener('keydown', (e) => {
2340 |  44 |   if (e.key === "ArrowRight") {
2341 |  45 |     showNext();
2342 |  46 |   } else if (e.key === "ArrowLeft") {
2343 |  47 |     showPrevious();
2344 |  48 |   } else if (e.key === " " || e.key === "Enter") {
2345 |  49 |     e.preventDefault(); // stop page from scrolling
2346 |  50 |     const card = document.querySelector(".flashcard");
2347 |  51 |     if (card) flipCard(card);
2348 |  52 |   }
2349 |  53 | });
2350 |  54 | 
2351 |  55 | window.addEventListener("DOMContentLoaded", () => {
2352 |  56 |   fetch("data.xlsx")
2353 |  57 |     .then(res => res.arrayBuffer())
2354 |  58 |     .then(buffer => {
2355 |  59 |       const reverse = isReverseMode();
2356 |  60 | 
2357 |  61 |       const workbook = XLSX.read(buffer, { type: "array" });
2358 |  62 |       const sheet = workbook.Sheets[workbook.SheetNames[0]];
2359 |  63 |       const json = XLSX.utils.sheet_to_json(sheet);
2360 |  64 | 
2361 |  65 |       const { start, end } = getRangeFromURL();
2362 |  66 |       const knownWords = getKnownWords();
2363 |  67 | 
2364 |  68 |       let selectedRows = json.slice(start - 1, end)
2365 |  69 |         .filter(row => !knownWords.includes(row["FrontData"] || ""));
2366 |  70 | 
2367 |  71 |       flashcards = selectedRows.map(row => ({
2368 |  72 |         front: reverse ? (row["BackData"] || "") : (row["FrontData"] || ""),
2369 |  73 |         back: reverse ? (row["FrontData"] || "") : (row["BackData"] || ""),
2370 |  74 |         subBack: row["SubBack"] || "",
2371 |  75 |         extras: Object.keys(row).filter(k => k.startsWith("ExtraData")).map(k => row[k]),
2372 |  76 |         reverseOriginal: row["FrontData"] || ""
2373 |  77 |       }));
2374 |  78 | 
2375 |  79 |       createFlashcard();
2376 |  80 |     })
2377 |  81 |     .catch(err => {
2378 |  82 |       document.getElementById("flashcard-container").innerHTML = `<p>Error loading file: ${err.message}</p>`;
2379 |  83 |     });
2380 |  84 | });
2381 |  85 | 
2382 |  86 | function createFlashcard() {
2383 |  87 |   const container = document.getElementById("flashcard-container");
2384 |  88 |   container.innerHTML = "";
2385 |  89 | 
2386 |  90 |   if (flashcards.length === 0) {
2387 |  91 |     container.innerHTML = "<p>No cards to review!</p>";
2388 |  92 |     return;
2389 |  93 |   }
2390 |  94 | 
2391 |  95 |   const card = flashcards[currentCardIndex];
2392 |  96 |   const cardDiv = document.createElement("div");
2393 |  97 |   cardDiv.classList.add("flashcard");
2394 |  98 | 
2395 |  99 |   cardDiv.innerHTML = `
2396 | 100 |     <div class="card-inner">
2397 | 101 |       <div class="card-front">
2398 | 102 |         <span class="word">${card.front}</span>
2399 | 103 |         <button class="pronunciation-btn" onclick="event.stopPropagation(); pronounce('${card.front}')">🔊</button>
2400 | 104 |         <button class="known-icon" onclick="event.stopPropagation(); markAsKnown('${card.reverseOriginal || card.front}')">✅</button>
2401 | 105 |       </div>
2402 | 106 |       <div class="card-back">
2403 | 107 |         <div class="meaning">${card.back}</div>
2404 | 108 |         <button class="pronunciation-btn" onclick="event.stopPropagation(); pronounce('${card.back}')">🔊</button>
2405 | 109 |         <button class="known-icon" onclick="event.stopPropagation(); markAsKnown('${card.reverseOriginal || card.front}')">✅</button>
2406 | 110 |         ${card.subBack ? `<em class="sub-definition">${card.subBack}</em>` : ""}
2407 | 111 |         ${showExtraData && card.extras.length > 0
2408 | 112 |           ? `<div class="extras">${card.extras.map((e, i) => `<p>${i + 1}. ${e}</p>`).join("")}</div>`
2409 | 113 |           : ""}
2410 | 114 |       </div>
2411 | 115 |     </div>
2412 | 116 |   `;
2413 | 117 | 
2414 | 118 |   cardDiv.onclick = () => flipCard(cardDiv);
2415 | 119 |   container.appendChild(cardDiv);
2416 | 120 | 
2417 | 121 |   updateCardCounter();
2418 | 122 | }
2419 | 123 | 
2420 | 124 | function flipCard(cardElement) {
2421 | 125 |   const inner = cardElement.querySelector(".card-inner");
2422 | 126 |   inner.classList.toggle("is-flipped");
2423 | 127 | }
2424 | 128 | 
2425 | 129 | function showNext() {
2426 | 130 |   if (currentCardIndex < flashcards.length - 1) {
2427 | 131 |     currentCardIndex++;
2428 | 132 |     createFlashcard();
2429 | 133 |   } else {
2430 | 134 |     window.location.href = '/vocabulary'; // redirect to /vocabulary
2431 | 135 |   }
2432 | 136 | }
2433 | 137 | 
2434 | 138 | function showPrevious() {
2435 | 139 |   if (currentCardIndex > 0) {
2436 | 140 |     currentCardIndex--;
2437 | 141 |     createFlashcard();
2438 | 142 |   }
2439 | 143 | }
2440 | 144 | 
2441 | 145 | function updateCardCounter() {
2442 | 146 |   document.getElementById("card-counter").textContent = `${currentCardIndex + 1}/${flashcards.length}`;
2443 | 147 | 
2444 | 148 |   const nextBtn = document.getElementById("next-btn");
2445 | 149 |   if (currentCardIndex === flashcards.length - 1) {
2446 | 150 |     nextBtn.textContent = "Exit";
2447 | 151 |   } else {
2448 | 152 |     nextBtn.textContent = "Next";
2449 | 153 |   }
2450 | 154 | }
2451 | 155 | 
2452 | 156 | function toggleExtras() {
2453 | 157 |   showExtraData = document.getElementById("toggle-extra").checked;
2454 | 158 |   createFlashcard();
2455 | 159 | }
2456 | 160 | 
2457 | 161 | function pronounce(word) {
2458 | 162 |   const utterance = new SpeechSynthesisUtterance(word);
2459 | 163 |   window.speechSynthesis.speak(utterance);
2460 | 164 | }
2461 | 165 | 
2462 | 166 | function markAsKnown(word) {
2463 | 167 |   saveKnownWord(word);
2464 | 168 |   flashcards.splice(currentCardIndex, 1);
2465 | 169 |   if (currentCardIndex >= flashcards.length) currentCardIndex = flashcards.length - 1;
2466 | 170 |   createFlashcard();
2467 | 171 | }
2468 | 172 | 
2469 | 173 | function shuffleCards() {
2470 | 174 |   const container = document.getElementById("flashcard-container");
2471 | 175 | 
2472 | 176 |   // Add shuffle animation class
2473 | 177 |   container.classList.add("shuffle-animation");
2474 | 178 | 
2475 | 179 |   setTimeout(() => {
2476 | 180 |     flashcards.sort(() => Math.random() - 0.5);
2477 | 181 |     currentCardIndex = 0;
2478 | 182 |     createFlashcard();
2479 | 183 | 
2480 | 184 |     // Remove animation class after shuffle
2481 | 185 |     container.classList.remove("shuffle-animation");
2482 | 186 |   }, 500);
2483 | 187 | }
2484 | 188 | 
2485 | 
2486 | 
2487 | --------------------------------------------------------------------------------
2488 | /Mukhosto/vocabulary/index.html:
2489 | --------------------------------------------------------------------------------
2490 |  1 | <!DOCTYPE html>
2491 |  2 | <html lang="en">
2492 |  3 | <head>
2493 |  4 |   <meta charset="UTF-8" />
2494 |  5 |   <meta name="viewport" content="width=device-width, initial-scale=1.0" />
2495 |  6 |   <title>Vocabulary Sets</title>
2496 |  7 |   <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
2497 |  8 |   <link rel="stylesheet" href="style.css">
2498 |  9 |   <script src="https://www.gstatic.com/firebasejs/9.22.2/firebase-app.js"></script>
2499 | 10 | <script src="https://www.gstatic.com/firebasejs/9.22.2/firebase-auth.js"></script>
2500 | 11 | 
2501 | 12 | </head>
2502 | 13 | <body class="bg-gradient-to-b from-blue-50 to-white min-h-screen py-10 px-4">
2503 | 14 |   <div class="max-w-4xl mx-auto text-center">
2504 | 15 |     <h1 class="text-4xl font-bold text-blue-800 mb-4">Vocabulary Sets</h1>
2505 | 16 |     <p class="text-gray-600 mb-6 text-lg">Practice vocabulary in small, manageable sets for better retention.</p>
2506 | 17 | 
2507 | 18 | 
2508 | 19 | 
2509 | 20 |     <!-- Reset Progress Button -->
2510 | 21 | <div class="flex flex-wrap justify-center items-center gap-4 mb-8">
2511 | 22 |   <button id="reset-progress" class="bg-red-500 text-white px-4 py-2 rounded-xl hover:bg-red-600 transition">
2512 | 23 |     🔁 Reset Progress
2513 | 24 |   </button>
2514 | 25 |   <a href="known-words.html" class="bg-indigo-600 text-white px-4 py-2 rounded-xl shadow hover:bg-indigo-700 transition">
2515 | 26 |     📚 Review Known Words
2516 | 27 |   </a>
2517 | 28 | </div>
2518 | 29 | 
2519 | 30 | 
2520 | 31 | 
2521 | 32 |   
2522 | 33 | 
2523 | 34 | 
2524 | 35 |     <div id="sets-container" class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 gap-6">
2525 | 36 |       <!-- Sets injected here -->
2526 | 37 |     </div>
2527 | 38 |   </div>
2528 | 39 | 
2529 | 40 |   <script src="https://cdn.jsdelivr.net/npm/xlsx@0.18.5/dist/xlsx.full.min.js"></script>
2530 | 41 |   <script src="index.js"></script>
2531 | 42 | 
2532 | 43 | 
2533 | 44 |   <footer class="text-center text-sm text-gray-500 mt-12 mb-6">
2534 | 45 |   <a href="/" class="text-blue-600 hover:underline">← Back to Home</a>
2535 | 46 |   <p class="mt-1">&copy; 2025 Jawad. All rights reserved.</p>
2536 | 47 | </footer>
2537 | 48 | 
2538 | 49 | <script type="module" src="/verifyAccess.js"></script>
2539 | 50 | 
2540 | 51 | 
2541 | 52 | 
2542 | 53 | </body>
2543 | 54 | </html>
2544 | 
2545 | 
2546 | --------------------------------------------------------------------------------
2547 | /Mukhosto/vocabulary/index.js:
2548 | --------------------------------------------------------------------------------
2549 |  1 | function getKnownWords() {
2550 |  2 |   return JSON.parse(localStorage.getItem("knownWords") || "[]");
2551 |  3 | }
2552 |  4 | 
2553 |  5 | 
2554 |  6 | 
2555 |  7 | const chunkSize = 20;
2556 |  8 | const setsContainer = document.getElementById("sets-container");
2557 |  9 | const colorClasses = ['blue', 'green', 'purple', 'pink', 'yellow', 'red', 'indigo'];
2558 | 10 | 
2559 | 11 | document.addEventListener("DOMContentLoaded", () => {
2560 | 12 |   const resetBtn = document.getElementById("reset-progress");
2561 | 13 |   if (resetBtn) {
2562 | 14 |     resetBtn.addEventListener("click", () => {
2563 | 15 |       if (confirm("Are you sure you want to reset your progress? This will unmark all known words.")) {
2564 | 16 |         localStorage.removeItem("knownWords");
2565 | 17 |         window.location.reload();
2566 | 18 |       }
2567 | 19 |     });
2568 | 20 |   }
2569 | 21 | 
2570 | 22 |   fetch('data.xlsx')
2571 | 23 |     .then(res => res.arrayBuffer())
2572 | 24 |     .then(buffer => {
2573 | 25 |       const workbook = XLSX.read(buffer, { type: 'array' });
2574 | 26 |       const sheet = workbook.Sheets[workbook.SheetNames[0]];
2575 | 27 |       const data = XLSX.utils.sheet_to_json(sheet);
2576 | 28 | 
2577 | 29 |       const knownWords = getKnownWords();
2578 | 30 |       const totalWords = data.filter(row => row["FrontData"]).length;
2579 | 31 | 
2580 | 32 |       for (let i = 0; i < Math.ceil(totalWords / chunkSize); i++) {
2581 | 33 |         const start = i * chunkSize;
2582 | 34 |         const end = Math.min((i + 1) * chunkSize, totalWords);
2583 | 35 | 
2584 | 36 |         const selectedRows = data.slice(start, end)
2585 | 37 |           .filter(row => row["FrontData"] && !knownWords.includes(row["FrontData"]));
2586 | 38 | 
2587 | 39 |         const color = colorClasses[i % colorClasses.length];
2588 | 40 | 
2589 | 41 | 
2590 | 42 | 
2591 | 43 | 
2592 | 44 | 
2593 | 45 | const sliceRows = data.slice(start, end).filter(r => r["FrontData"]);
2594 | 46 | const totalInSet = sliceRows.length;
2595 | 47 | const knownInSet = sliceRows.filter(r => knownWords.includes(r["FrontData"])).length;
2596 | 48 | const pct = totalInSet ? Math.round((knownInSet / totalInSet) * 100) : 0;
2597 | 49 | 
2598 | 50 | const card = document.createElement('div');
2599 | 51 | card.className = `bg-white p-6 rounded-2xl shadow-md hover:shadow-xl transition`;
2600 | 52 | 
2601 | 53 | card.innerHTML = `
2602 | 54 |   <h2 class="text-2xl font-semibold text-${color}-600 mb-2">Set ${i + 1}</h2>
2603 | 55 |   <p class="text-gray-500 mb-2">Words ${start + 1} – ${end}</p>
2604 | 56 | 
2605 | 57 |   <div class="w-full bg-gray-200 rounded-full h-2 mb-2">
2606 | 58 |     <div class="bg-${color}-600 h-2 rounded-full" style="width: ${pct}%;"></div>
2607 | 59 |   </div>
2608 | 60 |   <p class="text-sm text-gray-600 mb-4">${knownInSet}/${totalInSet} known (${pct}%)</p>
2609 | 61 | 
2610 | 62 |   ${
2611 | 63 |     knownInSet < totalInSet
2612 | 64 |       ? `<a href="flashcard.html?start=${start + 1}&end=${end}&reverse=${document.getElementById('reverse-toggle')?.checked ? '1' : '0'}" class="inline-block bg-${color}-600 text-white px-4 py-2 rounded-xl">Start</a>`
2613 | 65 |       : `<div class="text-green-600 font-semibold">✅ Completed</div>`
2614 | 66 |   }
2615 | 67 | `;
2616 | 68 | 
2617 | 69 | setsContainer.appendChild(card);
2618 | 70 | 
2619 | 71 | 
2620 | 72 | 
2621 | 73 | 
2622 | 74 | 
2623 | 75 | 
2624 | 76 |       }
2625 | 77 | 
2626 | 78 |       if (totalWords === 0) {
2627 | 79 |         setsContainer.innerHTML = `<p class="text-green-600">🎉 You've learned all the words! Reset to start over.</p>`;
2628 | 80 |       }
2629 | 81 |     })
2630 | 82 |     .catch(err => {
2631 | 83 |       setsContainer.innerHTML = `<p class="text-red-500">Error loading vocabulary file: ${err.message}</p>`;
2632 | 84 |     });
2633 | 85 | });
2634 | 86 | 
2635 | 
2636 | 
2637 | --------------------------------------------------------------------------------
2638 | /Mukhosto/vocabulary/known-words.html:
2639 | --------------------------------------------------------------------------------
2640 |   1 | <!DOCTYPE html>
2641 |   2 | <html lang="en">
2642 |   3 | <head>
2643 |   4 |   <meta charset="UTF-8" />
2644 |   5 |   <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
2645 |   6 |   <title>Known Vocabulary Flashcards</title>
2646 |   7 |   <link rel="stylesheet" href="style.css">
2647 |   8 |   <script src="https://cdn.jsdelivr.net/npm/xlsx@0.18.5/dist/xlsx.full.min.js"></script>
2648 |   9 |   <script src="https://www.gstatic.com/firebasejs/9.22.2/firebase-app.js"></script>
2649 |  10 |   <script src="https://www.gstatic.com/firebasejs/9.22.2/firebase-auth.js"></script>
2650 |  11 | </head>
2651 |  12 | <body>
2652 |  13 | 
2653 |  14 |   <button onclick="exportKnownWords()" class="nav-buttons" style="margin-bottom: 20px;">⬇ Export Known Words</button>
2654 |  15 |   <input type="file" id="import-file" accept=".xlsx" style="display: none;" onchange="importKnownWords(event)">
2655 |  16 |   <button onclick="document.getElementById('import-file').click()" class="nav-buttons">⬆ Import Known Words</button>
2656 |  17 | 
2657 |  18 |   <h1>
2658 |  19 |     <a href="/vocabulary" style="color: inherit; text-decoration: none;">
2659 |  20 |       Known Vocabulary Flashcards
2660 |  21 |     </a>
2661 |  22 |   </h1>
2662 |  23 | 
2663 |  24 |   <div class="flex justify-center mb-4">
2664 |  25 |     <label class="flex items-center space-x-2 text-sm text-gray-700">
2665 |  26 |       <input type="checkbox" id="reverse-toggle" class="accent-blue-600">
2666 |  27 |       <span>Reverse Practice</span>
2667 |  28 |     </label>
2668 |  29 |   </div>
2669 |  30 | 
2670 |  31 |   <label>
2671 |  32 |     <input type="checkbox" id="toggle-extra" onchange="toggleExtras()" />
2672 |  33 |     Show Extra Data
2673 |  34 |   </label>
2674 |  35 | 
2675 |  36 |   <br>
2676 |  37 | 
2677 |  38 |   <button onclick="shuffleFlashcards()" class="nav-buttons" style="margin-top: 10px;">🔀 Shuffle Cards</button>
2678 |  39 | 
2679 |  40 |   <div id="flashcard-container" class="flashcard-container"></div>
2680 |  41 | 
2681 |  42 |   <div class="button-container">
2682 |  43 |     <button class="nav-buttons" id="previous-button" onclick="showPrevious()">Previous</button>
2683 |  44 |     <button class="nav-buttons" id="next-button" onclick="showNext()">Next</button>
2684 |  45 |   </div>
2685 |  46 | 
2686 |  47 |   <div class="counter" id="card-counter">1/0</div>
2687 |  48 | 
2688 |  49 |   <script>
2689 |  50 |     let flashcards = [];
2690 |  51 |     let currentCardIndex = 0;
2691 |  52 |     let showExtraData = false;
2692 |  53 | 
2693 |  54 |     function getKnownWords() {
2694 |  55 |       return JSON.parse(localStorage.getItem("knownWords") || "[]");
2695 |  56 |     }
2696 |  57 | 
2697 |  58 |     function isReverseMode() {
2698 |  59 |       return localStorage.getItem("reversePractice") === "1";
2699 |  60 |     }
2700 |  61 | 
2701 |  62 |     document.addEventListener("DOMContentLoaded", () => {
2702 |  63 |       const toggle = document.getElementById("reverse-toggle");
2703 |  64 |       if (!toggle) return;
2704 |  65 | 
2705 |  66 |       toggle.checked = isReverseMode();
2706 |  67 | 
2707 |  68 |       toggle.addEventListener("change", () => {
2708 |  69 |         localStorage.setItem("reversePractice", toggle.checked ? "1" : "0");
2709 |  70 |         const params = new URLSearchParams(window.location.search);
2710 |  71 |         params.set("reverse", toggle.checked ? "1" : "0");
2711 |  72 |         window.location.search = params.toString();
2712 |  73 |       });
2713 |  74 |     });
2714 |  75 | 
2715 |  76 | 
2716 |  77 |     document.addEventListener('keydown', (e) => {
2717 |  78 |   if (e.key === "ArrowRight") {
2718 |  79 |     showNext();
2719 |  80 |   } else if (e.key === "ArrowLeft") {
2720 |  81 |     showPrevious();
2721 |  82 |   } else if (e.key === " " || e.key === "Enter") {
2722 |  83 |     e.preventDefault(); // stop page from scrolling
2723 |  84 |     const card = document.querySelector(".flashcard");
2724 |  85 |     if (card) flipCard(card);
2725 |  86 |   }
2726 |  87 | });
2727 |  88 | 
2728 |  89 | 
2729 |  90 |     window.addEventListener("DOMContentLoaded", () => {
2730 |  91 |       fetch("data.xlsx")
2731 |  92 |         .then(res => res.arrayBuffer())
2732 |  93 |         .then(buffer => {
2733 |  94 |           const workbook = XLSX.read(buffer, { type: "array" });
2734 |  95 |           const sheet = workbook.Sheets[workbook.SheetNames[0]];
2735 |  96 |           const json = XLSX.utils.sheet_to_json(sheet);
2736 |  97 | 
2737 |  98 |           const knownWords = getKnownWords();
2738 |  99 |           const reverse = isReverseMode();
2739 | 100 | 
2740 | 101 |           flashcards = json.filter(row => knownWords.includes(row["FrontData"]))
2741 | 102 |             .map(row => ({
2742 | 103 |               front: reverse ? (row["BackData"] || "") : (row["FrontData"] || ""),
2743 | 104 |               back: reverse ? (row["FrontData"] || "") : (row["BackData"] || ""),
2744 | 105 |               subBack: row["SubBack"] || "",
2745 | 106 |               extras: Object.keys(row).filter(k => k.startsWith("ExtraData")).map(k => row[k])
2746 | 107 |             }));
2747 | 108 | 
2748 | 109 |           createFlashcard();
2749 | 110 |         })
2750 | 111 |         .catch(err => {
2751 | 112 |           document.getElementById("flashcard-container").innerHTML = `<p>Error loading file: ${err.message}</p>`;
2752 | 113 |         });
2753 | 114 |     });
2754 | 115 | 
2755 | 116 |     function createFlashcard() {
2756 | 117 |       const container = document.getElementById("flashcard-container");
2757 | 118 |       container.innerHTML = "";
2758 | 119 | 
2759 | 120 |       if (flashcards.length === 0) {
2760 | 121 |         container.innerHTML = "<p>No known words to review!</p>";
2761 | 122 |         return;
2762 | 123 |       }
2763 | 124 | 
2764 | 125 |       const card = flashcards[currentCardIndex];
2765 | 126 |       const cardDiv = document.createElement("div");
2766 | 127 |       cardDiv.classList.add("flashcard");
2767 | 128 | 
2768 | 129 | cardDiv.innerHTML = `
2769 | 130 |   <div class="card-inner">
2770 | 131 |     <div class="card-front">
2771 | 132 |       <button class="remove-btn" onclick="event.stopPropagation(); removeCurrentCard()">✖️</button>
2772 | 133 |       <span class="word">${card.front}</span>
2773 | 134 |       <button class="pronunciation-btn" onclick="event.stopPropagation(); pronounce('${card.front}')">🔊</button>
2774 | 135 |     </div>
2775 | 136 |     <div class="card-back">
2776 | 137 |       <div class="meaning">${card.back}</div>
2777 | 138 |       <button class="pronunciation-btn" onclick="event.stopPropagation(); pronounce('${card.back}')">🔊</button>
2778 | 139 |       ${card.subBack ? `<em class="sub-definition">${card.subBack}</em>` : ""}
2779 | 140 |       ${showExtraData && card.extras.length > 0
2780 | 141 |         ? `<div class="extras">${card.extras.map((e, i) => `${i + 1}. ${e}`).join("<br>")}</div>`
2781 | 142 |         : ""}
2782 | 143 |     </div>
2783 | 144 |   </div>
2784 | 145 | `;
2785 | 146 | 
2786 | 147 | 
2787 | 148 | 
2788 | 149 | 
2789 | 150 |       cardDiv.onclick = () => flipCard(cardDiv);
2790 | 151 |       container.appendChild(cardDiv);
2791 | 152 | 
2792 | 153 |       updateCardCounter();
2793 | 154 |       updateNextButton();
2794 | 155 |     }
2795 | 156 | 
2796 | 157 | 
2797 | 158 | 
2798 | 159 |   function removeCurrentCard() {
2799 | 160 |     const card = flashcards[currentCardIndex];
2800 | 161 |     if (!card) return;
2801 | 162 | 
2802 | 163 |     let knownWords = getKnownWords();
2803 | 164 |     const wordToRemove = isReverseMode() ? card.back : card.front;
2804 | 165 |     knownWords = knownWords.filter(w => w !== wordToRemove);
2805 | 166 |     localStorage.setItem("knownWords", JSON.stringify(knownWords));
2806 | 167 | 
2807 | 168 |     flashcards.splice(currentCardIndex, 1);
2808 | 169 | 
2809 | 170 |     if (currentCardIndex >= flashcards.length) {
2810 | 171 |       currentCardIndex = flashcards.length - 1;
2811 | 172 |     }
2812 | 173 | 
2813 | 174 |     if (flashcards.length === 0) {
2814 | 175 |       document.getElementById("flashcard-container").innerHTML = "<p>No known words to review!</p>";
2815 | 176 |       document.getElementById("card-counter").textContent = "0/0";
2816 | 177 |     } else {
2817 | 178 |       createFlashcard();
2818 | 179 |     }
2819 | 180 | }
2820 | 181 | 
2821 | 182 | 
2822 | 183 |     function flipCard(cardElement) {
2823 | 184 |       const inner = cardElement.querySelector(".card-inner");
2824 | 185 |       inner.classList.toggle("is-flipped");
2825 | 186 |     }
2826 | 187 | 
2827 | 188 |     function showNext() {
2828 | 189 |       if (currentCardIndex < flashcards.length - 1) {
2829 | 190 |         currentCardIndex++;
2830 | 191 |         createFlashcard();
2831 | 192 |       } else {
2832 | 193 |         window.location.href = "/vocabulary";
2833 | 194 |       }
2834 | 195 |     }
2835 | 196 | 
2836 | 197 |     function showPrevious() {
2837 | 198 |       if (currentCardIndex > 0) {
2838 | 199 |         currentCardIndex--;
2839 | 200 |         createFlashcard();
2840 | 201 |       }
2841 | 202 |     }
2842 | 203 | 
2843 | 204 |     function updateCardCounter() {
2844 | 205 |       document.getElementById("card-counter").textContent = `${currentCardIndex + 1}/${flashcards.length}`;
2845 | 206 |     }
2846 | 207 | 
2847 | 208 |     function updateNextButton() {
2848 | 209 |       const nextBtn = document.getElementById("next-button");
2849 | 210 |       if (currentCardIndex === flashcards.length - 1) {
2850 | 211 |         nextBtn.textContent = "Exit";
2851 | 212 |       } else {
2852 | 213 |         nextBtn.textContent = "Next";
2853 | 214 |       }
2854 | 215 |     }
2855 | 216 | 
2856 | 217 |     function toggleExtras() {
2857 | 218 |       showExtraData = document.getElementById("toggle-extra").checked;
2858 | 219 |       createFlashcard();
2859 | 220 |     }
2860 | 221 | 
2861 | 222 |     function pronounce(word) {
2862 | 223 |       const utterance = new SpeechSynthesisUtterance(word);
2863 | 224 |       window.speechSynthesis.speak(utterance);
2864 | 225 |     }
2865 | 226 | 
2866 | 227 |     function shuffleFlashcards() {
2867 | 228 |       flashcards.sort(() => Math.random() - 0.5);
2868 | 229 |       currentCardIndex = 0;
2869 | 230 |       createFlashcard();
2870 | 231 |     }
2871 | 232 | 
2872 | 233 | function importKnownWords(event) {
2873 | 234 |   const file = event.target.files[0];
2874 | 235 |   if (!file) return;
2875 | 236 | 
2876 | 237 |   const reader = new FileReader();
2877 | 238 |   reader.onload = function (e) {
2878 | 239 |     const data = new Uint8Array(e.target.result);
2879 | 240 |     const workbook = XLSX.read(data, { type: 'array' });
2880 | 241 |     const sheet = workbook.Sheets[workbook.SheetNames[0]];
2881 | 242 |     const json = XLSX.utils.sheet_to_json(sheet, { header: 1 }); // Raw array, no headers
2882 | 243 | 
2883 | 244 |     const importedWords = json.flat().filter(Boolean); // Flatten and remove empty cells
2884 | 245 | 
2885 | 246 |     if (importedWords.length > 0) {
2886 | 247 |       localStorage.setItem("knownWords", JSON.stringify(importedWords));
2887 | 248 |       alert("Known words imported successfully!");
2888 | 249 |       location.reload();
2889 | 250 |     } else {
2890 | 251 |       alert("No valid known words found in the file.");
2891 | 252 |     }
2892 | 253 |   };
2893 | 254 |   reader.readAsArrayBuffer(file);
2894 | 255 | }
2895 | 256 | 
2896 | 257 | 
2897 | 258 | function exportKnownWords() {
2898 | 259 |   const knownWords = getKnownWords();
2899 | 260 | 
2900 | 261 |   if (knownWords.length === 0) {
2901 | 262 |     alert("No known words to export!");
2902 | 263 |     return;
2903 | 264 |   }
2904 | 265 | 
2905 | 266 |   const rows = knownWords.map(word => [word]); // Just one column without header
2906 | 267 | 
2907 | 268 |   const worksheet = XLSX.utils.aoa_to_sheet(rows);
2908 | 269 |   const workbook = XLSX.utils.book_new();
2909 | 270 |   XLSX.utils.book_append_sheet(workbook, worksheet, "Known Words");
2910 | 271 | 
2911 | 272 |   XLSX.writeFile(workbook, "known_words.xlsx");
2912 | 273 | }
2913 | 274 | 
2914 | 275 |   </script>
2915 | 276 | 
2916 | 277 |   <br><br><br><br>
2917 | 278 | 
2918 | 279 |   <footer class="text-center text-sm text-gray-500 mt-12 mb-6">
2919 | 280 |     <a href="/" class="text-blue-600 hover:underline">← Back to Home</a>
2920 | 281 |     <p class="mt-1">&copy; 2025 Jawad. All rights reserved.</p>
2921 | 282 |   </footer>
2922 | 283 | 
2923 | 284 |   <script type="module" src="/verifyAccess.js"></script>
2924 | 285 | 
2925 | 286 | </body>
2926 | 287 | </html>
2927 | 288 | 
2928 | 
2929 | 
2930 | --------------------------------------------------------------------------------
2931 | /Mukhosto/vocabulary/style.css:
2932 | --------------------------------------------------------------------------------
2933 |   1 | body {
2934 |   2 |   font-family: Arial, sans-serif;
2935 |   3 |   background-color: #f4f4f4;
2936 |   4 |   text-align: center;
2937 |   5 |   margin: 0;
2938 |   6 |   padding: 0;
2939 |   7 | }
2940 |   8 | 
2941 |   9 | .flashcard-container {
2942 |  10 |   display: flex;
2943 |  11 |   justify-content: center;
2944 |  12 |   align-items: center;
2945 |  13 |   margin-top: 40px;
2946 |  14 |   min-height: 300px;
2947 |  15 | }
2948 |  16 | 
2949 |  17 | .flashcard {
2950 |  18 |   width: 320px;
2951 |  19 |   height: 220px;
2952 |  20 |   perspective: 1000px;
2953 |  21 | }
2954 |  22 | 
2955 |  23 | .card-inner {
2956 |  24 |   width: 100%;
2957 |  25 |   height: 100%;
2958 |  26 |   position: relative;
2959 |  27 |   transform-style: preserve-3d;
2960 |  28 |   transition: transform 0.6s ease;
2961 |  29 | }
2962 |  30 | 
2963 |  31 | .card-inner.is-flipped {
2964 |  32 |   transform: rotateY(180deg);
2965 |  33 | }
2966 |  34 | 
2967 |  35 | .card-front, .card-back {
2968 |  36 |   position: absolute;
2969 |  37 |   top: 0;
2970 |  38 |   left: 0;
2971 |  39 |   width: 100%;
2972 |  40 |   height: 100%;
2973 |  41 |   backface-visibility: hidden;
2974 |  42 |   background-color: #fff;
2975 |  43 |   border: 2px solid #ddd;
2976 |  44 |   border-radius: 12px;
2977 |  45 |   box-sizing: border-box;
2978 |  46 |   padding: 20px;
2979 |  47 |   display: flex;
2980 |  48 |   justify-content: center;
2981 |  49 |   align-items: center;
2982 |  50 |   flex-direction: column;
2983 |  51 |   box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
2984 |  52 | }
2985 |  53 | 
2986 |  54 | .card-front {
2987 |  55 |   font-size: 28px;
2988 |  56 |   z-index: 2;
2989 |  57 | }
2990 |  58 | 
2991 |  59 | .card-back {
2992 |  60 |   transform: rotateY(180deg);
2993 |  61 |   font-size: 18px;
2994 |  62 |   z-index: 1;
2995 |  63 | }
2996 |  64 | 
2997 |  65 | .button-container {
2998 |  66 |   margin-top: 20px;
2999 |  67 | }
3000 |  68 | 
3001 |  69 | .nav-buttons, .known-btn {
3002 |  70 |   background-color: #4CAF50;
3003 |  71 |   color: white;
3004 |  72 |   padding: 10px 20px;
3005 |  73 |   border: none;
3006 |  74 |   font-size: 16px;
3007 |  75 |   margin: 5px;
3008 |  76 |   border-radius: 8px;
3009 |  77 |   cursor: pointer;
3010 |  78 | }
3011 |  79 | 
3012 |  80 | .known-btn {
3013 |  81 |   background-color: #ff9800;
3014 |  82 |   margin-top: 12px;
3015 |  83 | }
3016 |  84 | 
3017 |  85 | .counter {
3018 |  86 |   font-size: 16px;
3019 |  87 |   margin-top: 10px;
3020 |  88 |   color: #555;
3021 |  89 | }
3022 |  90 | 
3023 |  91 | .pronunciation-btn {
3024 |  92 |   background: none;
3025 |  93 |   border: none;
3026 |  94 |   font-size: 20px;
3027 |  95 |   position: absolute;
3028 |  96 |   top: 10px;
3029 |  97 |   right: 10px;
3030 |  98 |   cursor: pointer;
3031 |  99 | }
3032 | 100 | 
3033 | 101 | .extras {
3034 | 102 |   margin-top: 10px;
3035 | 103 |   padding: 8px;
3036 | 104 |   background-color: #f9f9f9;
3037 | 105 |   border-radius: 6px;
3038 | 106 |   font-size: 12px;
3039 | 107 |   color: #444;
3040 | 108 | }
3041 | 109 | 
3042 | 110 | .known-icon {
3043 | 111 |   position: absolute;
3044 | 112 |   top: 10px;
3045 | 113 |   left: 10px;
3046 | 114 |   background-color: rgba(255, 255, 255, 0.1);
3047 | 115 |   border: 2px solid #4CAF50;
3048 | 116 |   border-radius: 50%;
3049 | 117 |   padding: 6px;
3050 | 118 |   font-size: 16px;
3051 | 119 |   cursor: pointer;
3052 | 120 |   z-index: 3;
3053 | 121 |   transition: background-color 0.2s, transform 0.2s;
3054 | 122 | }
3055 | 123 | 
3056 | 124 | .known-icon:hover {
3057 | 125 |   background-color: rgba(76, 175, 80, 0.2);
3058 | 126 |   transform: scale(1.1);
3059 | 127 | }
3060 | 128 | 
3061 | 129 | 
3062 | 130 | .word {
3063 | 131 |   font-size: 28px;        /* was 36px */
3064 | 132 |   font-weight: bold;
3065 | 133 |   color: #333;
3066 | 134 |   padding: 16px 8px;
3067 | 135 | }
3068 | 136 | 
3069 | 137 | .card-back .meaning {
3070 | 138 |   font-size: 18px;        /* was 20px */
3071 | 139 |   font-weight: bold;
3072 | 140 |   color: #1e3a8a;
3073 | 141 |   margin-bottom: 10px;
3074 | 142 | }
3075 | 143 | 
3076 | 144 | .sub-definition {
3077 | 145 |   font-size: 14px;        /* was 16px */
3078 | 146 |   color: #777;
3079 | 147 |   display: block;
3080 | 148 |   margin-bottom: 8px;
3081 | 149 | }
3082 | 150 | 
3083 | 151 | .card-back .extras {
3084 | 152 |   font-size: 12px;        /* was 13px */
3085 | 153 |   color: #444;
3086 | 154 |   background-color: #f3f3f3;
3087 | 155 |   padding: 8px;
3088 | 156 |   border-radius: 8px;
3089 | 157 |   text-align: left;
3090 | 158 | }
3091 | 159 | 
3092 | 160 | .flashcard-container {
3093 | 161 |   transition: opacity 0.3s ease;
3094 | 162 | }
3095 | 163 | 
3096 | 164 | 
3097 | 165 | @keyframes shuffleEffect {
3098 | 166 |   0% { transform: rotate(0deg); }
3099 | 167 |   25% { transform: rotate(2deg); }
3100 | 168 |   50% { transform: rotate(-2deg); }
3101 | 169 |   75% { transform: rotate(1deg); }
3102 | 170 |   100% { transform: rotate(0deg); }
3103 | 171 | }
3104 | 172 | 
3105 | 173 | .shuffle-animation {
3106 | 174 |   animation: shuffleEffect 0.5s ease;
3107 | 175 | }
3108 | 176 | 
3109 | 177 | .top-controls {
3110 | 178 |   margin: 20px 0;
3111 | 179 | }
3112 | 180 | 
3113 | 181 | .shuffle-button {
3114 | 182 |   background-color: #3498db;
3115 | 183 |   color: white;
3116 | 184 |   padding: 10px 20px;
3117 | 185 |   font-size: 16px;
3118 | 186 |   border: none;
3119 | 187 |   border-radius: 8px;
3120 | 188 |   cursor: pointer;
3121 | 189 | }
3122 | 190 | 
3123 | 191 | .shuffle-button:hover {
3124 | 192 |   background-color: #2980b9;
3125 | 193 | }
3126 | 194 | 
3127 | 195 | .extras p {
3128 | 196 |   margin: 4px 0;
3129 | 197 |   padding: 0;
3130 | 198 |   font-size: 12px;
3131 | 199 |   color: #444;
3132 | 200 | }
3133 | 201 | 
3134 | 202 | .flashcard {
3135 | 203 |   position: relative; /* make sure the card is positioned */
3136 | 204 | }
3137 | 205 | 
3138 | 206 | .remove-btn {
3139 | 207 |   position: absolute;
3140 | 208 |   top: 10px;
3141 | 209 |   left: 10px;
3142 | 210 |   background: none;
3143 | 211 |   border: none;
3144 | 212 |   font-size: 24px;
3145 | 213 |   cursor: pointer;
3146 | 214 |   color: #f44336;
3147 | 215 |   z-index: 10;
3148 | 216 | }
3149 | 217 | .remove-btn:hover {
3150 | 218 |   color: #c62828;
3151 | 219 | }
3152 | 220 | 
3153 | 
3154 | 
3155 | 
3156 | --------------------------------------------------------------------------------


--------------------------------------------------------------------------------
/Mukhosto/payment.html:
--------------------------------------------------------------------------------
  1 | <!DOCTYPE html>
  2 | <html lang="en">
  3 | <head>
  4 |   <meta charset="UTF-8" />
  5 |   <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  6 |   <title>Limited Time Offer | Jawad Hossain</title>
  7 |   <script src="https://www.gstatic.com/firebasejs/9.22.2/firebase-app.js"></script>
  8 |   <script src="https://www.gstatic.com/firebasejs/9.22.2/firebase-auth.js"></script>
  9 |   <script src="https://www.gstatic.com/firebasejs/9.22.2/firebase-firestore.js"></script>
 10 |   <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
 11 | </head>
 12 | <body class="bg-gray-100 min-h-screen flex items-center justify-center px-4">
 13 |   <div class="bg-white shadow-xl rounded-2xl max-w-2xl w-full p-8">
 14 |     <div class="text-center">
 15 |       <h1 class="text-3xl font-bold text-gray-800 mb-4">🚀 Special Limited-Time Offer!</h1>
 16 |       <p class="text-lg text-gray-600 mb-2">Get access to our premium content and tools at a massive discount.</p>
 17 |       <p class="text-gray-700 text-md mb-4">Previously <span class="line-through text-red-500">৳1000</span>, now only <span class="text-green-600 font-semibold text-xl">৳499</span>!</p>
 18 |     </div>
 19 | 
 20 |     <div class="bg-gray-50 border border-dashed border-gray-300 p-4 rounded-lg mb-6 text-center">
 21 |       <p class="text-sm text-gray-700 mb-2">Send ৳499 to the following bKash (personal) number:</p>
 22 |       <p class="text-pink-600 font-bold text-2xl tracking-wide">01402633318</p>
 23 |       <p class="text-xs mt-2 text-gray-500">After payment, enter your transaction details below to confirm.</p>
 24 |     </div>
 25 | 
 26 |     <div class="mb-4">
 27 |       <input id="trxid" type="text" placeholder="bKash Transaction ID" class="w-full px-4 py-3 border rounded-lg mb-3 focus:outline-none focus:ring-2 focus:ring-blue-500" />
 28 |       <input id="mobile" type="text" placeholder="Your Mobile Number" class="w-full px-4 py-3 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500" />
 29 |     </div>
 30 | 
 31 |     <button id="submit-btn" onclick="submitTrx()" class="w-full bg-blue-600 hover:bg-blue-700 text-white py-3 rounded-lg font-semibold transition duration-200 flex items-center justify-center">
 32 |       <svg id="submit-spinner" class="w-5 h-5 mr-2 animate-spin hidden" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
 33 |         <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
 34 |         <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8v4a4 4 0 00-4 4H4z" />
 35 |       </svg>
 36 |       <span id="submit-text">Confirm Payment</span>
 37 |     </button>
 38 | 
 39 |     <p id="message" class="text-green-600 text-center mt-4 hidden">🎉 Payment submitted! We’ll verify and activate your access soon.</p>
 40 |     <p id="error" class="text-red-500 text-sm mt-2 text-center"></p>
 41 | 
 42 |     <div class="mt-6 text-center text-sm text-gray-500">
 43 |       1000+ satisfied users have already joined. Don’t miss out on this offer!
 44 |     </div>
 45 |   </div>
 46 | 
 47 |   <script type="module">
 48 |     const submitBtn = document.getElementById("submit-btn");
 49 |     const submitSpinner = document.getElementById("submit-spinner");
 50 |     const submitText = document.getElementById("submit-text");
 51 | 
 52 |     const firebaseConfig = {
 53 |       apiKey: "AIzaSyBqzg9fA14lD_ygNx8CSRiRsnrz1bBNfUw",
 54 |       authDomain: "memory-auth-9515c.firebaseapp.com",
 55 |       projectId: "memory-auth-9515c",
 56 |       storageBucket: "memory-auth-9515c.appspot.com",
 57 |       messagingSenderId: "862743577103",
 58 |       appId: "1:862743577103:web:11fe02f4c24ef2c9c8197a",
 59 |       measurementId: "G-XNT36FMPK6"
 60 |     };
 61 | 
 62 |     import { initializeApp } from "https://www.gstatic.com/firebasejs/9.22.2/firebase-app.js";
 63 |     import { getAuth, onAuthStateChanged } from "https://www.gstatic.com/firebasejs/9.22.2/firebase-auth.js";
 64 |     import { getFirestore, doc, updateDoc } from "https://www.gstatic.com/firebasejs/9.22.2/firebase-firestore.js";
 65 | 
 66 |     const app = initializeApp(firebaseConfig);
 67 |     const auth = getAuth(app);
 68 |     const db = getFirestore(app);
 69 | 
 70 |     const trxInput = document.getElementById("trxid");
 71 |     const mobileInput = document.getElementById("mobile");
 72 |     const msg = document.getElementById("message");
 73 |     const error = document.getElementById("error");
 74 | 
 75 |     let currentUID = null;
 76 | 
 77 |     onAuthStateChanged(auth, user => {
 78 |       if (!user) {
 79 |         window.location.href = "login.html";
 80 |         return;
 81 |       }
 82 |       currentUID = user.uid;
 83 |     });
 84 | 
 85 |     window.submitTrx = async () => {
 86 |       error.textContent = "";
 87 |       const trx = trxInput.value.trim();
 88 |       const mobile = mobileInput.value.trim();
 89 | 
 90 |       if (!trx || !mobile) {
 91 |         error.textContent = "Please fill in both the Transaction ID and Mobile Number.";
 92 |         return;
 93 |       }
 94 | 
 95 |       // Show loading
 96 |       submitSpinner.classList.remove("hidden");
 97 |       submitText.textContent = "Submitting...";
 98 |       submitBtn.disabled = true;
 99 | 
100 |       try {
101 |         const ref = doc(db, "users", currentUID);
102 |         await updateDoc(ref, {
103 |           trxid: trx,
104 |           mobile: mobile,
105 |           paymentStatus: "pending",
106 |           paid: true
107 |         });
108 | 
109 |         msg.classList.remove("hidden");
110 |         setTimeout(() => {
111 |           window.location.href = "index.html";
112 |         }, 2000);
113 |       } catch (err) {
114 |         error.textContent = "Failed to save. Try again.";
115 |         submitSpinner.classList.add("hidden");
116 |         submitText.textContent = "Confirm Payment";
117 |         submitBtn.disabled = false;
118 |       }
119 |     };
120 |   </script>
121 | </body>
122 | </html>
123 | 


--------------------------------------------------------------------------------
/Mukhosto/profile.html:
--------------------------------------------------------------------------------
  1 | <!DOCTYPE html>
  2 | <html lang="en">
  3 | <head>
  4 |   <meta charset="UTF-8" />
  5 |   <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  6 |   <title>Your Profile</title>
  7 |   <script src="https://www.gstatic.com/firebasejs/9.22.2/firebase-app.js"></script>
  8 |   <script src="https://www.gstatic.com/firebasejs/9.22.2/firebase-auth.js"></script>
  9 |   <script src="https://www.gstatic.com/firebasejs/9.22.2/firebase-firestore.js"></script>
 10 |   <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
 11 | </head>
 12 | <body class="bg-gradient-to-br from-gray-100 to-gray-300 min-h-screen flex items-center justify-center p-4">
 13 |   <div class="bg-white shadow-xl p-8 rounded-2xl max-w-md w-full space-y-6">
 14 |     <div class="text-center">
 15 |       <h1 class="text-3xl font-bold text-gray-800 mb-2">👤 Your Profile</h1>
 16 |       <p class="text-sm text-gray-500">Welcome back!</p>
 17 |     </div>
 18 | 
 19 |     <div class="space-y-4 text-gray-700">
 20 |       <div>
 21 |         <p class="text-xs font-medium text-gray-500 uppercase">Name</p>
 22 |         <p id="user-name" class="text-lg font-semibold text-gray-800">Loading...</p>
 23 |       </div>
 24 | 
 25 |       <div>
 26 |         <p class="text-xs font-medium text-gray-500 uppercase">Email</p>
 27 |         <p id="user-email" class="text-base text-blue-600 break-words">Loading...</p>
 28 |       </div>
 29 | 
 30 |       <div>
 31 |         <p class="text-xs font-medium text-gray-500 uppercase">Account Status</p>
 32 |         <p id="user-status" class="inline-block px-3 py-1 text-sm rounded-full bg-yellow-100 text-yellow-700 font-medium">Checking...</p>
 33 |       </div>
 34 | 
 35 |       <div>
 36 |         <p class="text-xs font-medium text-gray-500 uppercase">Signed in with</p>
 37 |         <p id="provider" class="text-green-600 font-medium">Loading...</p>
 38 |       </div>
 39 |     </div>
 40 | 
 41 |     <div class="mt-6 flex flex-wrap gap-2 justify-between items-center">
 42 |       <a href="/" class="text-sm text-blue-600 hover:underline">← Back to Home</a>
 43 |       <div class="flex gap-2">
 44 |         <button onclick="resetPassword()" class="bg-blue-500 text-white px-4 py-2 rounded text-sm hover:bg-blue-600">Reset Password</button>
 45 |         <button onclick="logout()" class="bg-red-500 text-white px-4 py-2 rounded text-sm hover:bg-red-600">Logout</button>
 46 |       </div>
 47 |     </div>
 48 |   </div>
 49 | 
 50 |   <script type="module">
 51 |     import { initializeApp } from "https://www.gstatic.com/firebasejs/9.22.2/firebase-app.js";
 52 |     import {
 53 |       getAuth,
 54 |       onAuthStateChanged,
 55 |       signOut,
 56 |       sendPasswordResetEmail
 57 |     } from "https://www.gstatic.com/firebasejs/9.22.2/firebase-auth.js";
 58 |     import {
 59 |       getFirestore,
 60 |       doc,
 61 |       getDoc
 62 |     } from "https://www.gstatic.com/firebasejs/9.22.2/firebase-firestore.js";
 63 | 
 64 |     const firebaseConfig = {
 65 |       apiKey: "AIzaSyBqzg9fA14lD_ygNx8CSRiRsnrz1bBNfUw",
 66 |       authDomain: "memory-auth-9515c.firebaseapp.com",
 67 |       projectId: "memory-auth-9515c",
 68 |       storageBucket: "memory-auth-9515c.appspot.com",
 69 |       messagingSenderId: "862743577103",
 70 |       appId: "1:862743577103:web:11fe02f4c24ef2c9c8197a"
 71 |     };
 72 | 
 73 |     const app = initializeApp(firebaseConfig);
 74 |     const auth = getAuth(app);
 75 |     const db = getFirestore(app);
 76 | 
 77 |     onAuthStateChanged(auth, async user => {
 78 |       if (!user) {
 79 |         window.location.href = "login.html";
 80 |         return;
 81 |       }
 82 | 
 83 |       document.getElementById("user-email").textContent = user.email;
 84 | 
 85 |       const provider = user.providerData[0]?.providerId || "unknown";
 86 |       document.getElementById("provider").textContent =
 87 |         provider === "password" ? "Email & Password" :
 88 |         provider === "google.com" ? "Google" : provider;
 89 | 
 90 |       try {
 91 |         const docRef = doc(db, "users", user.uid);
 92 |         const docSnap = await getDoc(docRef);
 93 |         if (docSnap.exists()) {
 94 |           const userData = docSnap.data();
 95 |           document.getElementById("user-name").textContent = userData.name || "N/A";
 96 | 
 97 |           const statusEl = document.getElementById("user-status");
 98 |           if (userData.paid === true && userData.paymentStatus === "verified") {
 99 |             statusEl.textContent = "Verified";
100 |             statusEl.className = "inline-block px-3 py-1 text-sm rounded-full bg-green-100 text-green-700 font-medium";
101 |           } else if (userData.paymentStatus === "pending") {
102 |             statusEl.textContent = "Pending";
103 |             statusEl.className = "inline-block px-3 py-1 text-sm rounded-full bg-yellow-100 text-yellow-700 font-medium";
104 |           } else {
105 |             statusEl.textContent = "Not Verified";
106 |             statusEl.className = "inline-block px-3 py-1 text-sm rounded-full bg-red-100 text-red-700 font-medium";
107 |           }
108 |         } else {
109 |           document.getElementById("user-name").textContent = "Unknown User";
110 |         }
111 |       } catch (error) {
112 |         console.error("Error fetching user profile:", error);
113 |       }
114 |     });
115 | 
116 |     window.logout = () => {
117 |       signOut(auth).then(() => {
118 |         window.location.href = "login.html";
119 |       });
120 |     };
121 | 
122 |     window.resetPassword = () => {
123 |       const user = auth.currentUser;
124 |       if (user && user.email) {
125 |         sendPasswordResetEmail(auth, user.email)
126 |           .then(() => {
127 |             alert('Password reset email sent! Please check your inbox.');
128 |           })
129 |           .catch((error) => {
130 |             console.error('Error sending password reset email:', error);
131 |             alert('Error sending reset email. Try again later.');
132 |           });
133 |       } else {
134 |         alert('No user is signed in.');
135 |       }
136 |     };
137 |   </script>
138 | </body>
139 | </html>
140 | 


--------------------------------------------------------------------------------
/Mukhosto/sw.js:
--------------------------------------------------------------------------------
1 | self.addEventListener('install', event => {
2 |   console.log('Service Worker installed');
3 | });
4 | 
5 | self.addEventListener('fetch', function (event) {
6 |   // Add offline cache logic here if needed
7 | });
8 | 


--------------------------------------------------------------------------------
/Mukhosto/verifyAccess.js:
--------------------------------------------------------------------------------
 1 | import { initializeApp } from "https://www.gstatic.com/firebasejs/9.22.2/firebase-app.js";
 2 | import {
 3 |   getAuth,
 4 |   onAuthStateChanged,
 5 | } from "https://www.gstatic.com/firebasejs/9.22.2/firebase-auth.js";
 6 | import {
 7 |   getFirestore,
 8 |   doc,
 9 |   getDoc,
10 | } from "https://www.gstatic.com/firebasejs/9.22.2/firebase-firestore.js";
11 | 
12 | // ✅ Your Firebase config
13 | const firebaseConfig = {
14 |   apiKey: "AIzaSyBqzg9fA14lD_ygNx8CSRiRsnrz1bBNfUw",
15 |   authDomain: "memory-auth-9515c.firebaseapp.com",
16 |   projectId: "memory-auth-9515c",
17 |   storageBucket: "memory-auth-9515c.appspot.com",
18 |   messagingSenderId: "862743577103",
19 |   appId: "1:862743577103:web:11fe02f4c24ef2c9c8197a",
20 |   measurementId: "G-XNT36FMPK6"
21 | };
22 | 
23 | const app = initializeApp(firebaseConfig);
24 | const auth = getAuth(app);
25 | const db = getFirestore(app);
26 | 
27 | onAuthStateChanged(auth, async (user) => {
28 |   if (!user) {
29 |     window.location.href = "/login.html";
30 |     return;
31 |   }
32 | 
33 |   const userRef = doc(db, "users", user.uid);
34 |   const userSnap = await getDoc(userRef);
35 | 
36 |   if (!userSnap.exists()) {
37 |     console.error("User document does not exist.");
38 |     window.location.href = "/login.html";
39 |     return;
40 |   }
41 | 
42 |   const userData = userSnap.data();
43 | 
44 |   // ✅ MAIN LOGIC
45 |   if (userData.paymentStatus === "verified") {
46 |     // Payment fully verified, allow access
47 |     console.log("Access granted: Payment verified");
48 |     return;
49 |   } else {
50 |     if (userData.paid === true && user.emailVerified) {
51 |       // Paid is true AND email is verified, allow access
52 |       console.log("Access granted: Paid and email verified");
53 |       return;
54 |     }
55 | 
56 |     if (userData.paid !== true) {
57 |       // Paid is not true, go to payment page
58 |       window.location.href = "/payment.html";
59 |       return;
60 |     }
61 | 
62 | 
63 |   }
64 | });
65 | 


--------------------------------------------------------------------------------
/Mukhosto/vocabulary/data.xlsx:
--------------------------------------------------------------------------------
https://raw.githubusercontent.com/ImJawadHossain/mukhosto-production/16a8428562f7e3480a813c98443722a9167b00eb/Mukhosto/vocabulary/data.xlsx


--------------------------------------------------------------------------------
/Mukhosto/vocabulary/flashcard.html:
--------------------------------------------------------------------------------
 1 | <!DOCTYPE html>
 2 | <html lang="en">
 3 | <head>
 4 |   <meta charset="UTF-8" />
 5 |   <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
 6 |   <title>Vocabulary Flashcards</title>
 7 |   <link rel="stylesheet" href="style.css">
 8 |   <script src="https://cdn.jsdelivr.net/npm/xlsx@0.18.5/dist/xlsx.full.min.js"></script>
 9 |   <script src="https://www.gstatic.com/firebasejs/9.22.2/firebase-app.js"></script>
10 |   <script src="https://www.gstatic.com/firebasejs/9.22.2/firebase-auth.js"></script>
11 | </head>
12 | <body>
13 | 
14 | <h1>
15 |   <a href="/vocabulary" style="color: inherit; text-decoration: none;">
16 |     Vocabulary Flashcards
17 |   </a>
18 | </h1>
19 | 
20 | <div class="flex justify-center mb-4">
21 |   <label class="flex items-center space-x-2 text-sm text-gray-700">
22 |     <input type="checkbox" id="reverse-toggle" class="accent-blue-600">
23 |     <span>Reverse Practice</span>
24 |   </label>
25 | </div>
26 | 
27 | <label>
28 |   <input type="checkbox" id="toggle-extra" onchange="toggleExtras()" />
29 |   Show Extra Data
30 | </label>
31 | 
32 | <div class="top-controls">
33 |   <button class="shuffle-button" onclick="shuffleCards()">Shuffle Cards</button>
34 | </div>
35 | 
36 | 
37 | <div id="flashcard-container" class="flashcard-container"></div>
38 | 
39 | <div class="button-container">
40 |   <button class="nav-buttons" onclick="showPrevious()">Previous</button>
41 |   <button class="nav-buttons" id="next-btn" onclick="showNext()">Next</button>
42 | </div>
43 | 
44 | <div class="counter" id="card-counter">1/0</div>
45 | 
46 | <script src="flashcard.js"></script>
47 | 
48 | <br><br><br><br>
49 | 
50 | <footer class="text-center text-sm text-gray-500 mt-12 mb-6">
51 |   <a href="/" class="text-blue-600 hover:underline">← Back to Home</a>
52 |   <p class="mt-1">&copy; 2025 Jawad. All rights reserved.</p>
53 | </footer>
54 | 
55 | <script type="module" src="../verifyAccess.js"></script>
56 | 
57 | </body>
58 | </html>
59 | 


--------------------------------------------------------------------------------
/Mukhosto/vocabulary/flashcard.js:
--------------------------------------------------------------------------------
  1 | let flashcards = [];
  2 | let currentCardIndex = 0;
  3 | let showExtraData = false;
  4 | 
  5 | function getKnownWords() {
  6 |   return JSON.parse(localStorage.getItem("knownWords") || "[]");
  7 | }
  8 | 
  9 | function isReverseMode() {
 10 |   return localStorage.getItem("reversePractice") === "1";
 11 | }
 12 | 
 13 | document.addEventListener("DOMContentLoaded", () => {
 14 |   const toggle = document.getElementById("reverse-toggle");
 15 |   if (!toggle) return;
 16 | 
 17 |   toggle.checked = isReverseMode();
 18 | 
 19 |   toggle.addEventListener("change", () => {
 20 |     localStorage.setItem("reversePractice", toggle.checked ? "1" : "0");
 21 | 
 22 |     const params = new URLSearchParams(window.location.search);
 23 |     params.set("reverse", toggle.checked ? "1" : "0");
 24 |     window.location.search = params.toString();
 25 |   });
 26 | });
 27 | 
 28 | function saveKnownWord(word) {
 29 |   const knownWords = getKnownWords();
 30 |   if (!knownWords.includes(word)) {
 31 |     knownWords.push(word);
 32 |     localStorage.setItem("knownWords", JSON.stringify(knownWords));
 33 |   }
 34 | }
 35 | 
 36 | function getRangeFromURL() {
 37 |   const params = new URLSearchParams(window.location.search);
 38 |   const start = parseInt(params.get("start")) || 1;
 39 |   const end = parseInt(params.get("end")) || Number.MAX_SAFE_INTEGER;
 40 |   return { start, end };
 41 | }
 42 | 
 43 | document.addEventListener('keydown', (e) => {
 44 |   if (e.key === "ArrowRight") {
 45 |     showNext();
 46 |   } else if (e.key === "ArrowLeft") {
 47 |     showPrevious();
 48 |   } else if (e.key === " " || e.key === "Enter") {
 49 |     e.preventDefault(); // stop page from scrolling
 50 |     const card = document.querySelector(".flashcard");
 51 |     if (card) flipCard(card);
 52 |   }
 53 | });
 54 | 
 55 | window.addEventListener("DOMContentLoaded", () => {
 56 |   fetch("data.xlsx")
 57 |     .then(res => res.arrayBuffer())
 58 |     .then(buffer => {
 59 |       const reverse = isReverseMode();
 60 | 
 61 |       const workbook = XLSX.read(buffer, { type: "array" });
 62 |       const sheet = workbook.Sheets[workbook.SheetNames[0]];
 63 |       const json = XLSX.utils.sheet_to_json(sheet);
 64 | 
 65 |       const { start, end } = getRangeFromURL();
 66 |       const knownWords = getKnownWords();
 67 | 
 68 |       let selectedRows = json.slice(start - 1, end)
 69 |         .filter(row => !knownWords.includes(row["FrontData"] || ""));
 70 | 
 71 |       flashcards = selectedRows.map(row => ({
 72 |         front: reverse ? (row["BackData"] || "") : (row["FrontData"] || ""),
 73 |         back: reverse ? (row["FrontData"] || "") : (row["BackData"] || ""),
 74 |         subBack: row["SubBack"] || "",
 75 |         extras: Object.keys(row).filter(k => k.startsWith("ExtraData")).map(k => row[k]),
 76 |         reverseOriginal: row["FrontData"] || ""
 77 |       }));
 78 | 
 79 |       createFlashcard();
 80 |     })
 81 |     .catch(err => {
 82 |       document.getElementById("flashcard-container").innerHTML = `<p>Error loading file: ${err.message}</p>`;
 83 |     });
 84 | });
 85 | 
 86 | function createFlashcard() {
 87 |   const container = document.getElementById("flashcard-container");
 88 |   container.innerHTML = "";
 89 | 
 90 |   if (flashcards.length === 0) {
 91 |     container.innerHTML = "<p>No cards to review!</p>";
 92 |     return;
 93 |   }
 94 | 
 95 |   const card = flashcards[currentCardIndex];
 96 |   const cardDiv = document.createElement("div");
 97 |   cardDiv.classList.add("flashcard");
 98 | 
 99 |   cardDiv.innerHTML = `
100 |     <div class="card-inner">
101 |       <div class="card-front">
102 |         <span class="word">${card.front}</span>
103 |         <button class="pronunciation-btn" onclick="event.stopPropagation(); pronounce('${card.front}')">🔊</button>
104 |         <button class="known-icon" onclick="event.stopPropagation(); markAsKnown('${card.reverseOriginal || card.front}')">✅</button>
105 |       </div>
106 |       <div class="card-back">
107 |         <div class="meaning">${card.back}</div>
108 |         <button class="pronunciation-btn" onclick="event.stopPropagation(); pronounce('${card.back}')">🔊</button>
109 |         <button class="known-icon" onclick="event.stopPropagation(); markAsKnown('${card.reverseOriginal || card.front}')">✅</button>
110 |         ${card.subBack ? `<em class="sub-definition">${card.subBack}</em>` : ""}
111 |         ${showExtraData && card.extras.length > 0
112 |           ? `<div class="extras">${card.extras.map((e, i) => `<p>${i + 1}. ${e}</p>`).join("")}</div>`
113 |           : ""}
114 |       </div>
115 |     </div>
116 |   `;
117 | 
118 |   cardDiv.onclick = () => flipCard(cardDiv);
119 |   container.appendChild(cardDiv);
120 | 
121 |   updateCardCounter();
122 | }
123 | 
124 | function flipCard(cardElement) {
125 |   const inner = cardElement.querySelector(".card-inner");
126 |   inner.classList.toggle("is-flipped");
127 | }
128 | 
129 | function showNext() {
130 |   if (currentCardIndex < flashcards.length - 1) {
131 |     currentCardIndex++;
132 |     createFlashcard();
133 |   } else {
134 |     window.location.href = '/vocabulary'; // redirect to /vocabulary
135 |   }
136 | }
137 | 
138 | function showPrevious() {
139 |   if (currentCardIndex > 0) {
140 |     currentCardIndex--;
141 |     createFlashcard();
142 |   }
143 | }
144 | 
145 | function updateCardCounter() {
146 |   document.getElementById("card-counter").textContent = `${currentCardIndex + 1}/${flashcards.length}`;
147 | 
148 |   const nextBtn = document.getElementById("next-btn");
149 |   if (currentCardIndex === flashcards.length - 1) {
150 |     nextBtn.textContent = "Exit";
151 |   } else {
152 |     nextBtn.textContent = "Next";
153 |   }
154 | }
155 | 
156 | function toggleExtras() {
157 |   showExtraData = document.getElementById("toggle-extra").checked;
158 |   createFlashcard();
159 | }
160 | 
161 | function pronounce(word) {
162 |   const utterance = new SpeechSynthesisUtterance(word);
163 |   window.speechSynthesis.speak(utterance);
164 | }
165 | 
166 | function markAsKnown(word) {
167 |   saveKnownWord(word);
168 |   flashcards.splice(currentCardIndex, 1);
169 |   if (currentCardIndex >= flashcards.length) currentCardIndex = flashcards.length - 1;
170 |   createFlashcard();
171 | }
172 | 
173 | function shuffleCards() {
174 |   const container = document.getElementById("flashcard-container");
175 | 
176 |   // Add shuffle animation class
177 |   container.classList.add("shuffle-animation");
178 | 
179 |   setTimeout(() => {
180 |     flashcards.sort(() => Math.random() - 0.5);
181 |     currentCardIndex = 0;
182 |     createFlashcard();
183 | 
184 |     // Remove animation class after shuffle
185 |     container.classList.remove("shuffle-animation");
186 |   }, 500);
187 | }
188 | 


--------------------------------------------------------------------------------
/Mukhosto/vocabulary/index.html:
--------------------------------------------------------------------------------
 1 | <!DOCTYPE html>
 2 | <html lang="en">
 3 | <head>
 4 |   <meta charset="UTF-8" />
 5 |   <meta name="viewport" content="width=device-width, initial-scale=1.0" />
 6 |   <title>Vocabulary Sets</title>
 7 |   <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
 8 |   <link rel="stylesheet" href="style.css">
 9 |   <script src="https://www.gstatic.com/firebasejs/9.22.2/firebase-app.js"></script>
10 | <script src="https://www.gstatic.com/firebasejs/9.22.2/firebase-auth.js"></script>
11 | 
12 | </head>
13 | <body class="bg-gradient-to-b from-blue-50 to-white min-h-screen py-10 px-4">
14 |   <div class="max-w-4xl mx-auto text-center">
15 |     <h1 class="text-4xl font-bold text-blue-800 mb-4">Vocabulary Sets</h1>
16 |     <p class="text-gray-600 mb-6 text-lg">Practice vocabulary in small, manageable sets for better retention.</p>
17 | 
18 | 
19 | 
20 |     <!-- Reset Progress Button -->
21 | <div class="flex flex-wrap justify-center items-center gap-4 mb-8">
22 |   <button id="reset-progress" class="bg-red-500 text-white px-4 py-2 rounded-xl hover:bg-red-600 transition">
23 |     🔁 Reset Progress
24 |   </button>
25 |   <a href="known-words.html" class="bg-indigo-600 text-white px-4 py-2 rounded-xl shadow hover:bg-indigo-700 transition">
26 |     📚 Review Known Words
27 |   </a>
28 | </div>
29 | 
30 | 
31 | 
32 |   
33 | 
34 | 
35 |     <div id="sets-container" class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 gap-6">
36 |       <!-- Sets injected here -->
37 |     </div>
38 |   </div>
39 | 
40 |   <script src="https://cdn.jsdelivr.net/npm/xlsx@0.18.5/dist/xlsx.full.min.js"></script>
41 |   <script src="index.js"></script>
42 | 
43 | 
44 |   <footer class="text-center text-sm text-gray-500 mt-12 mb-6">
45 |   <a href="/" class="text-blue-600 hover:underline">← Back to Home</a>
46 |   <p class="mt-1">&copy; 2025 Jawad. All rights reserved.</p>
47 | </footer>
48 | 
49 | <script type="module" src="/verifyAccess.js"></script>
50 | 
51 | 
52 | 
53 | </body>
54 | </html>


--------------------------------------------------------------------------------
/Mukhosto/vocabulary/index.js:
--------------------------------------------------------------------------------
 1 | function getKnownWords() {
 2 |   return JSON.parse(localStorage.getItem("knownWords") || "[]");
 3 | }
 4 | 
 5 | 
 6 | 
 7 | const chunkSize = 20;
 8 | const setsContainer = document.getElementById("sets-container");
 9 | const colorClasses = ['blue', 'green', 'purple', 'pink', 'yellow', 'red', 'indigo'];
10 | 
11 | document.addEventListener("DOMContentLoaded", () => {
12 |   const resetBtn = document.getElementById("reset-progress");
13 |   if (resetBtn) {
14 |     resetBtn.addEventListener("click", () => {
15 |       if (confirm("Are you sure you want to reset your progress? This will unmark all known words.")) {
16 |         localStorage.removeItem("knownWords");
17 |         window.location.reload();
18 |       }
19 |     });
20 |   }
21 | 
22 |   fetch('data.xlsx')
23 |     .then(res => res.arrayBuffer())
24 |     .then(buffer => {
25 |       const workbook = XLSX.read(buffer, { type: 'array' });
26 |       const sheet = workbook.Sheets[workbook.SheetNames[0]];
27 |       const data = XLSX.utils.sheet_to_json(sheet);
28 | 
29 |       const knownWords = getKnownWords();
30 |       const totalWords = data.filter(row => row["FrontData"]).length;
31 | 
32 |       for (let i = 0; i < Math.ceil(totalWords / chunkSize); i++) {
33 |         const start = i * chunkSize;
34 |         const end = Math.min((i + 1) * chunkSize, totalWords);
35 | 
36 |         const selectedRows = data.slice(start, end)
37 |           .filter(row => row["FrontData"] && !knownWords.includes(row["FrontData"]));
38 | 
39 |         const color = colorClasses[i % colorClasses.length];
40 | 
41 | 
42 | 
43 | 
44 | 
45 | const sliceRows = data.slice(start, end).filter(r => r["FrontData"]);
46 | const totalInSet = sliceRows.length;
47 | const knownInSet = sliceRows.filter(r => knownWords.includes(r["FrontData"])).length;
48 | const pct = totalInSet ? Math.round((knownInSet / totalInSet) * 100) : 0;
49 | 
50 | const card = document.createElement('div');
51 | card.className = `bg-white p-6 rounded-2xl shadow-md hover:shadow-xl transition`;
52 | 
53 | card.innerHTML = `
54 |   <h2 class="text-2xl font-semibold text-${color}-600 mb-2">Set ${i + 1}</h2>
55 |   <p class="text-gray-500 mb-2">Words ${start + 1} – ${end}</p>
56 | 
57 |   <div class="w-full bg-gray-200 rounded-full h-2 mb-2">
58 |     <div class="bg-${color}-600 h-2 rounded-full" style="width: ${pct}%;"></div>
59 |   </div>
60 |   <p class="text-sm text-gray-600 mb-4">${knownInSet}/${totalInSet} known (${pct}%)</p>
61 | 
62 |   ${
63 |     knownInSet < totalInSet
64 |       ? `<a href="flashcard.html?start=${start + 1}&end=${end}&reverse=${document.getElementById('reverse-toggle')?.checked ? '1' : '0'}" class="inline-block bg-${color}-600 text-white px-4 py-2 rounded-xl">Start</a>`
65 |       : `<div class="text-green-600 font-semibold">✅ Completed</div>`
66 |   }
67 | `;
68 | 
69 | setsContainer.appendChild(card);
70 | 
71 | 
72 | 
73 | 
74 | 
75 | 
76 |       }
77 | 
78 |       if (totalWords === 0) {
79 |         setsContainer.innerHTML = `<p class="text-green-600">🎉 You've learned all the words! Reset to start over.</p>`;
80 |       }
81 |     })
82 |     .catch(err => {
83 |       setsContainer.innerHTML = `<p class="text-red-500">Error loading vocabulary file: ${err.message}</p>`;
84 |     });
85 | });
86 | 


--------------------------------------------------------------------------------
/Mukhosto/vocabulary/known-words.html:
--------------------------------------------------------------------------------
  1 | <!DOCTYPE html>
  2 | <html lang="en">
  3 | <head>
  4 |   <meta charset="UTF-8" />
  5 |   <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  6 |   <title>Known Vocabulary Flashcards</title>
  7 |   <link rel="stylesheet" href="style.css">
  8 |   <script src="https://cdn.jsdelivr.net/npm/xlsx@0.18.5/dist/xlsx.full.min.js"></script>
  9 |   <script src="https://www.gstatic.com/firebasejs/9.22.2/firebase-app.js"></script>
 10 |   <script src="https://www.gstatic.com/firebasejs/9.22.2/firebase-auth.js"></script>
 11 | </head>
 12 | <body>
 13 | 
 14 |   <button onclick="exportKnownWords()" class="nav-buttons" style="margin-bottom: 20px;">⬇ Export Known Words</button>
 15 |   <input type="file" id="import-file" accept=".xlsx" style="display: none;" onchange="importKnownWords(event)">
 16 |   <button onclick="document.getElementById('import-file').click()" class="nav-buttons">⬆ Import Known Words</button>
 17 | 
 18 |   <h1>
 19 |     <a href="/vocabulary" style="color: inherit; text-decoration: none;">
 20 |       Known Vocabulary Flashcards
 21 |     </a>
 22 |   </h1>
 23 | 
 24 |   <div class="flex justify-center mb-4">
 25 |     <label class="flex items-center space-x-2 text-sm text-gray-700">
 26 |       <input type="checkbox" id="reverse-toggle" class="accent-blue-600">
 27 |       <span>Reverse Practice</span>
 28 |     </label>
 29 |   </div>
 30 | 
 31 |   <label>
 32 |     <input type="checkbox" id="toggle-extra" onchange="toggleExtras()" />
 33 |     Show Extra Data
 34 |   </label>
 35 | 
 36 |   <br>
 37 | 
 38 |   <button onclick="shuffleFlashcards()" class="nav-buttons" style="margin-top: 10px;">🔀 Shuffle Cards</button>
 39 | 
 40 |   <div id="flashcard-container" class="flashcard-container"></div>
 41 | 
 42 |   <div class="button-container">
 43 |     <button class="nav-buttons" id="previous-button" onclick="showPrevious()">Previous</button>
 44 |     <button class="nav-buttons" id="next-button" onclick="showNext()">Next</button>
 45 |   </div>
 46 | 
 47 |   <div class="counter" id="card-counter">1/0</div>
 48 | 
 49 |   <script>
 50 |     let flashcards = [];
 51 |     let currentCardIndex = 0;
 52 |     let showExtraData = false;
 53 | 
 54 |     function getKnownWords() {
 55 |       return JSON.parse(localStorage.getItem("knownWords") || "[]");
 56 |     }
 57 | 
 58 |     function isReverseMode() {
 59 |       return localStorage.getItem("reversePractice") === "1";
 60 |     }
 61 | 
 62 |     document.addEventListener("DOMContentLoaded", () => {
 63 |       const toggle = document.getElementById("reverse-toggle");
 64 |       if (!toggle) return;
 65 | 
 66 |       toggle.checked = isReverseMode();
 67 | 
 68 |       toggle.addEventListener("change", () => {
 69 |         localStorage.setItem("reversePractice", toggle.checked ? "1" : "0");
 70 |         const params = new URLSearchParams(window.location.search);
 71 |         params.set("reverse", toggle.checked ? "1" : "0");
 72 |         window.location.search = params.toString();
 73 |       });
 74 |     });
 75 | 
 76 | 
 77 |     document.addEventListener('keydown', (e) => {
 78 |   if (e.key === "ArrowRight") {
 79 |     showNext();
 80 |   } else if (e.key === "ArrowLeft") {
 81 |     showPrevious();
 82 |   } else if (e.key === " " || e.key === "Enter") {
 83 |     e.preventDefault(); // stop page from scrolling
 84 |     const card = document.querySelector(".flashcard");
 85 |     if (card) flipCard(card);
 86 |   }
 87 | });
 88 | 
 89 | 
 90 |     window.addEventListener("DOMContentLoaded", () => {
 91 |       fetch("data.xlsx")
 92 |         .then(res => res.arrayBuffer())
 93 |         .then(buffer => {
 94 |           const workbook = XLSX.read(buffer, { type: "array" });
 95 |           const sheet = workbook.Sheets[workbook.SheetNames[0]];
 96 |           const json = XLSX.utils.sheet_to_json(sheet);
 97 | 
 98 |           const knownWords = getKnownWords();
 99 |           const reverse = isReverseMode();
100 | 
101 |           flashcards = json.filter(row => knownWords.includes(row["FrontData"]))
102 |             .map(row => ({
103 |               front: reverse ? (row["BackData"] || "") : (row["FrontData"] || ""),
104 |               back: reverse ? (row["FrontData"] || "") : (row["BackData"] || ""),
105 |               subBack: row["SubBack"] || "",
106 |               extras: Object.keys(row).filter(k => k.startsWith("ExtraData")).map(k => row[k])
107 |             }));
108 | 
109 |           createFlashcard();
110 |         })
111 |         .catch(err => {
112 |           document.getElementById("flashcard-container").innerHTML = `<p>Error loading file: ${err.message}</p>`;
113 |         });
114 |     });
115 | 
116 |     function createFlashcard() {
117 |       const container = document.getElementById("flashcard-container");
118 |       container.innerHTML = "";
119 | 
120 |       if (flashcards.length === 0) {
121 |         container.innerHTML = "<p>No known words to review!</p>";
122 |         return;
123 |       }
124 | 
125 |       const card = flashcards[currentCardIndex];
126 |       const cardDiv = document.createElement("div");
127 |       cardDiv.classList.add("flashcard");
128 | 
129 | cardDiv.innerHTML = `
130 |   <div class="card-inner">
131 |     <div class="card-front">
132 |       <button class="remove-btn" onclick="event.stopPropagation(); removeCurrentCard()">✖️</button>
133 |       <span class="word">${card.front}</span>
134 |       <button class="pronunciation-btn" onclick="event.stopPropagation(); pronounce('${card.front}')">🔊</button>
135 |     </div>
136 |     <div class="card-back">
137 |       <div class="meaning">${card.back}</div>
138 |       <button class="pronunciation-btn" onclick="event.stopPropagation(); pronounce('${card.back}')">🔊</button>
139 |       ${card.subBack ? `<em class="sub-definition">${card.subBack}</em>` : ""}
140 |       ${showExtraData && card.extras.length > 0
141 |         ? `<div class="extras">${card.extras.map((e, i) => `${i + 1}. ${e}`).join("<br>")}</div>`
142 |         : ""}
143 |     </div>
144 |   </div>
145 | `;
146 | 
147 | 
148 | 
149 | 
150 |       cardDiv.onclick = () => flipCard(cardDiv);
151 |       container.appendChild(cardDiv);
152 | 
153 |       updateCardCounter();
154 |       updateNextButton();
155 |     }
156 | 
157 | 
158 | 
159 |   function removeCurrentCard() {
160 |     const card = flashcards[currentCardIndex];
161 |     if (!card) return;
162 | 
163 |     let knownWords = getKnownWords();
164 |     const wordToRemove = isReverseMode() ? card.back : card.front;
165 |     knownWords = knownWords.filter(w => w !== wordToRemove);
166 |     localStorage.setItem("knownWords", JSON.stringify(knownWords));
167 | 
168 |     flashcards.splice(currentCardIndex, 1);
169 | 
170 |     if (currentCardIndex >= flashcards.length) {
171 |       currentCardIndex = flashcards.length - 1;
172 |     }
173 | 
174 |     if (flashcards.length === 0) {
175 |       document.getElementById("flashcard-container").innerHTML = "<p>No known words to review!</p>";
176 |       document.getElementById("card-counter").textContent = "0/0";
177 |     } else {
178 |       createFlashcard();
179 |     }
180 | }
181 | 
182 | 
183 |     function flipCard(cardElement) {
184 |       const inner = cardElement.querySelector(".card-inner");
185 |       inner.classList.toggle("is-flipped");
186 |     }
187 | 
188 |     function showNext() {
189 |       if (currentCardIndex < flashcards.length - 1) {
190 |         currentCardIndex++;
191 |         createFlashcard();
192 |       } else {
193 |         window.location.href = "/vocabulary";
194 |       }
195 |     }
196 | 
197 |     function showPrevious() {
198 |       if (currentCardIndex > 0) {
199 |         currentCardIndex--;
200 |         createFlashcard();
201 |       }
202 |     }
203 | 
204 |     function updateCardCounter() {
205 |       document.getElementById("card-counter").textContent = `${currentCardIndex + 1}/${flashcards.length}`;
206 |     }
207 | 
208 |     function updateNextButton() {
209 |       const nextBtn = document.getElementById("next-button");
210 |       if (currentCardIndex === flashcards.length - 1) {
211 |         nextBtn.textContent = "Exit";
212 |       } else {
213 |         nextBtn.textContent = "Next";
214 |       }
215 |     }
216 | 
217 |     function toggleExtras() {
218 |       showExtraData = document.getElementById("toggle-extra").checked;
219 |       createFlashcard();
220 |     }
221 | 
222 |     function pronounce(word) {
223 |       const utterance = new SpeechSynthesisUtterance(word);
224 |       window.speechSynthesis.speak(utterance);
225 |     }
226 | 
227 |     function shuffleFlashcards() {
228 |       flashcards.sort(() => Math.random() - 0.5);
229 |       currentCardIndex = 0;
230 |       createFlashcard();
231 |     }
232 | 
233 | function importKnownWords(event) {
234 |   const file = event.target.files[0];
235 |   if (!file) return;
236 | 
237 |   const reader = new FileReader();
238 |   reader.onload = function (e) {
239 |     const data = new Uint8Array(e.target.result);
240 |     const workbook = XLSX.read(data, { type: 'array' });
241 |     const sheet = workbook.Sheets[workbook.SheetNames[0]];
242 |     const json = XLSX.utils.sheet_to_json(sheet, { header: 1 }); // Raw array, no headers
243 | 
244 |     const importedWords = json.flat().filter(Boolean); // Flatten and remove empty cells
245 | 
246 |     if (importedWords.length > 0) {
247 |       localStorage.setItem("knownWords", JSON.stringify(importedWords));
248 |       alert("Known words imported successfully!");
249 |       location.reload();
250 |     } else {
251 |       alert("No valid known words found in the file.");
252 |     }
253 |   };
254 |   reader.readAsArrayBuffer(file);
255 | }
256 | 
257 | 
258 | function exportKnownWords() {
259 |   const knownWords = getKnownWords();
260 | 
261 |   if (knownWords.length === 0) {
262 |     alert("No known words to export!");
263 |     return;
264 |   }
265 | 
266 |   const rows = knownWords.map(word => [word]); // Just one column without header
267 | 
268 |   const worksheet = XLSX.utils.aoa_to_sheet(rows);
269 |   const workbook = XLSX.utils.book_new();
270 |   XLSX.utils.book_append_sheet(workbook, worksheet, "Known Words");
271 | 
272 |   XLSX.writeFile(workbook, "known_words.xlsx");
273 | }
274 | 
275 |   </script>
276 | 
277 |   <br><br><br><br>
278 | 
279 |   <footer class="text-center text-sm text-gray-500 mt-12 mb-6">
280 |     <a href="/" class="text-blue-600 hover:underline">← Back to Home</a>
281 |     <p class="mt-1">&copy; 2025 Jawad. All rights reserved.</p>
282 |   </footer>
283 | 
284 |   <script type="module" src="/verifyAccess.js"></script>
285 | 
286 | </body>
287 | </html>
288 | 


--------------------------------------------------------------------------------
/Mukhosto/vocabulary/style.css:
--------------------------------------------------------------------------------
  1 | body {
  2 |   font-family: Arial, sans-serif;
  3 |   background-color: #f4f4f4;
  4 |   text-align: center;
  5 |   margin: 0;
  6 |   padding: 0;
  7 | }
  8 | 
  9 | .flashcard-container {
 10 |   display: flex;
 11 |   justify-content: center;
 12 |   align-items: center;
 13 |   margin-top: 40px;
 14 |   min-height: 300px;
 15 | }
 16 | 
 17 | .flashcard {
 18 |   width: 320px;
 19 |   height: 220px;
 20 |   perspective: 1000px;
 21 | }
 22 | 
 23 | .card-inner {
 24 |   width: 100%;
 25 |   height: 100%;
 26 |   position: relative;
 27 |   transform-style: preserve-3d;
 28 |   transition: transform 0.6s ease;
 29 | }
 30 | 
 31 | .card-inner.is-flipped {
 32 |   transform: rotateY(180deg);
 33 | }
 34 | 
 35 | .card-front, .card-back {
 36 |   position: absolute;
 37 |   top: 0;
 38 |   left: 0;
 39 |   width: 100%;
 40 |   height: 100%;
 41 |   backface-visibility: hidden;
 42 |   background-color: #fff;
 43 |   border: 2px solid #ddd;
 44 |   border-radius: 12px;
 45 |   box-sizing: border-box;
 46 |   padding: 20px;
 47 |   display: flex;
 48 |   justify-content: center;
 49 |   align-items: center;
 50 |   flex-direction: column;
 51 |   box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
 52 | }
 53 | 
 54 | .card-front {
 55 |   font-size: 28px;
 56 |   z-index: 2;
 57 | }
 58 | 
 59 | .card-back {
 60 |   transform: rotateY(180deg);
 61 |   font-size: 18px;
 62 |   z-index: 1;
 63 | }
 64 | 
 65 | .button-container {
 66 |   margin-top: 20px;
 67 | }
 68 | 
 69 | .nav-buttons, .known-btn {
 70 |   background-color: #4CAF50;
 71 |   color: white;
 72 |   padding: 10px 20px;
 73 |   border: none;
 74 |   font-size: 16px;
 75 |   margin: 5px;
 76 |   border-radius: 8px;
 77 |   cursor: pointer;
 78 | }
 79 | 
 80 | .known-btn {
 81 |   background-color: #ff9800;
 82 |   margin-top: 12px;
 83 | }
 84 | 
 85 | .counter {
 86 |   font-size: 16px;
 87 |   margin-top: 10px;
 88 |   color: #555;
 89 | }
 90 | 
 91 | .pronunciation-btn {
 92 |   background: none;
 93 |   border: none;
 94 |   font-size: 20px;
 95 |   position: absolute;
 96 |   top: 10px;
 97 |   right: 10px;
 98 |   cursor: pointer;
 99 | }
100 | 
101 | .extras {
102 |   margin-top: 10px;
103 |   padding: 8px;
104 |   background-color: #f9f9f9;
105 |   border-radius: 6px;
106 |   font-size: 12px;
107 |   color: #444;
108 | }
109 | 
110 | .known-icon {
111 |   position: absolute;
112 |   top: 10px;
113 |   left: 10px;
114 |   background-color: rgba(255, 255, 255, 0.1);
115 |   border: 2px solid #4CAF50;
116 |   border-radius: 50%;
117 |   padding: 6px;
118 |   font-size: 16px;
119 |   cursor: pointer;
120 |   z-index: 3;
121 |   transition: background-color 0.2s, transform 0.2s;
122 | }
123 | 
124 | .known-icon:hover {
125 |   background-color: rgba(76, 175, 80, 0.2);
126 |   transform: scale(1.1);
127 | }
128 | 
129 | 
130 | .word {
131 |   font-size: 28px;        /* was 36px */
132 |   font-weight: bold;
133 |   color: #333;
134 |   padding: 16px 8px;
135 | }
136 | 
137 | .card-back .meaning {
138 |   font-size: 18px;        /* was 20px */
139 |   font-weight: bold;
140 |   color: #1e3a8a;
141 |   margin-bottom: 10px;
142 | }
143 | 
144 | .sub-definition {
145 |   font-size: 14px;        /* was 16px */
146 |   color: #777;
147 |   display: block;
148 |   margin-bottom: 8px;
149 | }
150 | 
151 | .card-back .extras {
152 |   font-size: 12px;        /* was 13px */
153 |   color: #444;
154 |   background-color: #f3f3f3;
155 |   padding: 8px;
156 |   border-radius: 8px;
157 |   text-align: left;
158 | }
159 | 
160 | .flashcard-container {
161 |   transition: opacity 0.3s ease;
162 | }
163 | 
164 | 
165 | @keyframes shuffleEffect {
166 |   0% { transform: rotate(0deg); }
167 |   25% { transform: rotate(2deg); }
168 |   50% { transform: rotate(-2deg); }
169 |   75% { transform: rotate(1deg); }
170 |   100% { transform: rotate(0deg); }
171 | }
172 | 
173 | .shuffle-animation {
174 |   animation: shuffleEffect 0.5s ease;
175 | }
176 | 
177 | .top-controls {
178 |   margin: 20px 0;
179 | }
180 | 
181 | .shuffle-button {
182 |   background-color: #3498db;
183 |   color: white;
184 |   padding: 10px 20px;
185 |   font-size: 16px;
186 |   border: none;
187 |   border-radius: 8px;
188 |   cursor: pointer;
189 | }
190 | 
191 | .shuffle-button:hover {
192 |   background-color: #2980b9;
193 | }
194 | 
195 | .extras p {
196 |   margin: 4px 0;
197 |   padding: 0;
198 |   font-size: 12px;
199 |   color: #444;
200 | }
201 | 
202 | .flashcard {
203 |   position: relative; /* make sure the card is positioned */
204 | }
205 | 
206 | .remove-btn {
207 |   position: absolute;
208 |   top: 10px;
209 |   left: 10px;
210 |   background: none;
211 |   border: none;
212 |   font-size: 24px;
213 |   cursor: pointer;
214 |   color: #f44336;
215 |   z-index: 10;
216 | }
217 | .remove-btn:hover {
218 |   color: #c62828;
219 | }
220 | 


--------------------------------------------------------------------------------