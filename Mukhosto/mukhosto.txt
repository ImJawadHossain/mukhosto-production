├── Mukhosto
    ├── admin
    │   └── index.html
    ├── custom_practice
    │   ├── flashcard.html
    │   ├── flashcard.js
    │   ├── index.html
    │   ├── index.js
    │   ├── known-words.html
    │   └── style.css
    ├── icons
    │   └── logo.png
    ├── index.html
    ├── login.html
    ├── manifest.json
    ├── payment.html
    ├── profile.html
    ├── sw.js
    ├── verifyAccess.js
    └── vocabulary
    │   ├── data.xlsx
    │   ├── flashcard.html
    │   ├── flashcard.js
    │   ├── index.html
    │   ├── index.js
    │   ├── known-words.html
    │   └── style.css



/Mukhosto/admin/index.html:
--------------------------------------------------------------------------------
  1 | <!DOCTYPE html>
  2 | <html lang="en">
  3 | <head>
  4 |   <meta charset="UTF-8" />
  5 |   <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  6 |   <title>Admin Dashboard</title>
  7 |   <script src="https://www.gstatic.com/firebasejs/9.22.2/firebase-app.js"></script>
  8 |   <script src="https://www.gstatic.com/firebasejs/9.22.2/firebase-auth.js"></script>
  9 |   <script src="https://www.gstatic.com/firebasejs/9.22.2/firebase-firestore.js"></script>
 10 |   <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
 11 | </head>
 12 | <body class="bg-gray-100 min-h-screen p-6">
 13 |   <div id="dashboard" class="hidden max-w-4xl mx-auto bg-white p-6 shadow-lg rounded-xl">
 14 |     <div class="flex items-center justify-between mb-6">
 15 |       <h1 class="text-2xl font-bold">Admin Dashboard</h1>
 16 |       <button onclick="logout()" class="bg-red-500 text-white px-3 py-1 rounded text-sm">Logout</button>
 17 |     </div>
 18 |     <p class="text-sm text-gray-600 mb-4">Only visible to <strong>Admins</strong>. Below is the full user list:</p>
 19 |     <div id="user-list" class="space-y-4">
 20 |       <p class="text-gray-400">Loading users...</p>
 21 |     </div>
 22 |   </div>
 23 | 
 24 |   <div id="error" class="hidden text-center mt-20 text-gray-600">
 25 |     <h2 class="text-3xl font-bold text-red-600 mb-4">404 - Page Not Found</h2>
 26 |     <p>You do not have permission to view this page.</p>
 27 |   </div>
 28 | 
 29 |   <script type="module">
 30 |     import { initializeApp } from "https://www.gstatic.com/firebasejs/9.22.2/firebase-app.js";
 31 |     import {
 32 |       getAuth,
 33 |       onAuthStateChanged,
 34 |       signOut
 35 |     } from "https://www.gstatic.com/firebasejs/9.22.2/firebase-auth.js";
 36 |     import {
 37 |       getFirestore,
 38 |       collection,
 39 |       getDocs,
 40 |       doc,
 41 |       getDoc,
 42 |       updateDoc
 43 |     } from "https://www.gstatic.com/firebasejs/9.22.2/firebase-firestore.js";
 44 | 
 45 |     const firebaseConfig = {
 46 |       apiKey: "AIzaSyBqzg9fA14lD_ygNx8CSRiRsnrz1bBNfUw",
 47 |       authDomain: "memory-auth-9515c.firebaseapp.com",
 48 |       projectId: "memory-auth-9515c",
 49 |       storageBucket: "memory-auth-9515c.appspot.com",
 50 |       messagingSenderId: "862743577103",
 51 |       appId: "1:862743577103:web:11fe02f4c24ef2c9c8197a"
 52 |     };
 53 | 
 54 |     const app = initializeApp(firebaseConfig);
 55 |     const auth = getAuth(app);
 56 |     const db = getFirestore(app);
 57 | 
 58 |     const dashboard = document.getElementById("dashboard");
 59 |     const userList = document.getElementById("user-list");
 60 |     const errorDiv = document.getElementById("error");
 61 | 
 62 |     onAuthStateChanged(auth, async (user) => {
 63 |       if (!user) {
 64 |         window.location.href = "../login.html";
 65 |         return;
 66 |       }
 67 | 
 68 |       const userDocRef = doc(db, "users", user.uid);
 69 |       const userDocSnap = await getDoc(userDocRef);
 70 | 
 71 |       if (!userDocSnap.exists() || userDocSnap.data().admin !== true) {
 72 |         // Not admin — show error
 73 |         errorDiv.classList.remove("hidden");
 74 |         return;
 75 |       }
 76 | 
 77 |       // Is admin — show dashboard
 78 |       dashboard.classList.remove("hidden");
 79 | 
 80 |       const snapshot = await getDocs(collection(db, "users"));
 81 |       userList.innerHTML = "";
 82 | 
 83 |       if (snapshot.empty) {
 84 |         userList.innerHTML = "<p class='text-gray-500'>No users found.</p>";
 85 |         return;
 86 |       }
 87 | 
 88 |       const pendingUsers = [];
 89 |       const otherUsers = [];
 90 | 
 91 |       snapshot.forEach(docSnap => {
 92 |         const userData = docSnap.data();
 93 |         const uid = docSnap.id;
 94 |         const name = userData.name || "N/A";
 95 |         const email = userData.email || "Unknown";
 96 |         const trxid = userData.trxid || null;
 97 |         const mobile = userData.mobile || null;
 98 |         const paid = userData.paid === true;
 99 |         const paymentStatus = userData.paymentStatus || "not paid";
100 | 
101 |         const userObj = { uid, name, email, trxid, mobile, paid, paymentStatus };
102 |         if (paymentStatus === "pending") {
103 |           pendingUsers.push(userObj);
104 |         } else {
105 |           otherUsers.push(userObj);
106 |         }
107 |       });
108 | 
109 |       const sortedUsers = [...pendingUsers, ...otherUsers];
110 | 
111 |       sortedUsers.forEach(({ uid, name, email, trxid, mobile, paid, paymentStatus }) => {
112 |         const statusColor = paymentStatus === "pending"
113 |           ? "text-yellow-600"
114 |           : paid ? "text-green-600"
115 |           : "text-gray-500";
116 | 
117 |         const cardBg = paymentStatus === "pending" ? "bg-red-100" : "bg-gray-100";
118 |         const showVerifyBtn = paymentStatus === "pending";
119 | 
120 |         const div = document.createElement("div");
121 |         div.className = `flex flex-col sm:flex-row justify-between items-start sm:items-center ${cardBg} p-4 rounded`;
122 | 
123 |         div.innerHTML = `
124 |           <div>
125 |             <p class="font-semibold">${name}</p>
126 |             <p class="text-sm text-gray-700">${email}</p>
127 |             ${trxid ? `<p class="text-sm text-yellow-700">TRX: ${trxid}</p>` : ""}
128 |             ${mobile ? `<p class="text-sm text-blue-700">Mobile: ${mobile}</p>` : ""}
129 |             <p class="text-sm ${statusColor} mt-1">Payment Status: ${paymentStatus}</p>
130 |             <span class="inline-block mt-2 px-2 py-1 text-xs rounded font-medium ${paid ? 'bg-green-200 text-green-800' : 'bg-red-200 text-red-800'}">
131 |               ${paid ? '✅ Has Access' : '❌ No Access'}
132 |             </span>
133 |           </div>
134 |           <div class="mt-3 sm:mt-0 flex items-center space-x-2">
135 |             <button
136 |               onclick="updateAccess('${uid}', ${!paid})"
137 |               class="px-3 py-1 text-sm rounded text-white bg-${paid ? 'red' : 'green'}-600"
138 |             >
139 |               ${paid ? 'Revoke Access' : 'Give Access'}
140 |             </button>
141 |             ${showVerifyBtn ? `
142 |               <button
143 |                 onclick="verifyPayment('${uid}')"
144 |                 class="p-2 text-sm rounded-full bg-blue-600 text-white hover:bg-blue-700"
145 |                 title="Verify Payment"
146 |               >
147 |                 🗸
148 |               </button>` : ""}
149 |           </div>
150 |         `;
151 | 
152 |         userList.appendChild(div);
153 |       });
154 |     });
155 | 
156 |     window.updateAccess = async (uid, giveAccess) => {
157 |       const confirmed = confirm(`Are you sure you want to ${giveAccess ? "grant" : "revoke"} access?`);
158 |       if (!confirmed) return;
159 | 
160 |       await updateDoc(doc(db, "users", uid), {
161 |         paid: giveAccess,
162 |         paymentStatus: giveAccess ? "verified" : "rejected"
163 |       });
164 | 
165 |       alert(`User access has been ${giveAccess ? "granted" : "revoked"}.`);
166 |       location.reload();
167 |     };
168 | 
169 |     window.verifyPayment = async (uid) => {
170 |       const confirmed = confirm("Mark this payment as verified?");
171 |       if (!confirmed) return;
172 | 
173 |       await updateDoc(doc(db, "users", uid), {
174 |         paid: true,
175 |         paymentStatus: "verified"
176 |       });
177 | 
178 |       alert("Payment marked as verified.");
179 |       location.reload();
180 |     };
181 | 
182 |     window.logout = () => {
183 |       signOut(auth).then(() => {
184 |         window.location.href = "/login.html";
185 |       });
186 |     };
187 |   </script>
188 | </body>
189 | </html>
190 | 


--------------------------------------------------------------------------------
/Mukhosto/custom_practice/flashcard.html:
--------------------------------------------------------------------------------
 1 | <!DOCTYPE html>
 2 | <html lang="en">
 3 | <head>
 4 |   <meta charset="UTF-8" />
 5 |   <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
 6 |   <title>Vocabulary Flashcards</title>
 7 |   <link rel="stylesheet" href="style.css">
 8 |   <script src="https://cdn.jsdelivr.net/npm/xlsx@0.18.5/dist/xlsx.full.min.js"></script>
 9 |   <script src="https://www.gstatic.com/firebasejs/9.22.2/firebase-app.js"></script>
10 |   <script src="https://www.gstatic.com/firebasejs/9.22.2/firebase-auth.js"></script>
11 | </head>
12 | <body>
13 | 
14 | <h1>
15 |   <a href="/vocabulary" style="color: inherit; text-decoration: none;">
16 |     Vocabulary Flashcards
17 |   </a>
18 | </h1>
19 | 
20 | <div class="flex justify-center mb-4">
21 |   <label class="flex items-center space-x-2 text-sm text-gray-700">
22 |     <input type="checkbox" id="reverse-toggle" class="accent-blue-600">
23 |     <span>Reverse Practice</span>
24 |   </label>
25 | </div>
26 | 
27 | <label>
28 |   <input type="checkbox" id="toggle-extra" onchange="toggleExtras()" />
29 |   Show Extra Data
30 | </label>
31 | 
32 | <div class="top-controls">
33 |   <button class="shuffle-button" onclick="shuffleCards()">Shuffle Cards</button>
34 | </div>
35 | 
36 | <div id="flashcard-container" class="flashcard-container"></div>
37 | 
38 | <div class="button-container">
39 |   <button class="nav-buttons" onclick="showPrevious()">Previous</button>
40 | <button class="nav-buttons" id="next-btn" onclick="showNext()">Next</button>  
41 | </div>
42 | 
43 | <div class="counter" id="card-counter">1/0</div>
44 | 
45 | <script src="flashcard.js"></script> <!-- ✅ Updated here -->
46 | 
47 | <br><br><br><br>
48 | 
49 | <footer class="text-center text-sm text-gray-500 mt-12 mb-6">
50 |   <a href="/" class="text-blue-600 hover:underline">← Back to Home</a>
51 |   <p class="mt-1">&copy; 2025 Jawad. All rights reserved.</p>
52 | </footer>
53 | 
54 | <script type="module" src="../verifyAccess.js"></script>
55 | 
56 | </body>
57 | </html>
58 | 


--------------------------------------------------------------------------------
/Mukhosto/custom_practice/flashcard.js:
--------------------------------------------------------------------------------
  1 | let flashcards = [];
  2 | let currentCardIndex = 0;
  3 | let showExtraData = false;
  4 | let shuffled = false;
  5 | 
  6 | // --- Storage Handling ---
  7 | function getKnownWords() {
  8 |   return JSON.parse(localStorage.getItem("jawad2_knownWords") || "[]");
  9 | }
 10 | 
 11 | function saveKnownWord(word) {
 12 |   const knownWords = getKnownWords();
 13 |   if (!knownWords.includes(word)) {
 14 |     knownWords.push(word);
 15 |     localStorage.setItem("jawad2_knownWords", JSON.stringify(knownWords));
 16 |   }
 17 | }
 18 | 
 19 | function isReverseMode() {
 20 |   return localStorage.getItem("reversePractice") === "1";
 21 | }
 22 | 
 23 | // --- File Loading ---
 24 | function getRangeFromURL() {
 25 |   const params = new URLSearchParams(window.location.search);
 26 |   const start = parseInt(params.get("start")) || 1;
 27 |   const end = parseInt(params.get("end")) || Number.MAX_SAFE_INTEGER;
 28 |   return { start, end };
 29 | }
 30 | 
 31 | 
 32 | document.addEventListener('keydown', (e) => {
 33 |   if (e.key === "ArrowRight") {
 34 |     showNext();
 35 |   } else if (e.key === "ArrowLeft") {
 36 |     showPrevious();
 37 |   } else if (e.key === " " || e.key === "Enter") {
 38 |     e.preventDefault(); // stop page from scrolling
 39 |     const card = document.querySelector(".flashcard");
 40 |     if (card) flipCard(card);
 41 |   }
 42 | });
 43 | 
 44 | 
 45 | 
 46 | function getCustomFileBuffer() {
 47 |   return new Promise((resolve, reject) => {
 48 |     const base64 = localStorage.getItem("jawad2_uploadedXLSX");
 49 |     if (!base64) return reject("No custom Excel file uploaded.");
 50 |     const binary = atob(base64);
 51 |     const bytes = new Uint8Array(binary.length);
 52 |     for (let i = 0; i < binary.length; i++) {
 53 |       bytes[i] = binary.charCodeAt(i);
 54 |     }
 55 |     resolve(bytes.buffer);
 56 |   });
 57 | }
 58 | 
 59 | // --- Flashcard Setup ---
 60 | document.addEventListener("DOMContentLoaded", () => {
 61 |   const toggle = document.getElementById("reverse-toggle");
 62 |   if (toggle) {
 63 |     toggle.checked = isReverseMode();
 64 |     toggle.addEventListener("change", () => {
 65 |       localStorage.setItem("reversePractice", toggle.checked ? "1" : "0");
 66 |       const params = new URLSearchParams(window.location.search);
 67 |       params.set("reverse", toggle.checked ? "1" : "0");
 68 |       window.location.search = params.toString();
 69 |     });
 70 |   }
 71 | 
 72 |   getCustomFileBuffer()
 73 |     .then(buffer => {
 74 |       const reverse = isReverseMode();
 75 |       const workbook = XLSX.read(buffer, { type: "array" });
 76 |       const sheet = workbook.Sheets[workbook.SheetNames[0]];
 77 |       const json = XLSX.utils.sheet_to_json(sheet);
 78 | 
 79 |       const { start, end } = getRangeFromURL();
 80 |       const knownWords = getKnownWords();
 81 | 
 82 |       flashcards = json
 83 |         .slice(start - 1, end)
 84 |         .filter(row => !knownWords.includes(row["FrontData"] || ""))
 85 |         .map(row => ({
 86 |           front: reverse ? (row["BackData"] || "") : (row["FrontData"] || ""),
 87 |           back: reverse ? (row["FrontData"] || "") : (row["BackData"] || ""),
 88 |           subBack: row["SubBack"] || "",
 89 |           extras: Object.keys(row)
 90 |             .filter(k => k.startsWith("ExtraData"))
 91 |             .map(k => row[k]),
 92 |           reverseOriginal: row["FrontData"] || ""
 93 |         }));
 94 | 
 95 |       createFlashcard();
 96 |     })
 97 |     .catch(err => {
 98 |       document.getElementById("flashcard-container").innerHTML = `<p>Error loading file: ${err}</p>`;
 99 |     });
100 | 
101 |   const shuffleBtn = document.getElementById("shuffle-btn");
102 |   if (shuffleBtn) {
103 |     shuffleBtn.addEventListener("click", shuffleCards);
104 |   }
105 | });
106 | 
107 | // --- Flashcard Rendering ---
108 | function createFlashcard() {
109 |   const container = document.getElementById("flashcard-container");
110 |   container.innerHTML = "";
111 | 
112 |   if (flashcards.length === 0) {
113 |     container.innerHTML = "<p>No cards to review!</p>";
114 |     updateCardCounter();
115 |     return;
116 |   }
117 | 
118 |   const card = flashcards[currentCardIndex];
119 |   const cardDiv = document.createElement("div");
120 |   cardDiv.classList.add("flashcard");
121 | 
122 |   cardDiv.innerHTML = `
123 |     <div class="card-inner">
124 |       <div class="card-front">
125 |         <span class="word">${card.front}</span>
126 |         <button class="pronunciation-btn" onclick="event.stopPropagation(); pronounce('${card.front}')">🔊</button>
127 |         <button class="known-icon" onclick="event.stopPropagation(); markAsKnown(this.dataset.word)" data-word="${encodeURIComponent(card.reverseOriginal || card.front)}">✅</button>
128 |       </div>
129 |       <div class="card-back">
130 |         <div class="meaning">${card.back}</div>
131 |         <button class="pronunciation-btn" onclick="event.stopPropagation(); pronounce('${card.back}')">🔊</button>
132 |         <button class="known-icon" onclick="event.stopPropagation(); markAsKnown(this.dataset.word)" data-word="${encodeURIComponent(card.reverseOriginal || card.front)}">✅</button>
133 | 
134 |         ${card.subBack ? `<em class="sub-definition">${card.subBack}</em>` : ""}
135 |         ${showExtraData && card.extras.length > 0
136 |           ? `<div class="extras">${card.extras.map((e, i) => `<p>${i + 1}. ${e}</p>`).join("")}</div>`
137 |           : ""}
138 |       </div>
139 |     </div>
140 |   `;
141 | 
142 | 
143 |   cardDiv.onclick = () => flipCard(cardDiv);
144 |   container.appendChild(cardDiv);
145 | 
146 |   updateCardCounter();
147 |   updateNavigation();
148 | }
149 | 
150 | function flipCard(cardElement) {
151 |   const inner = cardElement.querySelector(".card-inner");
152 |   inner.classList.toggle("is-flipped");
153 | }
154 | 
155 | function showNext() {
156 |   if (currentCardIndex < flashcards.length - 1) {
157 |     currentCardIndex++;
158 |     createFlashcard();
159 |   }
160 | }
161 | 
162 | function showPrevious() {
163 |   if (currentCardIndex > 0) {
164 |     currentCardIndex--;
165 |     createFlashcard();
166 |   }
167 | }
168 | 
169 | function shuffleCards() {
170 |   flashcards.sort(() => Math.random() - 0.5);
171 |   currentCardIndex = 0;
172 |   shuffled = true;
173 |   createFlashcard();
174 | }
175 | 
176 | function updateCardCounter() {
177 |   document.getElementById("card-counter").textContent = `${currentCardIndex + 1}/${flashcards.length}`;
178 | 
179 |   const nextBtn = document.getElementById("next-btn");
180 |   if (currentCardIndex >= flashcards.length - 1) {
181 |     nextBtn.textContent = "Exit";
182 |     nextBtn.onclick = () => window.location.href = "/custom_practice"; // or any page you want
183 |   } else {
184 |     nextBtn.textContent = "Next";
185 |     nextBtn.onclick = showNext;
186 |   }
187 | }
188 | 
189 | 
190 | function updateNavigation() {
191 |   const exitBtn = document.getElementById("exit-btn");
192 |   if (exitBtn) {
193 |     if (currentCardIndex === flashcards.length - 1) {
194 |       exitBtn.style.display = "block";
195 |     } else {
196 |       exitBtn.style.display = "none";
197 |     }
198 |   }
199 | }
200 | 
201 | function toggleExtras() {
202 |   showExtraData = document.getElementById("toggle-extra")?.checked || false;
203 |   createFlashcard();
204 | }
205 | 
206 | function pronounce(word) {
207 |   const utterance = new SpeechSynthesisUtterance(word);
208 |   window.speechSynthesis.speak(utterance);
209 | }
210 | 
211 | function markAsKnown(word) {
212 |   word = decodeURIComponent(word);
213 |   saveKnownWord(word);
214 |   flashcards.splice(currentCardIndex, 1);
215 |   if (currentCardIndex >= flashcards.length) currentCardIndex = flashcards.length - 1;
216 |   createFlashcard();
217 | }
218 | 


--------------------------------------------------------------------------------
/Mukhosto/custom_practice/index.html:
--------------------------------------------------------------------------------
 1 | <!DOCTYPE html>
 2 | <html lang="en">
 3 | <head>
 4 |   <meta charset="UTF-8" />
 5 |   <meta name="viewport" content="width=device-width, initial-scale=1.0" />
 6 |   <title>Vocabulary Sets</title>
 7 |   <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
 8 |   <link rel="stylesheet" href="style.css">
 9 |   <script src="https://www.gstatic.com/firebasejs/9.22.2/firebase-app.js"></script>
10 | <script src="https://www.gstatic.com/firebasejs/9.22.2/firebase-auth.js"></script>
11 | 
12 | </head>
13 | <body class="bg-gradient-to-b from-blue-50 to-white min-h-screen py-10 px-4">
14 | 
15 | <div class="mb-6">
16 |   <label class="block text-sm text-gray-700 mb-2">Upload your vocabulary file (.xlsx):</label>
17 |   <input type="file" id="upload-xlsx" accept=".xlsx" class="mb-4" />
18 | 
19 |   <!-- New Download Button -->
20 |   <button id="download-sample" class="bg-green-500 text-white px-4 py-2 rounded-xl hover:bg-green-600 transition mt-2">
21 |     ⬇ Download Sample .xlsx File
22 |   </button>
23 | </div>
24 | 
25 | 
26 | 
27 |   <div class="max-w-4xl mx-auto text-center">
28 | 
29 | 
30 |     <h1 class="text-4xl font-bold text-blue-800 mb-4">Vocabulary Sets</h1>
31 | 
32 | 
33 |     <p class="text-gray-600 mb-6 text-lg">Practice vocabulary in small, manageable sets for better retention.</p>
34 | 
35 | 
36 | 
37 | 
38 |     <!-- Reset Progress Button -->
39 | <div class="flex flex-wrap justify-center items-center gap-4 mb-8">
40 |   <button id="reset-progress" class="bg-red-500 text-white px-4 py-2 rounded-xl hover:bg-red-600 transition">
41 |     🔁 Reset Progress
42 |   </button>
43 |   <a href="known-words.html" class="bg-indigo-600 text-white px-4 py-2 rounded-xl shadow hover:bg-indigo-700 transition">
44 |     📚 Review Known Words
45 |   </a>
46 | </div>
47 |     <div id="sets-container" class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 gap-6">
48 |       <!-- Sets injected here -->
49 |     </div>
50 |   </div>
51 | 
52 |   <script src="https://cdn.jsdelivr.net/npm/xlsx@0.18.5/dist/xlsx.full.min.js"></script>
53 |   <script src="index.js"></script>
54 | 
55 | 
56 |   <footer class="text-center text-sm text-gray-500 mt-12 mb-6">
57 |   <a href="/" class="text-blue-600 hover:underline">← Back to Home</a>
58 |   <p class="mt-1">&copy; 2025 Jawad. All rights reserved.</p>
59 | </footer>
60 | 
61 | <script type="module" src="/verifyAccess.js"></script>
62 | 
63 | 
64 | 
65 | </body>
66 | </html>


--------------------------------------------------------------------------------
/Mukhosto/custom_practice/index.js:
--------------------------------------------------------------------------------
  1 | function getKnownWords() {
  2 |   return JSON.parse(localStorage.getItem("jawad2_knownWords") || "[]");
  3 | }
  4 | 
  5 | 
  6 | const chunkSize = 20;
  7 | const setsContainer = document.getElementById("sets-container");
  8 | const colorClasses = ['blue', 'green', 'purple', 'pink', 'yellow', 'red', 'indigo'];
  9 | 
 10 | // ⬇⬇ Handle uploaded file stored in localStorage ⬇⬇
 11 | function getCustomFileBuffer() {
 12 |   return new Promise((resolve, reject) => {
 13 | const base64 = localStorage.getItem("jawad2_uploadedXLSX");
 14 | 
 15 |     if (!base64) return reject("No custom Excel file uploaded.");
 16 |     const binary = atob(base64);
 17 |     const bytes = new Uint8Array(binary.length);
 18 |     for (let i = 0; i < binary.length; i++) {
 19 |       bytes[i] = binary.charCodeAt(i);
 20 |     }
 21 |     resolve(bytes.buffer);
 22 |   });
 23 | }
 24 | 
 25 | 
 26 | document.getElementById("download-sample").addEventListener("click", function() {
 27 |   const sampleData = [
 28 |     {
 29 |       FrontData: "Main-Word",
 30 |       BackData: "Word-Meaning",
 31 |       SubBack: "Defination",
 32 |       ExtraData1: "ExampleSentence1",
 33 |       ExtraData2: "ExampleSentence2"
 34 |     }
 35 |   ];
 36 | 
 37 |   const worksheet = XLSX.utils.json_to_sheet(sampleData);
 38 |   const workbook = XLSX.utils.book_new();
 39 |   XLSX.utils.book_append_sheet(workbook, worksheet, "Sample Vocabulary");
 40 | 
 41 |   XLSX.writeFile(workbook, "sample_vocabulary.xlsx");
 42 | });
 43 | 
 44 | 
 45 | document.addEventListener("DOMContentLoaded", () => {
 46 |   // 🟢 File upload handler
 47 |   const uploadInput = document.getElementById("upload-xlsx");
 48 |   if (uploadInput) {
 49 |     uploadInput.addEventListener("change", (event) => {
 50 |       const file = event.target.files[0];
 51 |       if (!file) return;
 52 | 
 53 |       const reader = new FileReader();
 54 |       reader.onload = function (e) {
 55 |         const base64 = btoa(
 56 |           new Uint8Array(e.target.result).reduce((data, byte) => data + String.fromCharCode(byte), "")
 57 |         );
 58 | localStorage.setItem("jawad2_uploadedXLSX", base64);
 59 | 
 60 |         alert("✅ File uploaded! Reloading sets...");
 61 |         location.reload();
 62 |       };
 63 |       reader.readAsArrayBuffer(file);
 64 |     });
 65 |   }
 66 | 
 67 |   // 🛑 Reset progress
 68 |   const resetBtn = document.getElementById("reset-progress");
 69 |   if (resetBtn) {
 70 |     resetBtn.addEventListener("click", () => {
 71 |       if (confirm("Reset known word progress and uploaded file?")) {
 72 | localStorage.removeItem("jawad2_knownWords");
 73 | localStorage.removeItem("jawad2_uploadedXLSX");
 74 | 
 75 |         location.reload();
 76 |       }
 77 |     });
 78 |   }
 79 | 
 80 |   // 🔄 Load and build sets from uploaded file
 81 |   getCustomFileBuffer()
 82 |     .then(buffer => {
 83 |       const workbook = XLSX.read(buffer, { type: "array" });
 84 |       const sheet = workbook.Sheets[workbook.SheetNames[0]];
 85 |       const data = XLSX.utils.sheet_to_json(sheet);
 86 |       const knownWords = getKnownWords();
 87 |       const totalWords = data.filter(row => row["FrontData"]).length;
 88 | 
 89 |       for (let i = 0; i < Math.ceil(totalWords / chunkSize); i++) {
 90 |         const start = i * chunkSize;
 91 |         const end = Math.min((i + 1) * chunkSize, totalWords);
 92 | 
 93 |         const selectedRows = data.slice(start, end)
 94 |           .filter(row => row["FrontData"] && !knownWords.includes(row["FrontData"]));
 95 | 
 96 |         const color = colorClasses[i % colorClasses.length];
 97 | 
 98 | 
 99 | 
100 | 
101 | const sliceRows = data.slice(start, end).filter(r => r["FrontData"]);
102 | const totalInSet = sliceRows.length;
103 | const knownInSet = sliceRows.filter(r => knownWords.includes(r["FrontData"])).length;
104 | const pct = totalInSet ? Math.round((knownInSet / totalInSet) * 100) : 0;
105 | 
106 | const card = document.createElement('div');
107 | card.className = `bg-white p-6 rounded-2xl shadow-md hover:shadow-xl transition`;
108 | 
109 | card.innerHTML = `
110 |   <h2 class="text-2xl font-semibold text-${color}-600 mb-2">Set ${i + 1}</h2>
111 |   <p class="text-gray-500 mb-2">Words ${start + 1} – ${end}</p>
112 | 
113 |   <div class="w-full bg-gray-200 rounded-full h-2 mb-2">
114 |     <div class="bg-${color}-600 h-2 rounded-full" style="width: ${pct}%;"></div>
115 |   </div>
116 |   <p class="text-sm text-gray-600 mb-4">${knownInSet}/${totalInSet} known (${pct}%)</p>
117 | 
118 |   ${
119 |     knownInSet < totalInSet
120 |       ? `<a href="flashcard.html?start=${start + 1}&end=${end}&reverse=${document.getElementById('reverse-toggle')?.checked ? '1' : '0'}" ...
121 |  class="inline-block bg-${color}-600 text-white px-4 py-2 rounded-xl">Start</a>`
122 |       : `<div class="text-green-600 font-semibold">✅ Completed</div>`
123 |   }
124 | `;
125 | 
126 | setsContainer.appendChild(card);
127 | 
128 | 
129 | 
130 | 
131 | 
132 |         
133 |       }
134 | 
135 |       if (totalWords === 0) {
136 |         setsContainer.innerHTML = `<p class="text-green-600">🎉 No words available. Please upload a new file.</p>`;
137 |       }
138 |     })
139 |     .catch(err => {
140 |       setsContainer.innerHTML = `<p class="text-red-500">⚠️ Error loading file: ${err}</p>`;
141 |     });
142 | });
143 | 


--------------------------------------------------------------------------------
/Mukhosto/custom_practice/known-words.html:
--------------------------------------------------------------------------------
  1 | <!DOCTYPE html>
  2 | <html lang="en">
  3 | <head>
  4 |   <meta charset="UTF-8" />
  5 |   <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  6 |   <title>Known Vocabulary Flashcards</title>
  7 |   <link rel="stylesheet" href="style.css">
  8 |   <script src="https://cdn.jsdelivr.net/npm/xlsx@0.18.5/dist/xlsx.full.min.js"></script>
  9 | </head>
 10 | <body>
 11 |   <button onclick="exportKnownWords()" class="nav-buttons" style="margin-bottom: 20px;">⬇ Export Known Words</button>
 12 |   <input type="file" id="import-file" accept=".xlsx" style="display: none;" onchange="importKnownWords(event)">
 13 |   <button onclick="document.getElementById('import-file').click()" class="nav-buttons">⬆ Import Known Words</button>
 14 | 
 15 |   <h1>
 16 |     <a href="/vocabulary" style="color: inherit; text-decoration: none;">
 17 |       Known Vocabulary Flashcards
 18 |     </a>
 19 |   </h1>
 20 | 
 21 |   <div class="flex justify-center mb-4">
 22 |     <label class="flex items-center space-x-2 text-sm text-gray-700">
 23 |       <input type="checkbox" id="reverse-toggle" class="accent-blue-600">
 24 |       <span>Reverse Practice</span>
 25 |     </label>
 26 |   </div>
 27 | 
 28 |   <label>
 29 |     <input type="checkbox" id="toggle-extra" onchange="toggleExtras()" />
 30 |     Show Extra Data
 31 |   </label>
 32 | 
 33 |   <button onclick="shuffleFlashcards()" class="nav-buttons" style="margin-top: 10px;">🔀 Shuffle Cards</button>
 34 | 
 35 |   <div id="flashcard-container" class="flashcard-container"></div>
 36 | 
 37 |   <div class="button-container">
 38 |     <button class="nav-buttons" onclick="showPrevious()">Previous</button>
 39 |     <button class="nav-buttons" onclick="showNext()" id="next-button">Next</button>
 40 |   </div>
 41 | 
 42 |   <div class="counter" id="card-counter">1/0</div>
 43 | 
 44 |   <script>
 45 |     let flashcards = [];
 46 |     let currentCardIndex = 0;
 47 |     let showExtraData = false;
 48 | 
 49 |     // namespaced localStorage key
 50 |     function isReverseMode() {
 51 |       return localStorage.getItem("reversePractice") === "1";
 52 |     }
 53 | 
 54 |     document.addEventListener("DOMContentLoaded", () => {
 55 |       const toggle = document.getElementById("reverse-toggle");
 56 |       if (!toggle) return;
 57 | 
 58 |       // initialize from saved setting
 59 |       toggle.checked = isReverseMode();
 60 | 
 61 |       toggle.addEventListener("change", () => {
 62 |         localStorage.setItem("reversePractice", toggle.checked ? "1" : "0");
 63 |         // reload with same flashcard parameters
 64 |         const params = new URLSearchParams(window.location.search);
 65 |         params.set("reverse", toggle.checked ? "1" : "0");
 66 |         window.location.search = params.toString();
 67 |       });
 68 |     });
 69 | 
 70 |     function getCustomFileBuffer() {
 71 |       return new Promise((resolve, reject) => {
 72 |         const base64 = localStorage.getItem("jawad2_uploadedXLSX");
 73 |         if (!base64) return reject("No custom Excel file uploaded.");
 74 |         const binary = atob(base64);
 75 |         const bytes = new Uint8Array(binary.length);
 76 |         for (let i = 0; i < binary.length; i++) {
 77 |           bytes[i] = binary.charCodeAt(i);
 78 |         }
 79 |         resolve(bytes.buffer);
 80 |       });
 81 |     }
 82 | 
 83 |     // Get known words from localStorage
 84 |     function getKnownWords() {
 85 |       return JSON.parse(localStorage.getItem("jawad2_knownWords") || "[]");
 86 |     }
 87 | 
 88 | 
 89 | document.addEventListener('keydown', (e) => {
 90 |   if (e.key === "ArrowRight") {
 91 |     showNext();
 92 |   } else if (e.key === "ArrowLeft") {
 93 |     showPrevious();
 94 |   } else if (e.key === " " || e.key === "Enter") {
 95 |     e.preventDefault(); // stop page from scrolling
 96 |     const card = document.querySelector(".flashcard");
 97 |     if (card) flipCard(card);
 98 |   }
 99 | });
100 | 
101 | 
102 |     // Load only known words into flashcards
103 |     window.addEventListener("DOMContentLoaded", () => {
104 |       getCustomFileBuffer()
105 |         .then(buffer => {
106 |           const workbook = XLSX.read(buffer, { type: "array" });
107 |           const sheet = workbook.Sheets[workbook.SheetNames[0]];
108 |           const json = XLSX.utils.sheet_to_json(sheet);
109 | 
110 |           const knownWords = JSON.parse(localStorage.getItem("jawad2_knownWords") || "[]");
111 |           const knownRows = json.filter(row => knownWords.includes(row["FrontData"]));
112 |           const reverse = isReverseMode();
113 |           flashcards = knownRows
114 |             .map(row => ({
115 |               front: reverse ? (row["BackData"] || "") : (row["FrontData"] || ""),
116 |               back: reverse ? (row["FrontData"] || "") : (row["BackData"] || ""),
117 |               subBack: row["SubBack"] || "",
118 |               extras: Object.keys(row)
119 |                 .filter(k => k.startsWith("ExtraData"))
120 |                 .map(k => row[k])
121 |             }));
122 | 
123 |           // Don't shuffle at this point, wait for shuffle button
124 |           createFlashcard();
125 |         })
126 |         .catch(err => {
127 |           document.getElementById("flashcard-container").innerHTML = `<p>Error loading file: ${err}</p>`;
128 |         });
129 |     });
130 | 
131 |     function createFlashcard() {
132 |       const container = document.getElementById("flashcard-container");
133 |       container.innerHTML = "";
134 | 
135 |       if (flashcards.length === 0) {
136 |         container.innerHTML = "<p>No known words to review!</p>";
137 |         return;
138 |       }
139 | 
140 |       const card = flashcards[currentCardIndex];
141 |       const cardDiv = document.createElement("div");
142 |       cardDiv.classList.add("flashcard");
143 | 
144 |       let extrasHTML = "";
145 |       if (showExtraData && card.extras.length > 0) {
146 |         extrasHTML = `<div class="extras">${card.extras.join("<br>")}</div>`;
147 |       }
148 | 
149 | cardDiv.innerHTML = `
150 |   <div class="card-inner">
151 |     <div class="card-front">
152 |       <button class="remove-btn" onclick="event.stopPropagation(); removeCurrentCard()">✖️</button>
153 |       <span class="word">${card.front}</span>
154 |       <button class="pronunciation-btn" onclick="event.stopPropagation(); pronounce('${card.front}')">🔊</button>
155 |     </div>
156 |     <div class="card-back">
157 |       <div class="meaning">${card.back}</div>
158 |       <button class="pronunciation-btn" onclick="event.stopPropagation(); pronounce('${card.back}')">🔊</button>
159 |       ${card.subBack ? `<em class="sub-definition">${card.subBack}</em>` : ""}
160 |       ${showExtraData && card.extras.length > 0
161 |         ? `<div class="extras">${card.extras.map((e, i) => `${i + 1}. ${e}`).join("<br>")}</div>`
162 |         : ""}
163 |     </div>
164 |   </div>
165 | `;
166 | 
167 | 
168 |       cardDiv.onclick = () => flipCard(cardDiv);
169 |       container.appendChild(cardDiv);
170 | 
171 |       updateCardCounter();
172 |     }
173 | 
174 |     function flipCard(cardElement) {
175 |       const inner = cardElement.querySelector(".card-inner");
176 |       inner.classList.toggle("is-flipped");
177 |     }
178 | 
179 |   function removeCurrentCard() {
180 |   const card = flashcards[currentCardIndex];
181 |   if (!card) return;
182 | 
183 |   let knownWords = getKnownWords();
184 |   const wordToRemove = isReverseMode() ? card.back : card.front;
185 |   knownWords = knownWords.filter(w => w !== wordToRemove);
186 |   localStorage.setItem("jawad2_knownWords", JSON.stringify(knownWords));
187 | 
188 |   flashcards.splice(currentCardIndex, 1);
189 | 
190 |   if (currentCardIndex >= flashcards.length) {
191 |     currentCardIndex = flashcards.length - 1;
192 |   }
193 | 
194 |   if (flashcards.length === 0) {
195 |     document.getElementById("flashcard-container").innerHTML = "<p>No known words to review!</p>";
196 |     document.getElementById("card-counter").textContent = "0/0";
197 |   } else {
198 |     createFlashcard();
199 |   }
200 | }
201 | 
202 | 
203 |     function showNext() {
204 |       if (currentCardIndex < flashcards.length - 1) {
205 |         currentCardIndex++;
206 |         createFlashcard();
207 |       } else {
208 |         document.getElementById("next-button").textContent = "Exit";
209 |         document.getElementById("next-button").onclick = () => {
210 |           window.location.href = "/custom_practice";
211 |         };
212 |       }
213 |     }
214 | 
215 |     function showPrevious() {
216 |       if (currentCardIndex > 0) {
217 |         currentCardIndex--;
218 |         createFlashcard();
219 |       }
220 |     }
221 | 
222 |     function updateCardCounter() {
223 |       document.getElementById("card-counter").textContent = `${currentCardIndex + 1}/${flashcards.length}`;
224 |     }
225 | 
226 |     function toggleExtras() {
227 |       showExtraData = document.getElementById("toggle-extra").checked;
228 |       createFlashcard(); // re-render with new state
229 |     }
230 | 
231 |     function pronounce(word) {
232 |       const utterance = new SpeechSynthesisUtterance(word);
233 |       window.speechSynthesis.speak(utterance);
234 |     }
235 | 
236 |     function shuffleFlashcards() {
237 |       flashcards = flashcards.sort(() => Math.random() - 0.5); // shuffle when clicked
238 |       currentCardIndex = 0; // reset to the first card
239 |       createFlashcard();
240 |     }
241 | 
242 |     function importKnownWords(event) {
243 |       const file = event.target.files[0];
244 |       if (!file) return;
245 | 
246 |       const reader = new FileReader();
247 |       reader.onload = function (e) {
248 |         const data = new Uint8Array(e.target.result);
249 |         const workbook = XLSX.read(data, { type: 'array' });
250 |         const sheet = workbook.Sheets[workbook.SheetNames[0]];
251 |         const json = XLSX.utils.sheet_to_json(sheet);
252 | 
253 |         const importedWords = json.map(row => row["FrontData"]).filter(Boolean);
254 | 
255 |         if (importedWords.length > 0) {
256 |           localStorage.setItem("jawad2_knownWords", JSON.stringify(importedWords));
257 |           alert("Known words imported successfully!");
258 |           location.reload(); // Optional: Refresh to reflect new state
259 |         } else {
260 |           alert("No valid known words found in the file.");
261 |         }
262 |       };
263 |       reader.readAsArrayBuffer(file);
264 |     }
265 | 
266 | function exportKnownWords() {
267 |   const knownWords = getKnownWords();
268 | 
269 |   if (knownWords.length === 0) {
270 |     alert("No known words to export!");
271 |     return;
272 |   }
273 | 
274 |   const rows = knownWords.map(word => [word]); // Just one column without header
275 | 
276 |   const worksheet = XLSX.utils.aoa_to_sheet(rows);
277 |   const workbook = XLSX.utils.book_new();
278 |   XLSX.utils.book_append_sheet(workbook, worksheet, "Known Words");
279 | 
280 |   XLSX.writeFile(workbook, "known_words.xlsx");
281 | }
282 | 
283 | 
284 | 
285 |   </script>
286 | 
287 |   <br> <br> <br> <br>
288 |   <footer class="text-center text-sm text-gray-500 mt-12 mb-6">
289 |     <a href="/" class="text-blue-600 hover:underline">← Back to Home</a>
290 |     <p class="mt-1">&copy; 2025 Mukhosto.com | All rights reserved.</p>
291 |   </footer>
292 | 
293 |   <script type="module" src="/verifyAccess.js"></script>
294 | 
295 | </body>
296 | </html>
297 | 


--------------------------------------------------------------------------------
/Mukhosto/custom_practice/style.css:
--------------------------------------------------------------------------------
  1 | body {
  2 |   font-family: Arial, sans-serif;
  3 |   background-color: #f4f4f4;
  4 |   text-align: center;
  5 |   margin: 0;
  6 |   padding: 0;
  7 | }
  8 | 
  9 | .flashcard-container {
 10 |   display: flex;
 11 |   justify-content: center;
 12 |   align-items: center;
 13 |   margin-top: 40px;
 14 |   min-height: 300px;
 15 | }
 16 | 
 17 | .flashcard {
 18 |   width: 320px;
 19 |   height: 220px;
 20 |   perspective: 1000px;
 21 | }
 22 | 
 23 | .card-inner {
 24 |   width: 100%;
 25 |   height: 100%;
 26 |   position: relative;
 27 |   transform-style: preserve-3d;
 28 |   transition: transform 0.6s ease;
 29 | }
 30 | 
 31 | .card-inner.is-flipped {
 32 |   transform: rotateY(180deg);
 33 | }
 34 | 
 35 | .card-front, .card-back {
 36 |   position: absolute;
 37 |   top: 0;
 38 |   left: 0;
 39 |   width: 100%;
 40 |   height: 100%;
 41 |   backface-visibility: hidden;
 42 |   background-color: #fff;
 43 |   border: 2px solid #ddd;
 44 |   border-radius: 12px;
 45 |   box-sizing: border-box;
 46 |   padding: 20px;
 47 |   display: flex;
 48 |   justify-content: center;
 49 |   align-items: center;
 50 |   flex-direction: column;
 51 |   box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
 52 | }
 53 | 
 54 | .card-front {
 55 |   font-size: 28px;
 56 |   z-index: 2;
 57 | }
 58 | 
 59 | .card-back {
 60 |   transform: rotateY(180deg);
 61 |   font-size: 18px;
 62 |   z-index: 1;
 63 | }
 64 | 
 65 | .button-container {
 66 |   margin-top: 20px;
 67 | }
 68 | 
 69 | .nav-buttons, .known-btn {
 70 |   background-color: #4CAF50;
 71 |   color: white;
 72 |   padding: 10px 20px;
 73 |   border: none;
 74 |   font-size: 16px;
 75 |   margin: 5px;
 76 |   border-radius: 8px;
 77 |   cursor: pointer;
 78 | }
 79 | 
 80 | .known-btn {
 81 |   background-color: #ff9800;
 82 |   margin-top: 12px;
 83 | }
 84 | 
 85 | .counter {
 86 |   font-size: 16px;
 87 |   margin-top: 10px;
 88 |   color: #555;
 89 | }
 90 | 
 91 | .pronunciation-btn {
 92 |   background: none;
 93 |   border: none;
 94 |   font-size: 20px;
 95 |   position: absolute;
 96 |   top: 10px;
 97 |   right: 10px;
 98 |   cursor: pointer;
 99 | }
100 | 
101 | .extras {
102 |   margin-top: 10px;
103 |   padding: 8px;
104 |   background-color: #f9f9f9;
105 |   border-radius: 6px;
106 |   font-size: 12px;
107 |   color: #444;
108 | }
109 | 
110 | .known-icon {
111 |   position: absolute;
112 |   top: 10px;
113 |   left: 10px;
114 |   background-color: rgba(255, 255, 255, 0.1);
115 |   border: 2px solid #4CAF50;
116 |   border-radius: 50%;
117 |   padding: 6px;
118 |   font-size: 16px;
119 |   cursor: pointer;
120 |   z-index: 3;
121 |   transition: background-color 0.2s, transform 0.2s;
122 | }
123 | 
124 | .known-icon:hover {
125 |   background-color: rgba(76, 175, 80, 0.2);
126 |   transform: scale(1.1);
127 | }
128 | 
129 | 
130 | .word {
131 |   font-size: 28px;        /* was 36px */
132 |   font-weight: bold;
133 |   color: #333;
134 |   padding: 16px 8px;
135 | }
136 | 
137 | .card-back .meaning {
138 |   font-size: 18px;        /* was 20px */
139 |   font-weight: bold;
140 |   color: #1e3a8a;
141 |   margin-bottom: 10px;
142 | }
143 | 
144 | .sub-definition {
145 |   font-size: 14px;        /* was 16px */
146 |   color: #777;
147 |   display: block;
148 |   margin-bottom: 8px;
149 | }
150 | 
151 | .card-back .extras {
152 |   font-size: 12px;        /* was 13px */
153 |   color: #444;
154 |   background-color: #f3f3f3;
155 |   padding: 8px;
156 |   border-radius: 8px;
157 |   text-align: left;
158 | }
159 | 
160 | 
161 | .top-controls {
162 |   margin: 20px 0;
163 | }
164 | 
165 | .shuffle-button {
166 |   background-color: #3498db;
167 |   color: white;
168 |   padding: 10px 20px;
169 |   font-size: 16px;
170 |   border: none;
171 |   border-radius: 8px;
172 |   cursor: pointer;
173 | }
174 | 
175 | .shuffle-button:hover {
176 |   background-color: #2980b9;
177 | }
178 | 
179 | 
180 | .top-controls {
181 |   margin: 20px 0;
182 | }
183 | 
184 | .shuffle-button {
185 |   background-color: #3498db;
186 |   color: white;
187 |   padding: 10px 20px;
188 |   font-size: 16px;
189 |   border: none;
190 |   border-radius: 8px;
191 |   cursor: pointer;
192 | }
193 | 
194 | .shuffle-button:hover {
195 |   background-color: #2980b9;
196 | }
197 | 
198 | .extras p {
199 |   margin: 4px 0;
200 |   padding: 0;
201 |   font-size: 12px;
202 |   color: #444;
203 | }
204 | 
205 | .flashcard {
206 |   position: relative; /* make sure the card is positioned */
207 | }
208 | 
209 | .remove-btn {
210 |   position: absolute;
211 |   top: 10px;
212 |   left: 10px;
213 |   background: none;
214 |   border: none;
215 |   font-size: 24px;
216 |   cursor: pointer;
217 |   color: #f44336;
218 |   z-index: 10;
219 | }
220 | .remove-btn:hover {
221 |   color: #c62828;
222 | }
223 | 


--------------------------------------------------------------------------------
/Mukhosto/icons/logo.png:
--------------------------------------------------------------------------------
https://raw.githubusercontent.com/ImJawadHossain/Mukhosto/3b9cd86196504288837847efb9850d47317864c7/Mukhosto/icons/logo.png


--------------------------------------------------------------------------------
/Mukhosto/index.html:
--------------------------------------------------------------------------------
  1 | <!DOCTYPE html>
  2 | <html lang="en">
  3 | <head>
  4 |   <meta charset="UTF-8" />
  5 |   <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  6 |   <title>English Practice Hub</title>
  7 |   <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
  8 |   <script src="https://unpkg.com/lucide@latest"></script>
  9 |   <script src="https://www.gstatic.com/firebasejs/9.22.2/firebase-app.js"></script>
 10 |   <script src="https://www.gstatic.com/firebasejs/9.22.2/firebase-auth.js"></script>
 11 |   <script src="https://www.gstatic.com/firebasejs/9.22.2/firebase-firestore.js"></script>
 12 |   <link rel="manifest" href="/manifest.json" />
 13 |   <meta name="theme-color" content="#1e40af">
 14 | 
 15 | </head>
 16 | <body class="bg-gray-50 min-h-screen py-10 px-4">
 17 | 
 18 |   <!-- 🔝 Profile Dropdown -->
 19 |   <div class="absolute top-4 right-6">
 20 |     <div class="relative inline-block text-left">
 21 |       <button id="profile-button" class="flex items-center space-x-2 px-3 py-2 bg-white border border-gray-200 rounded-full shadow-sm hover:bg-gray-100 transition">
 22 |         <img id="profile-avatar" src="" alt="Avatar" class="w-8 h-8 rounded-full" />
 23 |         <span id="user-name" class="text-sm font-medium text-gray-700">Loading...</span>
 24 |         <span id="access-badge" class="ml-2 text-xs font-semibold px-2 py-0.5 rounded hidden"></span>
 25 |         <svg class="w-4 h-4 text-gray-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
 26 |           <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7" />
 27 |         </svg>
 28 |       </button>
 29 | 
 30 |       <div id="dropdown-menu" class="hidden absolute right-0 mt-2 w-48 bg-white border border-gray-200 rounded-lg shadow-lg z-50">
 31 |         <a href="/profile.html" class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100">View Profile</a>
 32 |         <a id="access-status-link" href="#" class="block px-4 py-2 text-sm font-medium rounded"></a>
 33 |         <a href="/custom_practice" class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100">Custom Practice</a>
 34 |         <button id="logout-btn" class="w-full text-left px-4 py-2 text-sm text-red-600 hover:bg-gray-100">Logout</button>
 35 | 
 36 |       </div>
 37 |     </div>
 38 |   </div>
 39 | 
 40 |   <!-- 💡 Main Content -->
 41 |   <div class="max-w-5xl mx-auto text-center">
 42 |     <h1 class="text-4xl font-bold mb-4"><br>Mukhosto.com | Memorization Tools</h1>
 43 |     <p class="text-lg text-gray-600 mb-10">Sharpen your English skills — one click at a time!</p>
 44 | 
 45 |   <div id="install-container" class="fixed bottom-6 right-6 hidden">
 46 |   <button id="install-button" class="bg-blue-600 text-white px-4 py-2 rounded-lg shadow-md hover:bg-blue-700 transition">
 47 |     📲 Install App
 48 |   </button>
 49 | </div>
 50 | 
 51 | 
 52 |     <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-6">
 53 |       <div class="rounded-2xl shadow-md hover:shadow-lg transition bg-white p-6 flex flex-col items-center text-center">
 54 |         <i data-lucide="book-open" class="w-8 h-8 text-blue-600"></i>
 55 |         <h2 class="text-xl font-semibold mt-4 mb-2">Vocabulary Practice</h2>
 56 |         <p class="text-sm text-gray-500 mb-4">Expand your word power with focused vocabulary exercises.</p>
 57 |         <a href="/vocabulary" class="bg-blue-600 text-white px-4 py-2 rounded-xl">Start Practicing</a>
 58 |       </div>
 59 | 
 60 |       <div class="rounded-2xl shadow-md hover:shadow-lg transition bg-white p-6 flex flex-col items-center text-center">
 61 |         <i data-lucide="repeat" class="w-8 h-8 text-green-600"></i>
 62 |         <h2 class="text-xl font-semibold mt-4 mb-2">Prepositions Practice</h2>
 63 |         <p class="text-sm text-gray-500 mb-4">Master the usage of prepositions with guided practice.</p>
 64 |         <a href="/prepositions" class="bg-green-600 text-white px-4 py-2 rounded-xl">Start Practicing</a>
 65 |       </div>
 66 | 
 67 |       <div class="rounded-2xl shadow-md hover:shadow-lg transition bg-white p-6 flex flex-col items-center text-center">
 68 |         <i data-lucide="message-circle" class="w-8 h-8 text-purple-600"></i>
 69 |         <h2 class="text-xl font-semibold mt-4 mb-2">Idioms Practice</h2>
 70 |         <p class="text-sm text-gray-500 mb-4">Learn common idioms to sound more like a native speaker.</p>
 71 |         <a href="/idioms" class="bg-purple-600 text-white px-4 py-2 rounded-xl">Start Practicing</a>
 72 |       </div>
 73 | 
 74 |       <div class="rounded-2xl shadow-md hover:shadow-lg transition bg-white p-6 flex flex-col items-center text-center">
 75 |         <i data-lucide="scroll-text" class="w-8 h-8 text-yellow-600"></i>
 76 |         <h2 class="text-xl font-semibold mt-4 mb-2">Proverbs Practice</h2>
 77 |         <p class="text-sm text-gray-500 mb-4">Understand traditional wisdom with engaging proverb activities.</p>
 78 |         <a href="/proverbs" class="bg-yellow-600 text-white px-4 py-2 rounded-xl">Start Practicing</a>
 79 |       </div>
 80 |       
 81 |       
 82 |       <div class="rounded-2xl shadow-md hover:shadow-lg transition bg-white p-6 flex flex-col items-center text-center">
 83 |         <i data-lucide="scroll-text" class="w-8 h-8 text-yellow-600"></i>
 84 |         <h2 class="text-xl font-semibold mt-4 mb-2">Formula Practice</h2>
 85 |         <p class="text-sm text-gray-500 mb-4">Practice Formulas </p>
 86 |         <a href="/formula" class="bg-yellow-600 text-white px-4 py-2 rounded-xl">Start Practicing</a>
 87 |       </div>
 88 | 
 89 |       <div class="rounded-2xl shadow-md hover:shadow-lg transition bg-white p-6 flex flex-col items-center text-center">
 90 |         <i data-lucide="message-circle" class="w-8 h-8 text-purple-600"></i>
 91 |         <h2 class="text-xl font-semibold mt-4 mb-2">Important Preposition</h2>
 92 |         <p class="text-sm text-gray-500 mb-4">Learn common Important Preopsition to sound more like a native speaker.</p>
 93 |         <a href="/important_preposition" class="bg-purple-600 text-white px-4 py-2 rounded-xl">Start Practicing</a>
 94 |       </div>
 95 | 
 96 |       <div class="rounded-2xl shadow-md hover:shadow-lg transition bg-white p-6 flex flex-col items-center text-center">
 97 |         <i data-lucide="scroll-text" class="w-8 h-8 text-yellow-600"></i>
 98 |         <h2 class="text-xl font-semibold mt-4 mb-2">Important Synonym & Antonyms</h2>
 99 |         <p class="text-sm text-gray-500 mb-4">Understand traditional wisdom with engaging proverb activities.</p>
100 |         <a href="/important_synonym" class="bg-yellow-600 text-white px-4 py-2 rounded-xl">Start Practicing</a>
101 |       </div>
102 | 
103 | 
104 | 
105 | 
106 | 
107 |       <div class="rounded-2xl shadow-md hover:shadow-lg transition bg-white p-6 flex flex-col items-center text-center">
108 |         <i data-lucide="scroll-text" class="w-8 h-8 text-yellow-600"></i>
109 |         <h2 class="text-xl font-semibold mt-4 mb-2">Important Idioms</h2>
110 |         <p class="text-sm text-gray-500 mb-4">Understand traditional wisdom with engaging proverb activities.</p>
111 |         <a href="/important_idiom" class="bg-yellow-600 text-white px-4 py-2 rounded-xl">Start Practicing</a>
112 |       </div>
113 | 
114 | 
115 | 
116 | 
117 |       <div class="rounded-2xl shadow-md hover:shadow-lg transition bg-white p-6 flex flex-col items-center text-center">
118 |         <i data-lucide="scroll-text" class="w-8 h-8 text-yellow-600"></i>
119 |         <h2 class="text-xl font-semibold mt-4 mb-2">Physics Formula</h2>
120 |         <p class="text-sm text-gray-500 mb-4">Understand traditional wisdom with engaging proverb activities.</p>
121 |         <a href="/file/physics_formula.html" class="bg-yellow-600 text-white px-4 py-2 rounded-xl">Start Practicing</a>
122 |       </div>
123 | 
124 | 
125 |       <div class="rounded-2xl shadow-md hover:shadow-lg transition bg-white p-6 flex flex-col items-center text-center">
126 |         <i data-lucide="scroll-text" class="w-8 h-8 text-yellow-600"></i>
127 |         <h2 class="text-xl font-semibold mt-4 mb-2">Chemistry Data</h2>
128 |         <p class="text-sm text-gray-500 mb-4">Understand traditional wisdom with engaging proverb activities.</p>
129 |         <a href="/chemistry_data" class="bg-yellow-600 text-white px-4 py-2 rounded-xl">Start Practicing</a>
130 |       </div>
131 | 
132 | 
133 |       <div class="rounded-2xl shadow-md hover:shadow-lg transition bg-white p-6 flex flex-col items-center text-center">
134 |         <i data-lucide="message-circle" class="w-8 h-8 text-purple-600"></i>
135 |         <h2 class="text-xl font-semibold mt-4 mb-2">Chemistry Reaction</h2>
136 |         <p class="text-sm text-gray-500 mb-4">Learn common Important Preopsition to sound more like a native speaker.</p>
137 |         <a href="/file/chemistry_reaction.html" class="bg-purple-600 text-white px-4 py-2 rounded-xl">Start Practicing</a>
138 |       </div>
139 | 
140 | 
141 |       <div class="rounded-2xl shadow-md hover:shadow-lg transition bg-white p-6 flex flex-col items-center text-center">
142 |         <i data-lucide="message-circle" class="w-8 h-8 text-purple-600"></i>
143 |         <h2 class="text-xl font-semibold mt-4 mb-2">Organic Chemistry</h2>
144 |         <p class="text-sm text-gray-500 mb-4">Learn Important Organic Chemistry.</p>
145 |         <a href="/file/organic_chemistry.html" class="bg-purple-600 text-white px-4 py-2 rounded-xl">Start Practicing</a>
146 |       </div>
147 | 
148 | 
149 |       <div class="rounded-2xl shadow-md hover:shadow-lg transition bg-white p-6 flex flex-col items-center text-center">
150 |         <i data-lucide="message-circle" class="w-8 h-8 text-purple-600"></i>
151 |         <h2 class="text-xl font-semibold mt-4 mb-2">Trigonometry Formula</h2>
152 |         <p class="text-sm text-gray-500 mb-4">Learn Important Trigonometry Formula.</p>
153 |         <a href="/file/trigonomery_formula.html" class="bg-purple-600 text-white px-4 py-2 rounded-xl">Start Practicing</a>
154 |       </div>
155 | 
156 | 
157 |       <div class="rounded-2xl shadow-md hover:shadow-lg transition bg-white p-6 flex flex-col items-center text-center">
158 |         <i data-lucide="message-circle" class="w-8 h-8 text-purple-600"></i>
159 |         <h2 class="text-xl font-semibold mt-4 mb-2">Calculas Formula</h2>
160 |         <p class="text-sm text-gray-500 mb-4">Learn Important Calculas Formula.</p>
161 |         <a href="/file/calculas_formula.html" class="bg-purple-600 text-white px-4 py-2 rounded-xl">Start Practicing</a>
162 |       </div>
163 | 
164 |       <div class="rounded-2xl shadow-md hover:shadow-lg transition bg-white p-6 flex flex-col items-center text-center">
165 |         <i data-lucide="message-circle" class="w-8 h-8 text-purple-600"></i>
166 |         <h2 class="text-xl font-semibold mt-4 mb-2">Important Voice Change</h2>
167 |         <p class="text-sm text-gray-500 mb-4">Learn Important Organic Chemistry.</p>
168 |         <a href="/voice_change" class="bg-purple-600 text-white px-4 py-2 rounded-xl">Start Practicing</a>
169 |       </div>
170 | 
171 | 
172 |       <div class="rounded-2xl shadow-md hover:shadow-lg transition bg-white p-6 flex flex-col items-center text-center">
173 |         <i data-lucide="message-circle" class="w-8 h-8 text-purple-600"></i>
174 |         <h2 class="text-xl font-semibold mt-4 mb-2">Important Depertment</h2>
175 |         <p class="text-sm text-gray-500 mb-4">Learn Important CSE Depertment Data</p>
176 |         <a href="/depertment" class="bg-purple-600 text-white px-4 py-2 rounded-xl">Start Practicing</a>
177 |       </div>
178 | 
179 |       <!-- ✅ Custom Practice Card -->
180 |       <div class="rounded-2xl shadow-md hover:shadow-lg transition bg-white p-6 flex flex-col items-center text-center">
181 |         <i data-lucide="upload-cloud" class="w-8 h-8 text-pink-600"></i>
182 |         <h2 class="text-xl font-semibold mt-4 mb-2">Custom Practice</h2>
183 |         <p class="text-sm text-gray-500 mb-4">Upload your own word list (.xlsx) and practice on your terms.</p>
184 |         <a href="/custom_practice" class="bg-pink-600 text-white px-4 py-2 rounded-xl">Start Custom Mode</a>
185 |       </div>
186 |     </div>
187 |   </div>
188 | 
189 |   <!-- 📎 Footer -->
190 |   <footer class="text-center text-sm text-gray-500 mt-12 mb-6">
191 |     <p class="mt-1">&copy; 2025 Jawad. All rights reserved.</p>
192 |   </footer>
193 | 
194 |   <!-- 📜 Scripts -->
195 |   <script type="module">
196 |     import { initializeApp } from "https://www.gstatic.com/firebasejs/9.22.2/firebase-app.js";
197 |     import { getAuth, onAuthStateChanged, signOut } from "https://www.gstatic.com/firebasejs/9.22.2/firebase-auth.js";
198 |     import { getFirestore, doc, getDoc } from "https://www.gstatic.com/firebasejs/9.22.2/firebase-firestore.js";
199 | 
200 |     const firebaseConfig = {
201 |       apiKey: "AIzaSyBqzg9fA14lD_ygNx8CSRiRsnrz1bBNfUw",
202 |       authDomain: "memory-auth-9515c.firebaseapp.com",
203 |       projectId: "memory-auth-9515c",
204 |       storageBucket: "memory-auth-9515c.appspot.com",
205 |       messagingSenderId: "862743577103",
206 |       appId: "1:862743577103:web:11fe02f4c24ef2c9c8197a"
207 |     };
208 | 
209 |     const app = initializeApp(firebaseConfig);
210 |     const auth = getAuth(app);
211 |     const db = getFirestore(app);
212 | 
213 |     const profileButton = document.getElementById('profile-button');
214 |     const dropdown = document.getElementById('dropdown-menu');
215 |     const userNameSpan = document.getElementById('user-name');
216 |     const logoutBtn = document.getElementById('logout-btn');
217 |     const avatarImg = document.getElementById('profile-avatar');
218 |     const badge = document.getElementById('access-badge');
219 |     const accessLink = document.getElementById('access-status-link');
220 | 
221 |     profileButton.addEventListener('click', () => dropdown.classList.toggle('hidden'));
222 |     logoutBtn.addEventListener('click', () => signOut(auth).then(() => window.location.href = '/login.html'));
223 | onAuthStateChanged(auth, async (user) => {
224 |   const dropdownMenu = document.getElementById("dropdown-menu");
225 | 
226 |   // Clean up extra links if previously rendered
227 |   ['signup-link', 'admin-dashboard-link'].forEach(id => {
228 |     const el = document.getElementById(id);
229 |     if (el) el.remove();
230 |   });
231 | 
232 |   // Guest
233 |   if (!user) {
234 |     userNameSpan.textContent = "Guest";
235 |     avatarImg.src = `https://ui-avatars.com/api/?name=Guest&background=ccc&size=32`;
236 | 
237 |     badge.textContent = "Login/Signup";
238 |     badge.className = "ml-2 text-xs font-semibold px-2 py-0.5 rounded bg-gray-100 text-gray-600";
239 |     badge.classList.remove("hidden");
240 | 
241 |     accessLink.textContent = "🔐 Login";
242 |     accessLink.href = "/login.html";
243 |     accessLink.className = "block px-4 py-2 text-sm font-medium bg-blue-100 text-blue-700 hover:bg-blue-200";
244 |     logoutBtn.classList.add("hidden");
245 | 
246 |     // Add Signup
247 |     const signupLink = document.createElement("a");
248 |     signupLink.id = "signup-link";
249 |     signupLink.href = "/signup.html";
250 |     signupLink.textContent = "📝 Signup";
251 |     signupLink.className = "block px-4 py-2 text-sm font-medium bg-blue-100 text-green-700 hover:bg-green-200";
252 |     dropdownMenu.appendChild(signupLink);
253 | 
254 | 
255 | 
256 | 
257 |     return;
258 |   }
259 | 
260 |   // Logged-in user
261 |   logoutBtn.classList.remove("hidden");
262 | 
263 |   const snap = await getDoc(doc(db, 'users', user.uid));
264 |   const name = snap.exists() ? snap.data().name : user.email;
265 |   const isAdmin = snap.exists() && snap.data().admin === true;
266 |   const paymentStatus = snap.exists() ? snap.data().paymentStatus : "not paid";
267 | 
268 |   userNameSpan.textContent = name;
269 |   const initials = name.split(" ").map(n => n[0]).join("").toUpperCase();
270 |   avatarImg.src = `https://ui-avatars.com/api/?name=${initials}&background=random&size=32`;
271 | 
272 |   if (isAdmin) {
273 |     // Admin UI
274 |     badge.textContent = "Admin";
275 |     badge.className = "ml-2 text-xs font-semibold px-2 py-0.5 rounded bg-black text-white";
276 |     badge.classList.remove("hidden");
277 | 
278 |     accessLink.textContent = "🛠 Admin Dashboard";
279 |     accessLink.href = "/admin";
280 |     accessLink.className = "block px-4 py-2 text-sm font-medium bg-black text-white hover:bg-gray-800";
281 | 
282 |     return;
283 |   }
284 | 
285 |   // General User Access Logic
286 |   badge.classList.remove("hidden");
287 | 
288 |   if (paymentStatus === "verified") {
289 |     badge.textContent = "Full Access";
290 |     badge.className = "ml-2 text-xs font-semibold px-2 py-0.5 rounded bg-green-100 text-green-700";
291 | 
292 |     accessLink.textContent = "✅ Full Access";
293 |     accessLink.href = "/dashboard.html";
294 |     accessLink.className = "block px-4 py-2 text-sm font-medium bg-green-100 text-green-700";
295 |     accessLink.style.cursor = "default";
296 | 
297 |   } else if (paymentStatus === "pending") {
298 |     badge.textContent = "Reviewing";
299 |     badge.className = "ml-2 text-xs font-semibold px-2 py-0.5 rounded bg-yellow-100 text-yellow-700";
300 | 
301 |     accessLink.textContent = "⏳ Reviewing...";
302 |     accessLink.href = "/dashboard.html";
303 |     accessLink.className = "block px-4 py-2 text-sm font-medium bg-yellow-100 text-yellow-700";
304 |     accessLink.style.cursor = "default";
305 | 
306 |   } else {
307 |     badge.textContent = "No Access";
308 |     badge.className = "ml-2 text-xs font-semibold px-2 py-0.5 rounded bg-red-100 text-red-700";
309 | 
310 |     accessLink.textContent = "🔓 Get Full Access";
311 |     accessLink.href = "/payment.html";
312 |     accessLink.className = "block px-4 py-2 text-sm font-medium bg-red-100 text-red-700 hover:bg-red-200";
313 |   }
314 | });
315 | 
316 | 
317 | 
318 | 
319 |   </script>
320 | 
321 |   <script>
322 |     lucide.createIcons();
323 |   </script>
324 |   <script>
325 |   if ('serviceWorker' in navigator) {
326 |     window.addEventListener('load', function () {
327 |       navigator.serviceWorker.register('/sw.js')
328 |         .then(reg => console.log('Service worker registered:', reg))
329 |         .catch(err => console.error('SW registration failed:', err));
330 |     });
331 |   }
332 | </script>
333 | 
334 | <script>
335 |   let deferredPrompt;
336 |   const installContainer = document.getElementById("install-container");
337 |   const installButton = document.getElementById("install-button");
338 | 
339 |   window.addEventListener("beforeinstallprompt", (e) => {
340 |     // Stop the mini-infobar from appearing
341 |     e.preventDefault();
342 |     deferredPrompt = e;
343 |     installContainer.classList.remove("hidden"); // Show the custom install button
344 |   });
345 | 
346 |   installButton.addEventListener("click", async () => {
347 |     if (deferredPrompt) {
348 |       deferredPrompt.prompt();
349 |       const { outcome } = await deferredPrompt.userChoice;
350 |       console.log(`User response to the install prompt: ${outcome}`);
351 |       if (outcome === 'accepted') {
352 |         installContainer.classList.add("hidden");
353 |       }
354 |       deferredPrompt = null;
355 |     }
356 |   });
357 | </script>
358 | 
359 | 
360 | 
361 | 
362 | </body>
363 | </html>
364 | 


--------------------------------------------------------------------------------
/Mukhosto/login.html:
--------------------------------------------------------------------------------
  1 | <!DOCTYPE html>
  2 | <html lang="en">
  3 | <head>
  4 |   <meta charset="UTF-8" />
  5 |   <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  6 |   <title>Mukhosto | Login / Signup</title>
  7 |   <script src="https://www.gstatic.com/firebasejs/9.22.2/firebase-app.js"></script>
  8 |   <script src="https://www.gstatic.com/firebasejs/9.22.2/firebase-auth.js"></script>
  9 |   <script src="https://www.gstatic.com/firebasejs/9.22.2/firebase-firestore.js"></script>
 10 |   <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
 11 | </head>
 12 | <body class="bg-gray-50 min-h-screen flex items-center justify-center">
 13 |   <div class="bg-white shadow-md p-6 rounded-xl max-w-sm w-full">
 14 |     <!-- Tabs -->
 15 |     <div class="flex mb-6 border-b">
 16 |       <button id="login-tab" class="w-1/2 py-2 font-semibold text-blue-600 border-b-2 border-blue-600">Login</button>
 17 |       <button id="signup-tab" class="w-1/2 py-2 font-semibold text-gray-600">Signup</button>
 18 |     </div>
 19 | 
 20 |     <!-- Login Form -->
 21 |     <div id="login-form">
 22 |       <input id="login-email" type="email" placeholder="Email" class="w-full mb-3 px-4 py-2 border rounded" />
 23 |       <input id="login-password" type="password" placeholder="Password" class="w-full mb-4 px-4 py-2 border rounded" />
 24 | 
 25 |       <button id="login-btn" onclick="login()" class="w-full bg-blue-600 text-white py-2 rounded mb-3 flex items-center justify-center">
 26 |         <svg id="login-spinner" class="w-5 h-5 mr-2 animate-spin hidden" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
 27 |           <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
 28 |           <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8v4a4 4 0 00-4 4H4z"></path>
 29 |         </svg>
 30 |         <span id="login-text">Login</span>
 31 |       </button>
 32 | 
 33 |       <button onclick="continueWithGoogle()" class="w-full py-2 rounded border flex items-center justify-center hover:bg-gray-100">
 34 |         <img src="https://www.svgrepo.com/show/475656/google-color.svg" class="w-5 h-5 mr-2" alt="Google logo" />
 35 |         <span>Continue with Google</span>
 36 |       </button>
 37 |     </div>
 38 | 
 39 |     <!-- Signup Form -->
 40 |     <div id="signup-form" class="hidden">
 41 |       <input id="signup-name" type="text" placeholder="Full Name" class="w-full mb-3 px-4 py-2 border rounded" />
 42 |       <input id="signup-email" type="email" placeholder="Email" class="w-full mb-3 px-4 py-2 border rounded" />
 43 |       <input id="signup-password" type="password" placeholder="Password" class="w-full mb-4 px-4 py-2 border rounded" />
 44 | 
 45 |       <button id="signup-btn" onclick="signup()" class="w-full bg-blue-600 text-white py-2 rounded mb-3 flex items-center justify-center">
 46 |         <svg id="signup-spinner" class="w-5 h-5 mr-2 animate-spin hidden" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
 47 |           <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
 48 |           <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8v4a4 4 0 00-4 4H4z"></path>
 49 |         </svg>
 50 |         <span id="signup-text">Sign Up</span>
 51 |       </button>
 52 | 
 53 |       <button onclick="continueWithGoogle()" class="w-full py-2 rounded border flex items-center justify-center hover:bg-gray-100">
 54 |         <img src="https://www.svgrepo.com/show/475656/google-color.svg" class="w-5 h-5 mr-2" alt="Google logo" />
 55 |         <span>Continue with Google</span>
 56 |       </button>
 57 |     </div>
 58 | 
 59 |     <!-- Error Display -->
 60 |     <p id="error" class="text-red-500 text-sm mt-3 text-center"></p>
 61 |   </div>
 62 | 
 63 |   <script type="module">
 64 |     // --- Firebase Config ---
 65 |     const firebaseConfig = {
 66 |       apiKey: "AIzaSyBqzg9fA14lD_ygNx8CSRiRsnrz1bBNfUw",
 67 |       authDomain: "memory-auth-9515c.firebaseapp.com",
 68 |       projectId: "memory-auth-9515c",
 69 |       storageBucket: "memory-auth-9515c.appspot.com",
 70 |       messagingSenderId: "862743577103",
 71 |       appId: "1:862743577103:web:11fe02f4c24ef2c9c8197a",
 72 |       measurementId: "G-XNT36FMPK6"
 73 |     };
 74 | 
 75 |     import { initializeApp } from "https://www.gstatic.com/firebasejs/9.22.2/firebase-app.js";
 76 |     import {
 77 |       getAuth,
 78 |       signInWithEmailAndPassword,
 79 |       createUserWithEmailAndPassword,
 80 |       signInWithPopup,
 81 |       GoogleAuthProvider
 82 |     } from "https://www.gstatic.com/firebasejs/9.22.2/firebase-auth.js";
 83 |     import {
 84 |       getFirestore,
 85 |       doc,
 86 |       setDoc,
 87 |       getDoc
 88 |     } from "https://www.gstatic.com/firebasejs/9.22.2/firebase-firestore.js";
 89 | 
 90 |     const app = initializeApp(firebaseConfig);
 91 |     const auth = getAuth(app);
 92 |     const db = getFirestore(app);
 93 |     const provider = new GoogleAuthProvider();
 94 | 
 95 |     const errorDisplay = document.getElementById("error");
 96 | 
 97 |     // ---- Tabs Switch ----
 98 |     const loginTab = document.getElementById("login-tab");
 99 |     const signupTab = document.getElementById("signup-tab");
100 |     const loginForm = document.getElementById("login-form");
101 |     const signupForm = document.getElementById("signup-form");
102 | 
103 |     loginTab.onclick = () => {
104 |       loginForm.classList.remove("hidden");
105 |       signupForm.classList.add("hidden");
106 |       loginTab.classList.add("text-blue-600", "border-b-2", "border-blue-600");
107 |       signupTab.classList.remove("text-blue-600", "border-b-2", "border-blue-600");
108 |       signupTab.classList.add("text-gray-600");
109 |     };
110 | 
111 |     signupTab.onclick = () => {
112 |       signupForm.classList.remove("hidden");
113 |       loginForm.classList.add("hidden");
114 |       signupTab.classList.add("text-blue-600", "border-b-2", "border-blue-600");
115 |       loginTab.classList.remove("text-blue-600", "border-b-2", "border-blue-600");
116 |       loginTab.classList.add("text-gray-600");
117 |     };
118 | 
119 |     // ---- Signup (Email/Password) ----
120 |     window.signup = () => {
121 |       const name = document.getElementById("signup-name").value.trim();
122 |       const email = document.getElementById("signup-email").value.trim();
123 |       const password = document.getElementById("signup-password").value.trim();
124 |       const signupSpinner = document.getElementById("signup-spinner");
125 |       const signupBtn = document.getElementById("signup-btn");
126 |       const signupText = document.getElementById("signup-text");
127 | 
128 |       errorDisplay.textContent = "";
129 |       if (!name || !email || !password) {
130 |         errorDisplay.textContent = "Please fill all fields!";
131 |         return;
132 |       }
133 | 
134 |       signupSpinner.classList.remove("hidden");
135 |       signupBtn.disabled = true;
136 |       signupText.textContent = "Signing up…";
137 | 
138 |       createUserWithEmailAndPassword(auth, email, password)
139 |         .then(async (cred) => {
140 |           const userRef = doc(db, "users", cred.user.uid);
141 |           await setDoc(userRef, {
142 |             paid: false,
143 |             email: email,
144 |             name: name
145 |           });
146 |           window.location.href = "/";
147 |         })
148 |         .catch(err => errorDisplay.textContent = err.message)
149 |         .finally(() => {
150 |           signupSpinner.classList.add("hidden");
151 |           signupBtn.disabled = false;
152 |           signupText.textContent = "Sign Up";
153 |         });
154 |     };
155 | 
156 |     // ---- Login (Email/Password) ----
157 |     window.login = () => {
158 |       const email = document.getElementById("login-email").value.trim();
159 |       const password = document.getElementById("login-password").value.trim();
160 |       const loginSpinner = document.getElementById("login-spinner");
161 |       const loginBtn = document.getElementById("login-btn");
162 |       const loginText = document.getElementById("login-text");
163 | 
164 |       errorDisplay.textContent = "";
165 |       loginSpinner.classList.remove("hidden");
166 |       loginBtn.disabled = true;
167 |       loginText.textContent = "Logging in…";
168 | 
169 |       signInWithEmailAndPassword(auth, email, password)
170 |         .then(() => window.location.href = "/")
171 |         .catch(err => errorDisplay.textContent = err.message)
172 |         .finally(() => {
173 |           loginSpinner.classList.add("hidden");
174 |           loginBtn.disabled = false;
175 |           loginText.textContent = "Login";
176 |         });
177 |     };
178 | 
179 |     // ---- Google Login/Signup (Create Once) ----
180 |     window.continueWithGoogle = () => {
181 |       errorDisplay.textContent = "";
182 |       signInWithPopup(auth, provider)
183 |         .then(async (result) => {
184 |           const user = result.user;
185 |           const userRef = doc(db, "users", user.uid);
186 |           const snap = await getDoc(userRef);
187 |           if (!snap.exists()) {
188 |             await setDoc(userRef, {
189 |               paid: false,
190 |               email: user.email,
191 |               name: user.displayName || "Anonymous"
192 |             });
193 |           }
194 |           window.location.href = "/";
195 |         })
196 |         .catch(err => errorDisplay.textContent = err.message);
197 |     };
198 |   </script>
199 | </body>
200 | </html>
201 | 


--------------------------------------------------------------------------------
/Mukhosto/manifest.json:
--------------------------------------------------------------------------------
 1 | {
 2 |   "name": "Mukhosto",
 3 |   "short_name": "Mukhosto",
 4 |   "start_url": "/index.html",
 5 |   "display": "standalone",
 6 |   "background_color": "#ffffff",
 7 |   "theme_color": "#1e40af",
 8 |   "orientation": "portrait",
 9 |   "icons": [
10 |     {
11 |       "src": "/icons/logo.png",
12 |       "sizes": "192x192",
13 |       "type": "image/png"
14 |     },
15 |     {
16 |       "src": "/icons/logo.png",
17 |       "sizes": "512x512",
18 |       "type": "image/png"
19 |     }
20 |   ]
21 | }
22 | 


--------------------------------------------------------------------------------
/Mukhosto/payment.html:
--------------------------------------------------------------------------------
  1 | <!DOCTYPE html>
  2 | <html lang="en">
  3 | <head>
  4 |   <meta charset="UTF-8" />
  5 |   <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  6 |   <title>Limited Time Offer | Jawad Hossain</title>
  7 |   <script src="https://www.gstatic.com/firebasejs/9.22.2/firebase-app.js"></script>
  8 |   <script src="https://www.gstatic.com/firebasejs/9.22.2/firebase-auth.js"></script>
  9 |   <script src="https://www.gstatic.com/firebasejs/9.22.2/firebase-firestore.js"></script>
 10 |   <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
 11 | </head>
 12 | <body class="bg-gray-100 min-h-screen flex items-center justify-center px-4">
 13 |   <div class="bg-white shadow-xl rounded-2xl max-w-2xl w-full p-8">
 14 |     <div class="text-center">
 15 |       <h1 class="text-3xl font-bold text-gray-800 mb-4">🚀 Special Limited-Time Offer!</h1>
 16 |       <p class="text-lg text-gray-600 mb-2">Get access to our premium content and tools at a massive discount.</p>
 17 |       <p class="text-gray-700 text-md mb-4">Previously <span class="line-through text-red-500">৳1000</span>, now only <span class="text-green-600 font-semibold text-xl">৳499</span>!</p>
 18 |     </div>
 19 | 
 20 |     <div class="bg-gray-50 border border-dashed border-gray-300 p-4 rounded-lg mb-6 text-center">
 21 |       <p class="text-sm text-gray-700 mb-2">Send ৳499 to the following bKash (personal) number:</p>
 22 |       <p class="text-pink-600 font-bold text-2xl tracking-wide">01402633318</p>
 23 |       <p class="text-xs mt-2 text-gray-500">After payment, enter your transaction details below to confirm.</p>
 24 |     </div>
 25 | 
 26 |     <div class="mb-4">
 27 |       <input id="trxid" type="text" placeholder="bKash Transaction ID" class="w-full px-4 py-3 border rounded-lg mb-3 focus:outline-none focus:ring-2 focus:ring-blue-500" />
 28 |       <input id="mobile" type="text" placeholder="Your Mobile Number" class="w-full px-4 py-3 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500" />
 29 |     </div>
 30 | 
 31 |     <button id="submit-btn" onclick="submitTrx()" class="w-full bg-blue-600 hover:bg-blue-700 text-white py-3 rounded-lg font-semibold transition duration-200 flex items-center justify-center">
 32 |       <svg id="submit-spinner" class="w-5 h-5 mr-2 animate-spin hidden" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
 33 |         <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
 34 |         <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8v4a4 4 0 00-4 4H4z" />
 35 |       </svg>
 36 |       <span id="submit-text">Confirm Payment</span>
 37 |     </button>
 38 | 
 39 |     <p id="message" class="text-green-600 text-center mt-4 hidden">🎉 Payment submitted! We’ll verify and activate your access soon.</p>
 40 |     <p id="error" class="text-red-500 text-sm mt-2 text-center"></p>
 41 | 
 42 |     <div class="mt-6 text-center text-sm text-gray-500">
 43 |       1000+ satisfied users have already joined. Don’t miss out on this offer!
 44 |     </div>
 45 |   </div>
 46 | 
 47 |   <script type="module">
 48 |     const submitBtn = document.getElementById("submit-btn");
 49 |     const submitSpinner = document.getElementById("submit-spinner");
 50 |     const submitText = document.getElementById("submit-text");
 51 | 
 52 |     const firebaseConfig = {
 53 |       apiKey: "AIzaSyBqzg9fA14lD_ygNx8CSRiRsnrz1bBNfUw",
 54 |       authDomain: "memory-auth-9515c.firebaseapp.com",
 55 |       projectId: "memory-auth-9515c",
 56 |       storageBucket: "memory-auth-9515c.appspot.com",
 57 |       messagingSenderId: "862743577103",
 58 |       appId: "1:862743577103:web:11fe02f4c24ef2c9c8197a",
 59 |       measurementId: "G-XNT36FMPK6"
 60 |     };
 61 | 
 62 |     import { initializeApp } from "https://www.gstatic.com/firebasejs/9.22.2/firebase-app.js";
 63 |     import { getAuth, onAuthStateChanged } from "https://www.gstatic.com/firebasejs/9.22.2/firebase-auth.js";
 64 |     import { getFirestore, doc, updateDoc } from "https://www.gstatic.com/firebasejs/9.22.2/firebase-firestore.js";
 65 | 
 66 |     const app = initializeApp(firebaseConfig);
 67 |     const auth = getAuth(app);
 68 |     const db = getFirestore(app);
 69 | 
 70 |     const trxInput = document.getElementById("trxid");
 71 |     const mobileInput = document.getElementById("mobile");
 72 |     const msg = document.getElementById("message");
 73 |     const error = document.getElementById("error");
 74 | 
 75 |     let currentUID = null;
 76 | 
 77 |     onAuthStateChanged(auth, user => {
 78 |       if (!user) {
 79 |         window.location.href = "login.html";
 80 |         return;
 81 |       }
 82 |       currentUID = user.uid;
 83 |     });
 84 | 
 85 |     window.submitTrx = async () => {
 86 |       error.textContent = "";
 87 |       const trx = trxInput.value.trim();
 88 |       const mobile = mobileInput.value.trim();
 89 | 
 90 |       if (!trx || !mobile) {
 91 |         error.textContent = "Please fill in both the Transaction ID and Mobile Number.";
 92 |         return;
 93 |       }
 94 | 
 95 |       // Show loading
 96 |       submitSpinner.classList.remove("hidden");
 97 |       submitText.textContent = "Submitting...";
 98 |       submitBtn.disabled = true;
 99 | 
100 |       try {
101 |         const ref = doc(db, "users", currentUID);
102 |         await updateDoc(ref, {
103 |           trxid: trx,
104 |           mobile: mobile,
105 |           paymentStatus: "pending",
106 |           paid: true
107 |         });
108 | 
109 |         msg.classList.remove("hidden");
110 |         setTimeout(() => {
111 |           window.location.href = "index.html";
112 |         }, 2000);
113 |       } catch (err) {
114 |         error.textContent = "Failed to save. Try again.";
115 |         submitSpinner.classList.add("hidden");
116 |         submitText.textContent = "Confirm Payment";
117 |         submitBtn.disabled = false;
118 |       }
119 |     };
120 |   </script>
121 | </body>
122 | </html>
123 | 


--------------------------------------------------------------------------------
/Mukhosto/profile.html:
--------------------------------------------------------------------------------
  1 | <!DOCTYPE html>
  2 | <html lang="en">
  3 | <head>
  4 |   <meta charset="UTF-8" />
  5 |   <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  6 |   <title>Your Profile</title>
  7 |   <script src="https://www.gstatic.com/firebasejs/9.22.2/firebase-app.js"></script>
  8 |   <script src="https://www.gstatic.com/firebasejs/9.22.2/firebase-auth.js"></script>
  9 |   <script src="https://www.gstatic.com/firebasejs/9.22.2/firebase-firestore.js"></script>
 10 |   <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
 11 | </head>
 12 | <body class="bg-gradient-to-br from-gray-100 to-gray-300 min-h-screen flex items-center justify-center p-4">
 13 |   <div class="bg-white shadow-xl p-8 rounded-2xl max-w-md w-full space-y-6">
 14 |     <div class="text-center">
 15 |       <h1 class="text-3xl font-bold text-gray-800 mb-2">👤 Your Profile</h1>
 16 |       <p class="text-sm text-gray-500">Welcome back!</p>
 17 |     </div>
 18 | 
 19 |     <div class="space-y-4 text-gray-700">
 20 |       <div>
 21 |         <p class="text-xs font-medium text-gray-500 uppercase">Name</p>
 22 |         <p id="user-name" class="text-lg font-semibold text-gray-800">Loading...</p>
 23 |       </div>
 24 | 
 25 |       <div>
 26 |         <p class="text-xs font-medium text-gray-500 uppercase">Email</p>
 27 |         <p id="user-email" class="text-base text-blue-600 break-words">Loading...</p>
 28 |       </div>
 29 | 
 30 |       <div>
 31 |         <p class="text-xs font-medium text-gray-500 uppercase">Account Status</p>
 32 |         <p id="user-status" class="inline-block px-3 py-1 text-sm rounded-full bg-yellow-100 text-yellow-700 font-medium">Checking...</p>
 33 |       </div>
 34 | 
 35 |       <div>
 36 |         <p class="text-xs font-medium text-gray-500 uppercase">Signed in with</p>
 37 |         <p id="provider" class="text-green-600 font-medium">Loading...</p>
 38 |       </div>
 39 |     </div>
 40 | 
 41 |     <div class="mt-6 flex flex-wrap gap-2 justify-between items-center">
 42 |       <a href="/" class="text-sm text-blue-600 hover:underline">← Back to Home</a>
 43 |       <div class="flex gap-2">
 44 |         <button onclick="resetPassword()" class="bg-blue-500 text-white px-4 py-2 rounded text-sm hover:bg-blue-600">Reset Password</button>
 45 |         <button onclick="logout()" class="bg-red-500 text-white px-4 py-2 rounded text-sm hover:bg-red-600">Logout</button>
 46 |       </div>
 47 |     </div>
 48 |   </div>
 49 | 
 50 |   <script type="module">
 51 |     import { initializeApp } from "https://www.gstatic.com/firebasejs/9.22.2/firebase-app.js";
 52 |     import {
 53 |       getAuth,
 54 |       onAuthStateChanged,
 55 |       signOut,
 56 |       sendPasswordResetEmail
 57 |     } from "https://www.gstatic.com/firebasejs/9.22.2/firebase-auth.js";
 58 |     import {
 59 |       getFirestore,
 60 |       doc,
 61 |       getDoc
 62 |     } from "https://www.gstatic.com/firebasejs/9.22.2/firebase-firestore.js";
 63 | 
 64 |     const firebaseConfig = {
 65 |       apiKey: "AIzaSyBqzg9fA14lD_ygNx8CSRiRsnrz1bBNfUw",
 66 |       authDomain: "memory-auth-9515c.firebaseapp.com",
 67 |       projectId: "memory-auth-9515c",
 68 |       storageBucket: "memory-auth-9515c.appspot.com",
 69 |       messagingSenderId: "862743577103",
 70 |       appId: "1:862743577103:web:11fe02f4c24ef2c9c8197a"
 71 |     };
 72 | 
 73 |     const app = initializeApp(firebaseConfig);
 74 |     const auth = getAuth(app);
 75 |     const db = getFirestore(app);
 76 | 
 77 |     onAuthStateChanged(auth, async user => {
 78 |       if (!user) {
 79 |         window.location.href = "login.html";
 80 |         return;
 81 |       }
 82 | 
 83 |       document.getElementById("user-email").textContent = user.email;
 84 | 
 85 |       const provider = user.providerData[0]?.providerId || "unknown";
 86 |       document.getElementById("provider").textContent =
 87 |         provider === "password" ? "Email & Password" :
 88 |         provider === "google.com" ? "Google" : provider;
 89 | 
 90 |       try {
 91 |         const docRef = doc(db, "users", user.uid);
 92 |         const docSnap = await getDoc(docRef);
 93 |         if (docSnap.exists()) {
 94 |           const userData = docSnap.data();
 95 |           document.getElementById("user-name").textContent = userData.name || "N/A";
 96 | 
 97 |           const statusEl = document.getElementById("user-status");
 98 |           if (userData.paid === true && userData.paymentStatus === "verified") {
 99 |             statusEl.textContent = "Verified";
100 |             statusEl.className = "inline-block px-3 py-1 text-sm rounded-full bg-green-100 text-green-700 font-medium";
101 |           } else if (userData.paymentStatus === "pending") {
102 |             statusEl.textContent = "Pending";
103 |             statusEl.className = "inline-block px-3 py-1 text-sm rounded-full bg-yellow-100 text-yellow-700 font-medium";
104 |           } else {
105 |             statusEl.textContent = "Not Verified";
106 |             statusEl.className = "inline-block px-3 py-1 text-sm rounded-full bg-red-100 text-red-700 font-medium";
107 |           }
108 |         } else {
109 |           document.getElementById("user-name").textContent = "Unknown User";
110 |         }
111 |       } catch (error) {
112 |         console.error("Error fetching user profile:", error);
113 |       }
114 |     });
115 | 
116 |     window.logout = () => {
117 |       signOut(auth).then(() => {
118 |         window.location.href = "login.html";
119 |       });
120 |     };
121 | 
122 |     window.resetPassword = () => {
123 |       const user = auth.currentUser;
124 |       if (user && user.email) {
125 |         sendPasswordResetEmail(auth, user.email)
126 |           .then(() => {
127 |             alert('Password reset email sent! Please check your inbox.');
128 |           })
129 |           .catch((error) => {
130 |             console.error('Error sending password reset email:', error);
131 |             alert('Error sending reset email. Try again later.');
132 |           });
133 |       } else {
134 |         alert('No user is signed in.');
135 |       }
136 |     };
137 |   </script>
138 | </body>
139 | </html>
140 | 


--------------------------------------------------------------------------------
/Mukhosto/sw.js:
--------------------------------------------------------------------------------
1 | self.addEventListener('install', event => {
2 |   console.log('Service Worker installed');
3 | });
4 | 
5 | self.addEventListener('fetch', function (event) {
6 |   // Add offline cache logic here if needed
7 | });
8 | 


--------------------------------------------------------------------------------
/Mukhosto/verifyAccess.js:
--------------------------------------------------------------------------------
 1 | import { initializeApp } from "https://www.gstatic.com/firebasejs/9.22.2/firebase-app.js";
 2 | import {
 3 |   getAuth,
 4 |   onAuthStateChanged,
 5 | } from "https://www.gstatic.com/firebasejs/9.22.2/firebase-auth.js";
 6 | import {
 7 |   getFirestore,
 8 |   doc,
 9 |   getDoc,
10 | } from "https://www.gstatic.com/firebasejs/9.22.2/firebase-firestore.js";
11 | 
12 | // ✅ Your Firebase config
13 | const firebaseConfig = {
14 |   apiKey: "AIzaSyBqzg9fA14lD_ygNx8CSRiRsnrz1bBNfUw",
15 |   authDomain: "memory-auth-9515c.firebaseapp.com",
16 |   projectId: "memory-auth-9515c",
17 |   storageBucket: "memory-auth-9515c.appspot.com",
18 |   messagingSenderId: "862743577103",
19 |   appId: "1:862743577103:web:11fe02f4c24ef2c9c8197a",
20 |   measurementId: "G-XNT36FMPK6"
21 | };
22 | 
23 | const app = initializeApp(firebaseConfig);
24 | const auth = getAuth(app);
25 | const db = getFirestore(app);
26 | 
27 | onAuthStateChanged(auth, async (user) => {
28 |   if (!user) {
29 |     window.location.href = "/login.html";
30 |     return;
31 |   }
32 | 
33 |   const userRef = doc(db, "users", user.uid);
34 |   const userSnap = await getDoc(userRef);
35 | 
36 |   if (!userSnap.exists()) {
37 |     console.error("User document does not exist.");
38 |     window.location.href = "/login.html";
39 |     return;
40 |   }
41 | 
42 |   const userData = userSnap.data();
43 | 
44 |   // ✅ MAIN LOGIC
45 |   if (userData.paymentStatus === "verified") {
46 |     // Payment fully verified, allow access
47 |     console.log("Access granted: Payment verified");
48 |     return;
49 |   } else {
50 |     if (userData.paid === true && user.emailVerified) {
51 |       // Paid is true AND email is verified, allow access
52 |       console.log("Access granted: Paid and email verified");
53 |       return;
54 |     }
55 | 
56 |     if (userData.paid !== true) {
57 |       // Paid is not true, go to payment page
58 |       window.location.href = "/payment.html";
59 |       return;
60 |     }
61 | 
62 | 
63 |   }
64 | });
65 | 


--------------------------------------------------------------------------------
/Mukhosto/vocabulary/data.xlsx:
--------------------------------------------------------------------------------
https://raw.githubusercontent.com/ImJawadHossain/Mukhosto/3b9cd86196504288837847efb9850d47317864c7/Mukhosto/vocabulary/data.xlsx


--------------------------------------------------------------------------------
/Mukhosto/vocabulary/flashcard.html:
--------------------------------------------------------------------------------
 1 | <!DOCTYPE html>
 2 | <html lang="en">
 3 | <head>
 4 |   <meta charset="UTF-8" />
 5 |   <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
 6 |   <title>Vocabulary Flashcards</title>
 7 |   <link rel="stylesheet" href="style.css">
 8 |   <script src="https://cdn.jsdelivr.net/npm/xlsx@0.18.5/dist/xlsx.full.min.js"></script>
 9 |   <script src="https://www.gstatic.com/firebasejs/9.22.2/firebase-app.js"></script>
10 |   <script src="https://www.gstatic.com/firebasejs/9.22.2/firebase-auth.js"></script>
11 | </head>
12 | <body>
13 | 
14 | <h1>
15 |   <a href="/vocabulary" style="color: inherit; text-decoration: none;">
16 |     Vocabulary Flashcards
17 |   </a>
18 | </h1>
19 | 
20 | <div class="flex justify-center mb-4">
21 |   <label class="flex items-center space-x-2 text-sm text-gray-700">
22 |     <input type="checkbox" id="reverse-toggle" class="accent-blue-600">
23 |     <span>Reverse Practice</span>
24 |   </label>
25 | </div>
26 | 
27 | <label>
28 |   <input type="checkbox" id="toggle-extra" onchange="toggleExtras()" />
29 |   Show Extra Data
30 | </label>
31 | 
32 | <div class="top-controls">
33 |   <button class="shuffle-button" onclick="shuffleCards()">Shuffle Cards</button>
34 | </div>
35 | 
36 | 
37 | <div id="flashcard-container" class="flashcard-container"></div>
38 | 
39 | <div class="button-container">
40 |   <button class="nav-buttons" onclick="showPrevious()">Previous</button>
41 |   <button class="nav-buttons" id="next-btn" onclick="showNext()">Next</button>
42 | </div>
43 | 
44 | <div class="counter" id="card-counter">1/0</div>
45 | 
46 | <script src="flashcard.js"></script>
47 | 
48 | <br><br><br><br>
49 | 
50 | <footer class="text-center text-sm text-gray-500 mt-12 mb-6">
51 |   <a href="/" class="text-blue-600 hover:underline">← Back to Home</a>
52 |   <p class="mt-1">&copy; 2025 Jawad. All rights reserved.</p>
53 | </footer>
54 | 
55 | <script type="module" src="../verifyAccess.js"></script>
56 | 
57 | </body>
58 | </html>
59 | 


--------------------------------------------------------------------------------
/Mukhosto/vocabulary/flashcard.js:
--------------------------------------------------------------------------------
  1 | let flashcards = [];
  2 | let currentCardIndex = 0;
  3 | let showExtraData = false;
  4 | 
  5 | function getKnownWords() {
  6 |   return JSON.parse(localStorage.getItem("knownWords") || "[]");
  7 | }
  8 | 
  9 | function isReverseMode() {
 10 |   return localStorage.getItem("reversePractice") === "1";
 11 | }
 12 | 
 13 | document.addEventListener("DOMContentLoaded", () => {
 14 |   const toggle = document.getElementById("reverse-toggle");
 15 |   if (!toggle) return;
 16 | 
 17 |   toggle.checked = isReverseMode();
 18 | 
 19 |   toggle.addEventListener("change", () => {
 20 |     localStorage.setItem("reversePractice", toggle.checked ? "1" : "0");
 21 | 
 22 |     const params = new URLSearchParams(window.location.search);
 23 |     params.set("reverse", toggle.checked ? "1" : "0");
 24 |     window.location.search = params.toString();
 25 |   });
 26 | });
 27 | 
 28 | function saveKnownWord(word) {
 29 |   const knownWords = getKnownWords();
 30 |   if (!knownWords.includes(word)) {
 31 |     knownWords.push(word);
 32 |     localStorage.setItem("knownWords", JSON.stringify(knownWords));
 33 |   }
 34 | }
 35 | 
 36 | function getRangeFromURL() {
 37 |   const params = new URLSearchParams(window.location.search);
 38 |   const start = parseInt(params.get("start")) || 1;
 39 |   const end = parseInt(params.get("end")) || Number.MAX_SAFE_INTEGER;
 40 |   return { start, end };
 41 | }
 42 | 
 43 | document.addEventListener('keydown', (e) => {
 44 |   if (e.key === "ArrowRight") {
 45 |     showNext();
 46 |   } else if (e.key === "ArrowLeft") {
 47 |     showPrevious();
 48 |   } else if (e.key === " " || e.key === "Enter") {
 49 |     e.preventDefault(); // stop page from scrolling
 50 |     const card = document.querySelector(".flashcard");
 51 |     if (card) flipCard(card);
 52 |   }
 53 | });
 54 | 
 55 | window.addEventListener("DOMContentLoaded", () => {
 56 |   fetch("data.xlsx")
 57 |     .then(res => res.arrayBuffer())
 58 |     .then(buffer => {
 59 |       const reverse = isReverseMode();
 60 | 
 61 |       const workbook = XLSX.read(buffer, { type: "array" });
 62 |       const sheet = workbook.Sheets[workbook.SheetNames[0]];
 63 |       const json = XLSX.utils.sheet_to_json(sheet);
 64 | 
 65 |       const { start, end } = getRangeFromURL();
 66 |       const knownWords = getKnownWords();
 67 | 
 68 |       let selectedRows = json.slice(start - 1, end)
 69 |         .filter(row => !knownWords.includes(row["FrontData"] || ""));
 70 | 
 71 |       flashcards = selectedRows.map(row => ({
 72 |         front: reverse ? (row["BackData"] || "") : (row["FrontData"] || ""),
 73 |         back: reverse ? (row["FrontData"] || "") : (row["BackData"] || ""),
 74 |         subBack: row["SubBack"] || "",
 75 |         extras: Object.keys(row).filter(k => k.startsWith("ExtraData")).map(k => row[k]),
 76 |         reverseOriginal: row["FrontData"] || ""
 77 |       }));
 78 | 
 79 |       createFlashcard();
 80 |     })
 81 |     .catch(err => {
 82 |       document.getElementById("flashcard-container").innerHTML = `<p>Error loading file: ${err.message}</p>`;
 83 |     });
 84 | });
 85 | 
 86 | function createFlashcard() {
 87 |   const container = document.getElementById("flashcard-container");
 88 |   container.innerHTML = "";
 89 | 
 90 |   if (flashcards.length === 0) {
 91 |     container.innerHTML = "<p>No cards to review!</p>";
 92 |     return;
 93 |   }
 94 | 
 95 |   const card = flashcards[currentCardIndex];
 96 |   const cardDiv = document.createElement("div");
 97 |   cardDiv.classList.add("flashcard");
 98 | 
 99 |   cardDiv.innerHTML = `
100 |     <div class="card-inner">
101 |       <div class="card-front">
102 |         <span class="word">${card.front}</span>
103 |         <button class="pronunciation-btn" onclick="event.stopPropagation(); pronounce('${card.front}')">🔊</button>
104 |         <button class="known-icon" onclick="event.stopPropagation(); markAsKnown('${card.reverseOriginal || card.front}')">✅</button>
105 |       </div>
106 |       <div class="card-back">
107 |         <div class="meaning">${card.back}</div>
108 |         <button class="pronunciation-btn" onclick="event.stopPropagation(); pronounce('${card.back}')">🔊</button>
109 |         <button class="known-icon" onclick="event.stopPropagation(); markAsKnown('${card.reverseOriginal || card.front}')">✅</button>
110 |         ${card.subBack ? `<em class="sub-definition">${card.subBack}</em>` : ""}
111 |         ${showExtraData && card.extras.length > 0
112 |           ? `<div class="extras">${card.extras.map((e, i) => `<p>${i + 1}. ${e}</p>`).join("")}</div>`
113 |           : ""}
114 |       </div>
115 |     </div>
116 |   `;
117 | 
118 |   cardDiv.onclick = () => flipCard(cardDiv);
119 |   container.appendChild(cardDiv);
120 | 
121 |   updateCardCounter();
122 | }
123 | 
124 | function flipCard(cardElement) {
125 |   const inner = cardElement.querySelector(".card-inner");
126 |   inner.classList.toggle("is-flipped");
127 | }
128 | 
129 | function showNext() {
130 |   if (currentCardIndex < flashcards.length - 1) {
131 |     currentCardIndex++;
132 |     createFlashcard();
133 |   } else {
134 |     window.location.href = '/vocabulary'; // redirect to /vocabulary
135 |   }
136 | }
137 | 
138 | function showPrevious() {
139 |   if (currentCardIndex > 0) {
140 |     currentCardIndex--;
141 |     createFlashcard();
142 |   }
143 | }
144 | 
145 | function updateCardCounter() {
146 |   document.getElementById("card-counter").textContent = `${currentCardIndex + 1}/${flashcards.length}`;
147 | 
148 |   const nextBtn = document.getElementById("next-btn");
149 |   if (currentCardIndex === flashcards.length - 1) {
150 |     nextBtn.textContent = "Exit";
151 |   } else {
152 |     nextBtn.textContent = "Next";
153 |   }
154 | }
155 | 
156 | function toggleExtras() {
157 |   showExtraData = document.getElementById("toggle-extra").checked;
158 |   createFlashcard();
159 | }
160 | 
161 | function pronounce(word) {
162 |   const utterance = new SpeechSynthesisUtterance(word);
163 |   window.speechSynthesis.speak(utterance);
164 | }
165 | 
166 | function markAsKnown(word) {
167 |   saveKnownWord(word);
168 |   flashcards.splice(currentCardIndex, 1);
169 |   if (currentCardIndex >= flashcards.length) currentCardIndex = flashcards.length - 1;
170 |   createFlashcard();
171 | }
172 | 
173 | function shuffleCards() {
174 |   const container = document.getElementById("flashcard-container");
175 | 
176 |   // Add shuffle animation class
177 |   container.classList.add("shuffle-animation");
178 | 
179 |   setTimeout(() => {
180 |     flashcards.sort(() => Math.random() - 0.5);
181 |     currentCardIndex = 0;
182 |     createFlashcard();
183 | 
184 |     // Remove animation class after shuffle
185 |     container.classList.remove("shuffle-animation");
186 |   }, 500);
187 | }
188 | 


--------------------------------------------------------------------------------
/Mukhosto/vocabulary/index.html:
--------------------------------------------------------------------------------
 1 | <!DOCTYPE html>
 2 | <html lang="en">
 3 | <head>
 4 |   <meta charset="UTF-8" />
 5 |   <meta name="viewport" content="width=device-width, initial-scale=1.0" />
 6 |   <title>Vocabulary Sets</title>
 7 |   <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
 8 |   <link rel="stylesheet" href="style.css">
 9 |   <script src="https://www.gstatic.com/firebasejs/9.22.2/firebase-app.js"></script>
10 | <script src="https://www.gstatic.com/firebasejs/9.22.2/firebase-auth.js"></script>
11 | 
12 | </head>
13 | <body class="bg-gradient-to-b from-blue-50 to-white min-h-screen py-10 px-4">
14 |   <div class="max-w-4xl mx-auto text-center">
15 |     <h1 class="text-4xl font-bold text-blue-800 mb-4">Vocabulary Sets</h1>
16 |     <p class="text-gray-600 mb-6 text-lg">Practice vocabulary in small, manageable sets for better retention.</p>
17 | 
18 | 
19 | 
20 |     <!-- Reset Progress Button -->
21 | <div class="flex flex-wrap justify-center items-center gap-4 mb-8">
22 |   <button id="reset-progress" class="bg-red-500 text-white px-4 py-2 rounded-xl hover:bg-red-600 transition">
23 |     🔁 Reset Progress
24 |   </button>
25 |   <a href="known-words.html" class="bg-indigo-600 text-white px-4 py-2 rounded-xl shadow hover:bg-indigo-700 transition">
26 |     📚 Review Known Words
27 |   </a>
28 | </div>
29 | 
30 | 
31 | 
32 |   
33 | 
34 | 
35 |     <div id="sets-container" class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 gap-6">
36 |       <!-- Sets injected here -->
37 |     </div>
38 |   </div>
39 | 
40 |   <script src="https://cdn.jsdelivr.net/npm/xlsx@0.18.5/dist/xlsx.full.min.js"></script>
41 |   <script src="index.js"></script>
42 | 
43 | 
44 |   <footer class="text-center text-sm text-gray-500 mt-12 mb-6">
45 |   <a href="/" class="text-blue-600 hover:underline">← Back to Home</a>
46 |   <p class="mt-1">&copy; 2025 Jawad. All rights reserved.</p>
47 | </footer>
48 | 
49 | <script type="module" src="/verifyAccess.js"></script>
50 | 
51 | 
52 | 
53 | </body>
54 | </html>


--------------------------------------------------------------------------------
/Mukhosto/vocabulary/index.js:
--------------------------------------------------------------------------------
 1 | function getKnownWords() {
 2 |   return JSON.parse(localStorage.getItem("knownWords") || "[]");
 3 | }
 4 | 
 5 | 
 6 | 
 7 | const chunkSize = 20;
 8 | const setsContainer = document.getElementById("sets-container");
 9 | const colorClasses = ['blue', 'green', 'purple', 'pink', 'yellow', 'red', 'indigo'];
10 | 
11 | document.addEventListener("DOMContentLoaded", () => {
12 |   const resetBtn = document.getElementById("reset-progress");
13 |   if (resetBtn) {
14 |     resetBtn.addEventListener("click", () => {
15 |       if (confirm("Are you sure you want to reset your progress? This will unmark all known words.")) {
16 |         localStorage.removeItem("knownWords");
17 |         window.location.reload();
18 |       }
19 |     });
20 |   }
21 | 
22 |   fetch('data.xlsx')
23 |     .then(res => res.arrayBuffer())
24 |     .then(buffer => {
25 |       const workbook = XLSX.read(buffer, { type: 'array' });
26 |       const sheet = workbook.Sheets[workbook.SheetNames[0]];
27 |       const data = XLSX.utils.sheet_to_json(sheet);
28 | 
29 |       const knownWords = getKnownWords();
30 |       const totalWords = data.filter(row => row["FrontData"]).length;
31 | 
32 |       for (let i = 0; i < Math.ceil(totalWords / chunkSize); i++) {
33 |         const start = i * chunkSize;
34 |         const end = Math.min((i + 1) * chunkSize, totalWords);
35 | 
36 |         const selectedRows = data.slice(start, end)
37 |           .filter(row => row["FrontData"] && !knownWords.includes(row["FrontData"]));
38 | 
39 |         const color = colorClasses[i % colorClasses.length];
40 | 
41 | 
42 | 
43 | 
44 | 
45 | const sliceRows = data.slice(start, end).filter(r => r["FrontData"]);
46 | const totalInSet = sliceRows.length;
47 | const knownInSet = sliceRows.filter(r => knownWords.includes(r["FrontData"])).length;
48 | const pct = totalInSet ? Math.round((knownInSet / totalInSet) * 100) : 0;
49 | 
50 | const card = document.createElement('div');
51 | card.className = `bg-white p-6 rounded-2xl shadow-md hover:shadow-xl transition`;
52 | 
53 | card.innerHTML = `
54 |   <h2 class="text-2xl font-semibold text-${color}-600 mb-2">Set ${i + 1}</h2>
55 |   <p class="text-gray-500 mb-2">Words ${start + 1} – ${end}</p>
56 | 
57 |   <div class="w-full bg-gray-200 rounded-full h-2 mb-2">
58 |     <div class="bg-${color}-600 h-2 rounded-full" style="width: ${pct}%;"></div>
59 |   </div>
60 |   <p class="text-sm text-gray-600 mb-4">${knownInSet}/${totalInSet} known (${pct}%)</p>
61 | 
62 |   ${
63 |     knownInSet < totalInSet
64 |       ? `<a href="flashcard.html?start=${start + 1}&end=${end}&reverse=${document.getElementById('reverse-toggle')?.checked ? '1' : '0'}" class="inline-block bg-${color}-600 text-white px-4 py-2 rounded-xl">Start</a>`
65 |       : `<div class="text-green-600 font-semibold">✅ Completed</div>`
66 |   }
67 | `;
68 | 
69 | setsContainer.appendChild(card);
70 | 
71 | 
72 | 
73 | 
74 | 
75 | 
76 |       }
77 | 
78 |       if (totalWords === 0) {
79 |         setsContainer.innerHTML = `<p class="text-green-600">🎉 You've learned all the words! Reset to start over.</p>`;
80 |       }
81 |     })
82 |     .catch(err => {
83 |       setsContainer.innerHTML = `<p class="text-red-500">Error loading vocabulary file: ${err.message}</p>`;
84 |     });
85 | });
86 | 


--------------------------------------------------------------------------------
/Mukhosto/vocabulary/known-words.html:
--------------------------------------------------------------------------------
  1 | <!DOCTYPE html>
  2 | <html lang="en">
  3 | <head>
  4 |   <meta charset="UTF-8" />
  5 |   <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  6 |   <title>Known Vocabulary Flashcards</title>
  7 |   <link rel="stylesheet" href="style.css">
  8 |   <script src="https://cdn.jsdelivr.net/npm/xlsx@0.18.5/dist/xlsx.full.min.js"></script>
  9 |   <script src="https://www.gstatic.com/firebasejs/9.22.2/firebase-app.js"></script>
 10 |   <script src="https://www.gstatic.com/firebasejs/9.22.2/firebase-auth.js"></script>
 11 | </head>
 12 | <body>
 13 | 
 14 |   <button onclick="exportKnownWords()" class="nav-buttons" style="margin-bottom: 20px;">⬇ Export Known Words</button>
 15 |   <input type="file" id="import-file" accept=".xlsx" style="display: none;" onchange="importKnownWords(event)">
 16 |   <button onclick="document.getElementById('import-file').click()" class="nav-buttons">⬆ Import Known Words</button>
 17 | 
 18 |   <h1>
 19 |     <a href="/vocabulary" style="color: inherit; text-decoration: none;">
 20 |       Known Vocabulary Flashcards
 21 |     </a>
 22 |   </h1>
 23 | 
 24 |   <div class="flex justify-center mb-4">
 25 |     <label class="flex items-center space-x-2 text-sm text-gray-700">
 26 |       <input type="checkbox" id="reverse-toggle" class="accent-blue-600">
 27 |       <span>Reverse Practice</span>
 28 |     </label>
 29 |   </div>
 30 | 
 31 |   <label>
 32 |     <input type="checkbox" id="toggle-extra" onchange="toggleExtras()" />
 33 |     Show Extra Data
 34 |   </label>
 35 | 
 36 |   <br>
 37 | 
 38 |   <button onclick="shuffleFlashcards()" class="nav-buttons" style="margin-top: 10px;">🔀 Shuffle Cards</button>
 39 | 
 40 |   <div id="flashcard-container" class="flashcard-container"></div>
 41 | 
 42 |   <div class="button-container">
 43 |     <button class="nav-buttons" id="previous-button" onclick="showPrevious()">Previous</button>
 44 |     <button class="nav-buttons" id="next-button" onclick="showNext()">Next</button>
 45 |   </div>
 46 | 
 47 |   <div class="counter" id="card-counter">1/0</div>
 48 | 
 49 |   <script>
 50 |     let flashcards = [];
 51 |     let currentCardIndex = 0;
 52 |     let showExtraData = false;
 53 | 
 54 |     function getKnownWords() {
 55 |       return JSON.parse(localStorage.getItem("knownWords") || "[]");
 56 |     }
 57 | 
 58 |     function isReverseMode() {
 59 |       return localStorage.getItem("reversePractice") === "1";
 60 |     }
 61 | 
 62 |     document.addEventListener("DOMContentLoaded", () => {
 63 |       const toggle = document.getElementById("reverse-toggle");
 64 |       if (!toggle) return;
 65 | 
 66 |       toggle.checked = isReverseMode();
 67 | 
 68 |       toggle.addEventListener("change", () => {
 69 |         localStorage.setItem("reversePractice", toggle.checked ? "1" : "0");
 70 |         const params = new URLSearchParams(window.location.search);
 71 |         params.set("reverse", toggle.checked ? "1" : "0");
 72 |         window.location.search = params.toString();
 73 |       });
 74 |     });
 75 | 
 76 | 
 77 |     document.addEventListener('keydown', (e) => {
 78 |   if (e.key === "ArrowRight") {
 79 |     showNext();
 80 |   } else if (e.key === "ArrowLeft") {
 81 |     showPrevious();
 82 |   } else if (e.key === " " || e.key === "Enter") {
 83 |     e.preventDefault(); // stop page from scrolling
 84 |     const card = document.querySelector(".flashcard");
 85 |     if (card) flipCard(card);
 86 |   }
 87 | });
 88 | 
 89 | 
 90 |     window.addEventListener("DOMContentLoaded", () => {
 91 |       fetch("data.xlsx")
 92 |         .then(res => res.arrayBuffer())
 93 |         .then(buffer => {
 94 |           const workbook = XLSX.read(buffer, { type: "array" });
 95 |           const sheet = workbook.Sheets[workbook.SheetNames[0]];
 96 |           const json = XLSX.utils.sheet_to_json(sheet);
 97 | 
 98 |           const knownWords = getKnownWords();
 99 |           const reverse = isReverseMode();
100 | 
101 |           flashcards = json.filter(row => knownWords.includes(row["FrontData"]))
102 |             .map(row => ({
103 |               front: reverse ? (row["BackData"] || "") : (row["FrontData"] || ""),
104 |               back: reverse ? (row["FrontData"] || "") : (row["BackData"] || ""),
105 |               subBack: row["SubBack"] || "",
106 |               extras: Object.keys(row).filter(k => k.startsWith("ExtraData")).map(k => row[k])
107 |             }));
108 | 
109 |           createFlashcard();
110 |         })
111 |         .catch(err => {
112 |           document.getElementById("flashcard-container").innerHTML = `<p>Error loading file: ${err.message}</p>`;
113 |         });
114 |     });
115 | 
116 |     function createFlashcard() {
117 |       const container = document.getElementById("flashcard-container");
118 |       container.innerHTML = "";
119 | 
120 |       if (flashcards.length === 0) {
121 |         container.innerHTML = "<p>No known words to review!</p>";
122 |         return;
123 |       }
124 | 
125 |       const card = flashcards[currentCardIndex];
126 |       const cardDiv = document.createElement("div");
127 |       cardDiv.classList.add("flashcard");
128 | 
129 | cardDiv.innerHTML = `
130 |   <div class="card-inner">
131 |     <div class="card-front">
132 |       <button class="remove-btn" onclick="event.stopPropagation(); removeCurrentCard()">✖️</button>
133 |       <span class="word">${card.front}</span>
134 |       <button class="pronunciation-btn" onclick="event.stopPropagation(); pronounce('${card.front}')">🔊</button>
135 |     </div>
136 |     <div class="card-back">
137 |       <div class="meaning">${card.back}</div>
138 |       <button class="pronunciation-btn" onclick="event.stopPropagation(); pronounce('${card.back}')">🔊</button>
139 |       ${card.subBack ? `<em class="sub-definition">${card.subBack}</em>` : ""}
140 |       ${showExtraData && card.extras.length > 0
141 |         ? `<div class="extras">${card.extras.map((e, i) => `${i + 1}. ${e}`).join("<br>")}</div>`
142 |         : ""}
143 |     </div>
144 |   </div>
145 | `;
146 | 
147 | 
148 | 
149 | 
150 |       cardDiv.onclick = () => flipCard(cardDiv);
151 |       container.appendChild(cardDiv);
152 | 
153 |       updateCardCounter();
154 |       updateNextButton();
155 |     }
156 | 
157 | 
158 | 
159 |   function removeCurrentCard() {
160 |     const card = flashcards[currentCardIndex];
161 |     if (!card) return;
162 | 
163 |     let knownWords = getKnownWords();
164 |     const wordToRemove = isReverseMode() ? card.back : card.front;
165 |     knownWords = knownWords.filter(w => w !== wordToRemove);
166 |     localStorage.setItem("knownWords", JSON.stringify(knownWords));
167 | 
168 |     flashcards.splice(currentCardIndex, 1);
169 | 
170 |     if (currentCardIndex >= flashcards.length) {
171 |       currentCardIndex = flashcards.length - 1;
172 |     }
173 | 
174 |     if (flashcards.length === 0) {
175 |       document.getElementById("flashcard-container").innerHTML = "<p>No known words to review!</p>";
176 |       document.getElementById("card-counter").textContent = "0/0";
177 |     } else {
178 |       createFlashcard();
179 |     }
180 | }
181 | 
182 | 
183 |     function flipCard(cardElement) {
184 |       const inner = cardElement.querySelector(".card-inner");
185 |       inner.classList.toggle("is-flipped");
186 |     }
187 | 
188 |     function showNext() {
189 |       if (currentCardIndex < flashcards.length - 1) {
190 |         currentCardIndex++;
191 |         createFlashcard();
192 |       } else {
193 |         window.location.href = "/vocabulary";
194 |       }
195 |     }
196 | 
197 |     function showPrevious() {
198 |       if (currentCardIndex > 0) {
199 |         currentCardIndex--;
200 |         createFlashcard();
201 |       }
202 |     }
203 | 
204 |     function updateCardCounter() {
205 |       document.getElementById("card-counter").textContent = `${currentCardIndex + 1}/${flashcards.length}`;
206 |     }
207 | 
208 |     function updateNextButton() {
209 |       const nextBtn = document.getElementById("next-button");
210 |       if (currentCardIndex === flashcards.length - 1) {
211 |         nextBtn.textContent = "Exit";
212 |       } else {
213 |         nextBtn.textContent = "Next";
214 |       }
215 |     }
216 | 
217 |     function toggleExtras() {
218 |       showExtraData = document.getElementById("toggle-extra").checked;
219 |       createFlashcard();
220 |     }
221 | 
222 |     function pronounce(word) {
223 |       const utterance = new SpeechSynthesisUtterance(word);
224 |       window.speechSynthesis.speak(utterance);
225 |     }
226 | 
227 |     function shuffleFlashcards() {
228 |       flashcards.sort(() => Math.random() - 0.5);
229 |       currentCardIndex = 0;
230 |       createFlashcard();
231 |     }
232 | 
233 | function importKnownWords(event) {
234 |   const file = event.target.files[0];
235 |   if (!file) return;
236 | 
237 |   const reader = new FileReader();
238 |   reader.onload = function (e) {
239 |     const data = new Uint8Array(e.target.result);
240 |     const workbook = XLSX.read(data, { type: 'array' });
241 |     const sheet = workbook.Sheets[workbook.SheetNames[0]];
242 |     const json = XLSX.utils.sheet_to_json(sheet, { header: 1 }); // Raw array, no headers
243 | 
244 |     const importedWords = json.flat().filter(Boolean); // Flatten and remove empty cells
245 | 
246 |     if (importedWords.length > 0) {
247 |       localStorage.setItem("knownWords", JSON.stringify(importedWords));
248 |       alert("Known words imported successfully!");
249 |       location.reload();
250 |     } else {
251 |       alert("No valid known words found in the file.");
252 |     }
253 |   };
254 |   reader.readAsArrayBuffer(file);
255 | }
256 | 
257 | 
258 | function exportKnownWords() {
259 |   const knownWords = getKnownWords();
260 | 
261 |   if (knownWords.length === 0) {
262 |     alert("No known words to export!");
263 |     return;
264 |   }
265 | 
266 |   const rows = knownWords.map(word => [word]); // Just one column without header
267 | 
268 |   const worksheet = XLSX.utils.aoa_to_sheet(rows);
269 |   const workbook = XLSX.utils.book_new();
270 |   XLSX.utils.book_append_sheet(workbook, worksheet, "Known Words");
271 | 
272 |   XLSX.writeFile(workbook, "known_words.xlsx");
273 | }
274 | 
275 |   </script>
276 | 
277 |   <br><br><br><br>
278 | 
279 |   <footer class="text-center text-sm text-gray-500 mt-12 mb-6">
280 |     <a href="/" class="text-blue-600 hover:underline">← Back to Home</a>
281 |     <p class="mt-1">&copy; 2025 Jawad. All rights reserved.</p>
282 |   </footer>
283 | 
284 |   <script type="module" src="/verifyAccess.js"></script>
285 | 
286 | </body>
287 | </html>
288 | 


--------------------------------------------------------------------------------
/Mukhosto/vocabulary/style.css:
--------------------------------------------------------------------------------
  1 | body {
  2 |   font-family: Arial, sans-serif;
  3 |   background-color: #f4f4f4;
  4 |   text-align: center;
  5 |   margin: 0;
  6 |   padding: 0;
  7 | }
  8 | 
  9 | .flashcard-container {
 10 |   display: flex;
 11 |   justify-content: center;
 12 |   align-items: center;
 13 |   margin-top: 40px;
 14 |   min-height: 300px;
 15 | }
 16 | 
 17 | .flashcard {
 18 |   width: 320px;
 19 |   height: 220px;
 20 |   perspective: 1000px;
 21 | }
 22 | 
 23 | .card-inner {
 24 |   width: 100%;
 25 |   height: 100%;
 26 |   position: relative;
 27 |   transform-style: preserve-3d;
 28 |   transition: transform 0.6s ease;
 29 | }
 30 | 
 31 | .card-inner.is-flipped {
 32 |   transform: rotateY(180deg);
 33 | }
 34 | 
 35 | .card-front, .card-back {
 36 |   position: absolute;
 37 |   top: 0;
 38 |   left: 0;
 39 |   width: 100%;
 40 |   height: 100%;
 41 |   backface-visibility: hidden;
 42 |   background-color: #fff;
 43 |   border: 2px solid #ddd;
 44 |   border-radius: 12px;
 45 |   box-sizing: border-box;
 46 |   padding: 20px;
 47 |   display: flex;
 48 |   justify-content: center;
 49 |   align-items: center;
 50 |   flex-direction: column;
 51 |   box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
 52 | }
 53 | 
 54 | .card-front {
 55 |   font-size: 28px;
 56 |   z-index: 2;
 57 | }
 58 | 
 59 | .card-back {
 60 |   transform: rotateY(180deg);
 61 |   font-size: 18px;
 62 |   z-index: 1;
 63 | }
 64 | 
 65 | .button-container {
 66 |   margin-top: 20px;
 67 | }
 68 | 
 69 | .nav-buttons, .known-btn {
 70 |   background-color: #4CAF50;
 71 |   color: white;
 72 |   padding: 10px 20px;
 73 |   border: none;
 74 |   font-size: 16px;
 75 |   margin: 5px;
 76 |   border-radius: 8px;
 77 |   cursor: pointer;
 78 | }
 79 | 
 80 | .known-btn {
 81 |   background-color: #ff9800;
 82 |   margin-top: 12px;
 83 | }
 84 | 
 85 | .counter {
 86 |   font-size: 16px;
 87 |   margin-top: 10px;
 88 |   color: #555;
 89 | }
 90 | 
 91 | .pronunciation-btn {
 92 |   background: none;
 93 |   border: none;
 94 |   font-size: 20px;
 95 |   position: absolute;
 96 |   top: 10px;
 97 |   right: 10px;
 98 |   cursor: pointer;
 99 | }
100 | 
101 | .extras {
102 |   margin-top: 10px;
103 |   padding: 8px;
104 |   background-color: #f9f9f9;
105 |   border-radius: 6px;
106 |   font-size: 12px;
107 |   color: #444;
108 | }
109 | 
110 | .known-icon {
111 |   position: absolute;
112 |   top: 10px;
113 |   left: 10px;
114 |   background-color: rgba(255, 255, 255, 0.1);
115 |   border: 2px solid #4CAF50;
116 |   border-radius: 50%;
117 |   padding: 6px;
118 |   font-size: 16px;
119 |   cursor: pointer;
120 |   z-index: 3;
121 |   transition: background-color 0.2s, transform 0.2s;
122 | }
123 | 
124 | .known-icon:hover {
125 |   background-color: rgba(76, 175, 80, 0.2);
126 |   transform: scale(1.1);
127 | }
128 | 
129 | 
130 | .word {
131 |   font-size: 28px;        /* was 36px */
132 |   font-weight: bold;
133 |   color: #333;
134 |   padding: 16px 8px;
135 | }
136 | 
137 | .card-back .meaning {
138 |   font-size: 18px;        /* was 20px */
139 |   font-weight: bold;
140 |   color: #1e3a8a;
141 |   margin-bottom: 10px;
142 | }
143 | 
144 | .sub-definition {
145 |   font-size: 14px;        /* was 16px */
146 |   color: #777;
147 |   display: block;
148 |   margin-bottom: 8px;
149 | }
150 | 
151 | .card-back .extras {
152 |   font-size: 12px;        /* was 13px */
153 |   color: #444;
154 |   background-color: #f3f3f3;
155 |   padding: 8px;
156 |   border-radius: 8px;
157 |   text-align: left;
158 | }
159 | 
160 | .flashcard-container {
161 |   transition: opacity 0.3s ease;
162 | }
163 | 
164 | 
165 | @keyframes shuffleEffect {
166 |   0% { transform: rotate(0deg); }
167 |   25% { transform: rotate(2deg); }
168 |   50% { transform: rotate(-2deg); }
169 |   75% { transform: rotate(1deg); }
170 |   100% { transform: rotate(0deg); }
171 | }
172 | 
173 | .shuffle-animation {
174 |   animation: shuffleEffect 0.5s ease;
175 | }
176 | 
177 | .top-controls {
178 |   margin: 20px 0;
179 | }
180 | 
181 | .shuffle-button {
182 |   background-color: #3498db;
183 |   color: white;
184 |   padding: 10px 20px;
185 |   font-size: 16px;
186 |   border: none;
187 |   border-radius: 8px;
188 |   cursor: pointer;
189 | }
190 | 
191 | .shuffle-button:hover {
192 |   background-color: #2980b9;
193 | }
194 | 
195 | .extras p {
196 |   margin: 4px 0;
197 |   padding: 0;
198 |   font-size: 12px;
199 |   color: #444;
200 | }
201 | 
202 | .flashcard {
203 |   position: relative; /* make sure the card is positioned */
204 | }
205 | 
206 | .remove-btn {
207 |   position: absolute;
208 |   top: 10px;
209 |   left: 10px;
210 |   background: none;
211 |   border: none;
212 |   font-size: 24px;
213 |   cursor: pointer;
214 |   color: #f44336;
215 |   z-index: 10;
216 | }
217 | .remove-btn:hover {
218 |   color: #c62828;
219 | }
220 | 



--------------------------------------------------------------------------------